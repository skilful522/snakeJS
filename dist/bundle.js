!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=121)}([function(t,n,e){var r=e(1),o=e(7),i=e(14),u=e(11),a=e(17),c=function(t,n,e){var f,s,l,p,h=t&c.F,v=t&c.G,d=t&c.S,y=t&c.P,g=t&c.B,b=v?r:d?r[n]||(r[n]={}):(r[n]||{}).prototype,m=v?o:o[n]||(o[n]={}),S=m.prototype||(m.prototype={});for(f in v&&(e=n),e)l=((s=!h&&b&&void 0!==b[f])?b:e)[f],p=g&&s?a(l,r):y&&"function"==typeof l?a(Function.call,l):l,b&&u(b,f,l,t&c.U),m[f]!=l&&i(m,f,p),y&&S[f]!=l&&(S[f]=l)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(48)("wks"),o=e(29),i=e(1).Symbol,u="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=r},function(t,n,e){var r=e(19),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},function(t,n,e){t.exports=!e(2)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,n,e){var r=e(3),o=e(88),i=e(26),u=Object.defineProperty;n.f=e(8)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(24);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(1),o=e(14),i=e(13),u=e(29)("src"),a=e(126),c=(""+a).split("toString");e(7).inspectSource=function(t){return a.call(t)},(t.exports=function(t,n,e,a){var f="function"==typeof e;f&&(i(e,"name")||o(e,"name",n)),t[n]!==e&&(f&&(i(e,u)||o(e,u,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:a?t[n]?t[n]=e:o(t,n,e):(delete t[n],o(t,n,e)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[u]||a.call(this)}))},function(t,n,e){var r=e(0),o=e(2),i=e(24),u=/"/g,a=function(t,n,e,r){var o=String(i(t)),a="<"+n;return""!==e&&(a+=" "+e+'="'+String(r).replace(u,"&quot;")+'"'),a+">"+o+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(a),r(r.P+r.F*o((function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3})),"String",e)}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(9),o=e(28);t.exports=e(8)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(44),o=e(24);t.exports=function(t){return r(o(t))}},function(t,n,e){"use strict";var r=e(2);t.exports=function(t,n){return!!t&&r((function(){n?t.call(null,(function(){}),1):t.call(null)}))}},function(t,n,e){var r=e(18);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(45),o=e(28),i=e(15),u=e(26),a=e(13),c=e(88),f=Object.getOwnPropertyDescriptor;n.f=e(8)?f:function(t,n){if(t=i(t),n=u(n,!0),c)try{return f(t,n)}catch(t){}if(a(t,n))return o(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(0),o=e(7),i=e(2);t.exports=function(t,n){var e=(o.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*i((function(){e(1)})),"Object",u)}},function(t,n,e){var r=e(17),o=e(44),i=e(10),u=e(6),a=e(104);t.exports=function(t,n){var e=1==t,c=2==t,f=3==t,s=4==t,l=6==t,p=5==t||l,h=n||a;return function(n,a,v){for(var d,y,g=i(n),b=o(g),m=r(a,v,3),S=u(b.length),w=0,x=e?h(n,S):c?h(n,0):void 0;S>w;w++)if((p||w in b)&&(y=m(d=b[w],w,g),t))if(e)x[w]=y;else if(y)switch(t){case 3:return!0;case 5:return d;case 6:return w;case 2:x.push(d)}else if(s)return!1;return l?-1:f||s?s:x}}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){"use strict";if(e(8)){var r=e(30),o=e(1),i=e(2),u=e(0),a=e(59),c=e(84),f=e(17),s=e(42),l=e(28),p=e(14),h=e(43),v=e(19),d=e(6),y=e(115),g=e(32),b=e(26),m=e(13),S=e(46),w=e(4),x=e(10),P=e(76),T=e(33),_=e(35),O=e(34).f,k=e(78),E=e(29),M=e(5),F=e(22),j=e(49),R=e(47),A=e(80),I=e(40),W=e(52),L=e(41),N=e(79),C=e(106),G=e(9),B=e(20),D=G.f,V=B.f,z=o.RangeError,U=o.TypeError,H=o.Uint8Array,Z=Array.prototype,Y=c.ArrayBuffer,J=c.DataView,q=F(0),K=F(2),$=F(3),X=F(4),Q=F(5),tt=F(6),nt=j(!0),et=j(!1),rt=A.values,ot=A.keys,it=A.entries,ut=Z.lastIndexOf,at=Z.reduce,ct=Z.reduceRight,ft=Z.join,st=Z.sort,lt=Z.slice,pt=Z.toString,ht=Z.toLocaleString,vt=M("iterator"),dt=M("toStringTag"),yt=E("typed_constructor"),gt=E("def_constructor"),bt=a.CONSTR,mt=a.TYPED,St=a.VIEW,wt=F(1,(function(t,n){return Ot(R(t,t[gt]),n)})),xt=i((function(){return 1===new H(new Uint16Array([1]).buffer)[0]})),Pt=!!H&&!!H.prototype.set&&i((function(){new H(1).set({})})),Tt=function(t,n){var e=v(t);if(e<0||e%n)throw z("Wrong offset!");return e},_t=function(t){if(w(t)&&mt in t)return t;throw U(t+" is not a typed array!")},Ot=function(t,n){if(!w(t)||!(yt in t))throw U("It is not a typed array constructor!");return new t(n)},kt=function(t,n){return Et(R(t,t[gt]),n)},Et=function(t,n){for(var e=0,r=n.length,o=Ot(t,r);r>e;)o[e]=n[e++];return o},Mt=function(t,n,e){D(t,n,{get:function(){return this._d[e]}})},Ft=function(t){var n,e,r,o,i,u,a=x(t),c=arguments.length,s=c>1?arguments[1]:void 0,l=void 0!==s,p=k(a);if(null!=p&&!P(p)){for(u=p.call(a),r=[],n=0;!(i=u.next()).done;n++)r.push(i.value);a=r}for(l&&c>2&&(s=f(s,arguments[2],2)),n=0,e=d(a.length),o=Ot(this,e);e>n;n++)o[n]=l?s(a[n],n):a[n];return o},jt=function(){for(var t=0,n=arguments.length,e=Ot(this,n);n>t;)e[t]=arguments[t++];return e},Rt=!!H&&i((function(){ht.call(new H(1))})),At=function(){return ht.apply(Rt?lt.call(_t(this)):_t(this),arguments)},It={copyWithin:function(t,n){return C.call(_t(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return X(_t(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return N.apply(_t(this),arguments)},filter:function(t){return kt(this,K(_t(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(_t(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(_t(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){q(_t(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(_t(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(_t(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ft.apply(_t(this),arguments)},lastIndexOf:function(t){return ut.apply(_t(this),arguments)},map:function(t){return wt(_t(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return at.apply(_t(this),arguments)},reduceRight:function(t){return ct.apply(_t(this),arguments)},reverse:function(){for(var t,n=_t(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return $(_t(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return st.call(_t(this),t)},subarray:function(t,n){var e=_t(this),r=e.length,o=g(t,r);return new(R(e,e[gt]))(e.buffer,e.byteOffset+o*e.BYTES_PER_ELEMENT,d((void 0===n?r:g(n,r))-o))}},Wt=function(t,n){return kt(this,lt.call(_t(this),t,n))},Lt=function(t){_t(this);var n=Tt(arguments[1],1),e=this.length,r=x(t),o=d(r.length),i=0;if(o+n>e)throw z("Wrong length!");for(;i<o;)this[n+i]=r[i++]},Nt={entries:function(){return it.call(_t(this))},keys:function(){return ot.call(_t(this))},values:function(){return rt.call(_t(this))}},Ct=function(t,n){return w(t)&&t[mt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Gt=function(t,n){return Ct(t,n=b(n,!0))?l(2,t[n]):V(t,n)},Bt=function(t,n,e){return!(Ct(t,n=b(n,!0))&&w(e)&&m(e,"value"))||m(e,"get")||m(e,"set")||e.configurable||m(e,"writable")&&!e.writable||m(e,"enumerable")&&!e.enumerable?D(t,n,e):(t[n]=e.value,t)};bt||(B.f=Gt,G.f=Bt),u(u.S+u.F*!bt,"Object",{getOwnPropertyDescriptor:Gt,defineProperty:Bt}),i((function(){pt.call({})}))&&(pt=ht=function(){return ft.call(this)});var Dt=h({},It);h(Dt,Nt),p(Dt,vt,Nt.values),h(Dt,{slice:Wt,set:Lt,constructor:function(){},toString:pt,toLocaleString:At}),Mt(Dt,"buffer","b"),Mt(Dt,"byteOffset","o"),Mt(Dt,"byteLength","l"),Mt(Dt,"length","e"),D(Dt,dt,{get:function(){return this[mt]}}),t.exports=function(t,n,e,c){var f=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,h="set"+t,v=o[f],g=v||{},b=v&&_(v),m=!v||!a.ABV,x={},P=v&&v.prototype,k=function(t,e){D(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,xt)}(this,e)},set:function(t){return function(t,e,r){var o=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[h](e*n+o.o,r,xt)}(this,e,t)},enumerable:!0})};m?(v=e((function(t,e,r,o){s(t,v,f,"_d");var i,u,a,c,l=0,h=0;if(w(e)){if(!(e instanceof Y||"ArrayBuffer"==(c=S(e))||"SharedArrayBuffer"==c))return mt in e?Et(v,e):Ft.call(v,e);i=e,h=Tt(r,n);var g=e.byteLength;if(void 0===o){if(g%n)throw z("Wrong length!");if((u=g-h)<0)throw z("Wrong length!")}else if((u=d(o)*n)+h>g)throw z("Wrong length!");a=u/n}else a=y(e),i=new Y(u=a*n);for(p(t,"_d",{b:i,o:h,l:u,e:a,v:new J(i)});l<a;)k(t,l++)})),P=v.prototype=T(Dt),p(P,"constructor",v)):i((function(){v(1)}))&&i((function(){new v(-1)}))&&W((function(t){new v,new v(null),new v(1.5),new v(t)}),!0)||(v=e((function(t,e,r,o){var i;return s(t,v,f),w(e)?e instanceof Y||"ArrayBuffer"==(i=S(e))||"SharedArrayBuffer"==i?void 0!==o?new g(e,Tt(r,n),o):void 0!==r?new g(e,Tt(r,n)):new g(e):mt in e?Et(v,e):Ft.call(v,e):new g(y(e))})),q(b!==Function.prototype?O(g).concat(O(b)):O(g),(function(t){t in v||p(v,t,g[t])})),v.prototype=P,r||(P.constructor=v));var E=P[vt],M=!!E&&("values"==E.name||null==E.name),F=Nt.values;p(v,yt,!0),p(P,mt,f),p(P,St,!0),p(P,gt,v),(c?new v(1)[dt]==f:dt in P)||D(P,dt,{get:function(){return f}}),x[f]=v,u(u.G+u.W+u.F*(v!=g),x),u(u.S,f,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*i((function(){g.of.call(v,1)})),f,{from:Ft,of:jt}),"BYTES_PER_ELEMENT"in P||p(P,"BYTES_PER_ELEMENT",n),u(u.P,f,It),L(f),u(u.P+u.F*Pt,f,{set:Lt}),u(u.P+u.F*!M,f,Nt),r||P.toString==pt||(P.toString=pt),u(u.P+u.F*i((function(){new v(1).slice()})),f,{slice:Wt}),u(u.P+u.F*(i((function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()}))||!i((function(){P.toLocaleString.call([1,2])}))),f,{toLocaleString:At}),I[f]=M?E:F,r||M||p(P,vt,F)}}else t.exports=function(){}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){var r=e(29)("meta"),o=e(4),i=e(13),u=e(9).f,a=0,c=Object.isExtensible||function(){return!0},f=!e(2)((function(){return c(Object.preventExtensions({}))})),s=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!n)return"E";s(t)}return t[r].i},getWeak:function(t,n){if(!i(t,r)){if(!c(t))return!0;if(!n)return!1;s(t)}return t[r].w},onFreeze:function(t){return f&&l.NEED&&c(t)&&!i(t,r)&&s(t),t}}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=!1},function(t,n,e){var r=e(90),o=e(63);t.exports=Object.keys||function(t){return r(t,o)}},function(t,n,e){var r=e(19),o=Math.max,i=Math.min;t.exports=function(t,n){return(t=r(t))<0?o(t+n,0):i(t,n)}},function(t,n,e){var r=e(3),o=e(91),i=e(63),u=e(62)("IE_PROTO"),a=function(){},c=function(){var t,n=e(60)("iframe"),r=i.length;for(n.style.display="none",e(64).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(a.prototype=r(t),e=new a,a.prototype=null,e[u]=t):e=c(),void 0===n?e:o(e,n)}},function(t,n,e){var r=e(90),o=e(63).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,n,e){var r=e(13),o=e(10),i=e(62)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,e){var r=e(5)("unscopables"),o=Array.prototype;null==o[r]&&e(14)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(9).f,o=e(13),i=e(5)("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},function(t,n,e){var r=e(0),o=e(24),i=e(2),u=e(66),a="["+u+"]",c=RegExp("^"+a+a+"*"),f=RegExp(a+a+"*$"),s=function(t,n,e){var o={},a=i((function(){return!!u[t]()||"​"!="​"[t]()})),c=o[t]=a?n(l):u[t];e&&(o[e]=c),r(r.P+r.F*a,"String",o)},l=s.trim=function(t,n){return t=String(o(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(f,"")),t};t.exports=s},function(t,n){t.exports={}},function(t,n,e){"use strict";var r=e(1),o=e(9),i=e(8),u=e(5)("species");t.exports=function(t){var n=r[t];i&&n&&!n[u]&&o.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(11);t.exports=function(t,n,e){for(var o in n)r(t,o,n[o],e);return t}},function(t,n,e){var r=e(23);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(23),o=e(5)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?e:i?r(n):"Object"==(u=r(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,e){var r=e(3),o=e(18),i=e(5)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||null==(e=r(u)[i])?n:o(e)}},function(t,n,e){var r=e(7),o=e(1),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,n){return i[t]||(i[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(30)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(15),o=e(6),i=e(32);t.exports=function(t){return function(n,e,u){var a,c=r(n),f=o(c.length),s=i(u,f);if(t&&e!=e){for(;f>s;)if((a=c[s++])!=a)return!0}else for(;f>s;s++)if((t||s in c)&&c[s]===e)return t||s||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(23);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(5)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:e=!0}},i[r]=function(){return u},t(i)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(3);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){"use strict";var r=e(46),o=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var i=e.call(t,n);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,e){"use strict";e(108);var r=e(11),o=e(14),i=e(2),u=e(24),a=e(5),c=e(81),f=a("species"),s=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var p=a(t),h=!i((function(){var n={};return n[p]=function(){return 7},7!=""[t](n)})),v=h?!i((function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[f]=function(){return e}),e[p](""),!n})):void 0;if(!h||!v||"replace"===t&&!s||"split"===t&&!l){var d=/./[p],y=e(u,p,""[t],(function(t,n,e,r,o){return n.exec===c?h&&!o?{done:!0,value:d.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}})),g=y[0],b=y[1];r(String.prototype,t,g),o(RegExp.prototype,p,2==n?function(t,n){return b.call(t,this,n)}:function(t){return b.call(t,this)})}}},function(t,n,e){var r=e(17),o=e(103),i=e(76),u=e(3),a=e(6),c=e(78),f={},s={};(n=t.exports=function(t,n,e,l,p){var h,v,d,y,g=p?function(){return t}:c(t),b=r(e,l,n?2:1),m=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(i(g)){for(h=a(t.length);h>m;m++)if((y=n?b(u(v=t[m])[0],v[1]):b(t[m]))===f||y===s)return y}else for(d=g.call(t);!(v=d.next()).done;)if((y=o(d,b,v.value,n))===f||y===s)return y}).BREAK=f,n.RETURN=s},function(t,n,e){var r=e(1).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(1),o=e(0),i=e(11),u=e(43),a=e(27),c=e(56),f=e(42),s=e(4),l=e(2),p=e(52),h=e(38),v=e(67);t.exports=function(t,n,e,d,y,g){var b=r[t],m=b,S=y?"set":"add",w=m&&m.prototype,x={},P=function(t){var n=w[t];i(w,t,"delete"==t||"has"==t?function(t){return!(g&&!s(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!s(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof m&&(g||w.forEach&&!l((function(){(new m).entries().next()})))){var T=new m,_=T[S](g?{}:-0,1)!=T,O=l((function(){T.has(1)})),k=p((function(t){new m(t)})),E=!g&&l((function(){for(var t=new m,n=5;n--;)t[S](n,n);return!t.has(-0)}));k||((m=n((function(n,e){f(n,m,t);var r=v(new b,n,m);return null!=e&&c(e,y,r[S],r),r}))).prototype=w,w.constructor=m),(O||E)&&(P("delete"),P("has"),y&&P("get")),(E||_)&&P(S),g&&w.clear&&delete w.clear}else m=d.getConstructor(n,t,y,S),u(m.prototype,e),a.NEED=!0;return h(m,t),x[t]=m,o(o.G+o.W+o.F*(m!=b),x),g||d.setStrong(m,t,y),m}},function(t,n,e){for(var r,o=e(1),i=e(14),u=e(29),a=u("typed_array"),c=u("view"),f=!(!o.ArrayBuffer||!o.DataView),s=f,l=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=o[p[l++]])?(i(r.prototype,a,!0),i(r.prototype,c,!0)):s=!1;t.exports={ABV:f,CONSTR:s,TYPED:a,VIEW:c}},function(t,n,e){var r=e(4),o=e(1).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){n.f=e(5)},function(t,n,e){var r=e(48)("keys"),o=e(29);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(1).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(4),o=e(3),i=function(t,n){if(o(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(17)(Function.call,e(20).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return i(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:i}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(4),o=e(65).set;t.exports=function(t,n,e){var i,u=n.constructor;return u!==e&&"function"==typeof u&&(i=u.prototype)!==e.prototype&&r(i)&&o&&o(t,i),t}},function(t,n,e){"use strict";var r=e(19),o=e(24);t.exports=function(t){var n=String(o(this)),e="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(n+=n))1&i&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){var r=e(19),o=e(24);t.exports=function(t){return function(n,e){var i,u,a=String(o(n)),c=r(e),f=a.length;return c<0||c>=f?t?"":void 0:(i=a.charCodeAt(c))<55296||i>56319||c+1===f||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):i:t?a.slice(c,c+2):u-56320+(i-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(30),o=e(0),i=e(11),u=e(14),a=e(40),c=e(102),f=e(38),s=e(35),l=e(5)("iterator"),p=!([].keys&&"next"in[].keys()),h=function(){return this};t.exports=function(t,n,e,v,d,y,g){c(e,n,v);var b,m,S,w=function(t){if(!p&&t in _)return _[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},x=n+" Iterator",P="values"==d,T=!1,_=t.prototype,O=_[l]||_["@@iterator"]||d&&_[d],k=O||w(d),E=d?P?w("entries"):k:void 0,M="Array"==n&&_.entries||O;if(M&&(S=s(M.call(new t)))!==Object.prototype&&S.next&&(f(S,x,!0),r||"function"==typeof S[l]||u(S,l,h)),P&&O&&"values"!==O.name&&(T=!0,k=function(){return O.call(this)}),r&&!g||!p&&!T&&_[l]||u(_,l,k),a[n]=k,a[x]=h,d)if(b={values:P?k:w("values"),keys:y?k:w("keys"),entries:E},g)for(m in b)m in _||i(_,m,b[m]);else o(o.P+o.F*(p||T),n,b);return b}},function(t,n,e){var r=e(74),o=e(24);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(o(t))}},function(t,n,e){var r=e(4),o=e(23),i=e(5)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,e){var r=e(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(40),o=e(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,n,e){"use strict";var r=e(9),o=e(28);t.exports=function(t,n,e){n in t?r.f(t,n,o(0,e)):t[n]=e}},function(t,n,e){var r=e(46),o=e(5)("iterator"),i=e(40);t.exports=e(7).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,n,e){"use strict";var r=e(10),o=e(32),i=e(6);t.exports=function(t){for(var n=r(this),e=i(n.length),u=arguments.length,a=o(u>1?arguments[1]:void 0,e),c=u>2?arguments[2]:void 0,f=void 0===c?e:o(c,e);f>a;)n[a++]=t;return n}},function(t,n,e){"use strict";var r=e(36),o=e(107),i=e(40),u=e(15);t.exports=e(72)(Array,"Array",(function(t,n){this._t=u(t),this._i=0,this._k=n}),(function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var r,o,i=e(53),u=RegExp.prototype.exec,a=String.prototype.replace,c=u,f=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),s=void 0!==/()??/.exec("")[1];(f||s)&&(c=function(t){var n,e,r,o,c=this;return s&&(e=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),f&&(n=c.lastIndex),r=u.call(c,t),f&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),s&&r&&r.length>1&&a.call(r[0],e,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=c},function(t,n,e){"use strict";var r=e(71)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r,o,i,u=e(17),a=e(96),c=e(64),f=e(60),s=e(1),l=s.process,p=s.setImmediate,h=s.clearImmediate,v=s.MessageChannel,d=s.Dispatch,y=0,g={},b=function(){var t=+this;if(g.hasOwnProperty(t)){var n=g[t];delete g[t],n()}},m=function(t){b.call(t.data)};p&&h||(p=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return g[++y]=function(){a("function"==typeof t?t:Function(t),n)},r(y),y},h=function(t){delete g[t]},"process"==e(23)(l)?r=function(t){l.nextTick(u(b,t,1))}:d&&d.now?r=function(t){d.now(u(b,t,1))}:v?(i=(o=new v).port2,o.port1.onmessage=m,r=u(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(t){s.postMessage(t+"","*")},s.addEventListener("message",m,!1)):r="onreadystatechange"in f("script")?function(t){c.appendChild(f("script")).onreadystatechange=function(){c.removeChild(this),b.call(t)}}:function(t){setTimeout(u(b,t,1),0)}),t.exports={set:p,clear:h}},function(t,n,e){"use strict";var r=e(1),o=e(8),i=e(30),u=e(59),a=e(14),c=e(43),f=e(2),s=e(42),l=e(19),p=e(6),h=e(115),v=e(34).f,d=e(9).f,y=e(79),g=e(38),b=r.ArrayBuffer,m=r.DataView,S=r.Math,w=r.RangeError,x=r.Infinity,P=b,T=S.abs,_=S.pow,O=S.floor,k=S.log,E=S.LN2,M=o?"_b":"buffer",F=o?"_l":"byteLength",j=o?"_o":"byteOffset";function R(t,n,e){var r,o,i,u=new Array(e),a=8*e-n-1,c=(1<<a)-1,f=c>>1,s=23===n?_(2,-24)-_(2,-77):0,l=0,p=t<0||0===t&&1/t<0?1:0;for((t=T(t))!=t||t===x?(o=t!=t?1:0,r=c):(r=O(k(t)/E),t*(i=_(2,-r))<1&&(r--,i*=2),(t+=r+f>=1?s/i:s*_(2,1-f))*i>=2&&(r++,i/=2),r+f>=c?(o=0,r=c):r+f>=1?(o=(t*i-1)*_(2,n),r+=f):(o=t*_(2,f-1)*_(2,n),r=0));n>=8;u[l++]=255&o,o/=256,n-=8);for(r=r<<n|o,a+=n;a>0;u[l++]=255&r,r/=256,a-=8);return u[--l]|=128*p,u}function A(t,n,e){var r,o=8*e-n-1,i=(1<<o)-1,u=i>>1,a=o-7,c=e-1,f=t[c--],s=127&f;for(f>>=7;a>0;s=256*s+t[c],c--,a-=8);for(r=s&(1<<-a)-1,s>>=-a,a+=n;a>0;r=256*r+t[c],c--,a-=8);if(0===s)s=1-u;else{if(s===i)return r?NaN:f?-x:x;r+=_(2,n),s-=u}return(f?-1:1)*r*_(2,s-n)}function I(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function W(t){return[255&t]}function L(t){return[255&t,t>>8&255]}function N(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function C(t){return R(t,52,8)}function G(t){return R(t,23,4)}function B(t,n,e){d(t.prototype,n,{get:function(){return this[e]}})}function D(t,n,e,r){var o=h(+e);if(o+n>t[F])throw w("Wrong index!");var i=t[M]._b,u=o+t[j],a=i.slice(u,u+n);return r?a:a.reverse()}function V(t,n,e,r,o,i){var u=h(+e);if(u+n>t[F])throw w("Wrong index!");for(var a=t[M]._b,c=u+t[j],f=r(+o),s=0;s<n;s++)a[c+s]=f[i?s:n-s-1]}if(u.ABV){if(!f((function(){b(1)}))||!f((function(){new b(-1)}))||f((function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name}))){for(var z,U=(b=function(t){return s(this,b),new P(h(t))}).prototype=P.prototype,H=v(P),Z=0;H.length>Z;)(z=H[Z++])in b||a(b,z,P[z]);i||(U.constructor=b)}var Y=new m(new b(2)),J=m.prototype.setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||c(m.prototype,{setInt8:function(t,n){J.call(this,t,n<<24>>24)},setUint8:function(t,n){J.call(this,t,n<<24>>24)}},!0)}else b=function(t){s(this,b,"ArrayBuffer");var n=h(t);this._b=y.call(new Array(n),0),this[F]=n},m=function(t,n,e){s(this,m,"DataView"),s(t,b,"DataView");var r=t[F],o=l(n);if(o<0||o>r)throw w("Wrong offset!");if(o+(e=void 0===e?r-o:p(e))>r)throw w("Wrong length!");this[M]=t,this[j]=o,this[F]=e},o&&(B(b,"byteLength","_l"),B(m,"buffer","_b"),B(m,"byteLength","_l"),B(m,"byteOffset","_o")),c(m.prototype,{getInt8:function(t){return D(this,1,t)[0]<<24>>24},getUint8:function(t){return D(this,1,t)[0]},getInt16:function(t){var n=D(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=D(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return I(D(this,4,t,arguments[1]))},getUint32:function(t){return I(D(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return A(D(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return A(D(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){V(this,1,t,W,n)},setUint8:function(t,n){V(this,1,t,W,n)},setInt16:function(t,n){V(this,2,t,L,n,arguments[2])},setUint16:function(t,n){V(this,2,t,L,n,arguments[2])},setInt32:function(t,n){V(this,4,t,N,n,arguments[2])},setUint32:function(t,n){V(this,4,t,N,n,arguments[2])},setFloat32:function(t,n){V(this,4,t,G,n,arguments[2])},setFloat64:function(t,n){V(this,8,t,C,n,arguments[2])}});g(b,"ArrayBuffer"),g(m,"DataView"),a(m.prototype,u.VIEW,!0),n.ArrayBuffer=b,n.DataView=m},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){t.exports=!e(120)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,n,e){t.exports=!e(8)&&!e(2)((function(){return 7!=Object.defineProperty(e(60)("div"),"a",{get:function(){return 7}}).a}))},function(t,n,e){var r=e(1),o=e(7),i=e(30),u=e(61),a=e(9).f;t.exports=function(t){var n=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||a(n,t,{value:u.f(t)})}},function(t,n,e){var r=e(13),o=e(15),i=e(49)(!1),u=e(62)("IE_PROTO");t.exports=function(t,n){var e,a=o(t),c=0,f=[];for(e in a)e!=u&&r(a,e)&&f.push(e);for(;n.length>c;)r(a,e=n[c++])&&(~i(f,e)||f.push(e));return f}},function(t,n,e){var r=e(9),o=e(3),i=e(31);t.exports=e(8)?Object.defineProperties:function(t,n){o(t);for(var e,u=i(n),a=u.length,c=0;a>c;)r.f(t,e=u[c++],n[e]);return t}},function(t,n,e){var r=e(15),o=e(34).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,n,e){"use strict";var r=e(8),o=e(31),i=e(50),u=e(45),a=e(10),c=e(44),f=Object.assign;t.exports=!f||e(2)((function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach((function(t){n[t]=t})),7!=f({},t)[e]||Object.keys(f({},n)).join("")!=r}))?function(t,n){for(var e=a(t),f=arguments.length,s=1,l=i.f,p=u.f;f>s;)for(var h,v=c(arguments[s++]),d=l?o(v).concat(l(v)):o(v),y=d.length,g=0;y>g;)h=d[g++],r&&!p.call(v,h)||(e[h]=v[h]);return e}:f},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var r=e(18),o=e(4),i=e(96),u=[].slice,a={},c=function(t,n,e){if(!(n in a)){for(var r=[],o=0;o<n;o++)r[o]="a["+o+"]";a[n]=Function("F,a","return new F("+r.join(",")+")")}return a[n](t,e)};t.exports=Function.bind||function(t){var n=r(this),e=u.call(arguments,1),a=function(){var r=e.concat(u.call(arguments));return this instanceof a?c(n,r.length,r):i(n,r,t)};return o(n.prototype)&&(a.prototype=n.prototype),a}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(1).parseInt,o=e(39).trim,i=e(66),u=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,n){var e=o(String(t),3);return r(e,n>>>0||(u.test(e)?16:10))}:r},function(t,n,e){var r=e(1).parseFloat,o=e(39).trim;t.exports=1/r(e(66)+"-0")!=-1/0?function(t){var n=o(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(23);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(4),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){"use strict";var r=e(33),o=e(28),i=e(38),u={};e(14)(u,e(5)("iterator"),(function(){return this})),t.exports=function(t,n,e){t.prototype=r(u,{next:o(1,e)}),i(t,n+" Iterator")}},function(t,n,e){var r=e(3);t.exports=function(t,n,e,o){try{return o?n(r(e)[0],e[1]):n(e)}catch(n){var i=t.return;throw void 0!==i&&r(i.call(t)),n}}},function(t,n,e){var r=e(216);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(18),o=e(10),i=e(44),u=e(6);t.exports=function(t,n,e,a,c){r(n);var f=o(t),s=i(f),l=u(f.length),p=c?l-1:0,h=c?-1:1;if(e<2)for(;;){if(p in s){a=s[p],p+=h;break}if(p+=h,c?p<0:l<=p)throw TypeError("Reduce of empty array with no initial value")}for(;c?p>=0:l>p;p+=h)p in s&&(a=n(a,s[p],p,f));return a}},function(t,n,e){"use strict";var r=e(10),o=e(32),i=e(6);t.exports=[].copyWithin||function(t,n){var e=r(this),u=i(e.length),a=o(t,u),c=o(n,u),f=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===f?u:o(f,u))-c,u-a),l=1;for(c<a&&a<c+s&&(l=-1,c+=s-1,a+=s-1);s-- >0;)c in e?e[a]=e[c]:delete e[a],a+=l,c+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(81);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(8)&&"g"!=/./g.flags&&e(9).f(RegExp.prototype,"flags",{configurable:!0,get:e(53)})},function(t,n,e){"use strict";var r,o,i,u,a=e(30),c=e(1),f=e(17),s=e(46),l=e(0),p=e(4),h=e(18),v=e(42),d=e(56),y=e(47),g=e(83).set,b=e(236)(),m=e(111),S=e(237),w=e(57),x=e(112),P=c.TypeError,T=c.process,_=T&&T.versions,O=_&&_.v8||"",k=c.Promise,E="process"==s(T),M=function(){},F=o=m.f,j=!!function(){try{var t=k.resolve(1),n=(t.constructor={})[e(5)("species")]=function(t){t(M,M)};return(E||"function"==typeof PromiseRejectionEvent)&&t.then(M)instanceof n&&0!==O.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),R=function(t){var n;return!(!p(t)||"function"!=typeof(n=t.then))&&n},A=function(t,n){if(!t._n){t._n=!0;var e=t._c;b((function(){for(var r=t._v,o=1==t._s,i=0,u=function(n){var e,i,u,a=o?n.ok:n.fail,c=n.resolve,f=n.reject,s=n.domain;try{a?(o||(2==t._h&&L(t),t._h=1),!0===a?e=r:(s&&s.enter(),e=a(r),s&&(s.exit(),u=!0)),e===n.promise?f(P("Promise-chain cycle")):(i=R(e))?i.call(e,c,f):c(e)):f(r)}catch(t){s&&!u&&s.exit(),f(t)}};e.length>i;)u(e[i++]);t._c=[],t._n=!1,n&&!t._h&&I(t)}))}},I=function(t){g.call(c,(function(){var n,e,r,o=t._v,i=W(t);if(i&&(n=S((function(){E?T.emit("unhandledRejection",o,t):(e=c.onunhandledrejection)?e({promise:t,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)})),t._h=E||W(t)?2:1),t._a=void 0,i&&n.e)throw n.v}))},W=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){g.call(c,(function(){var n;E?T.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})}))},N=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),A(n,!0))},C=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw P("Promise can't be resolved itself");(n=R(t))?b((function(){var r={_w:e,_d:!1};try{n.call(t,f(C,r,1),f(N,r,1))}catch(t){N.call(r,t)}})):(e._v=t,e._s=1,A(e,!1))}catch(t){N.call({_w:e,_d:!1},t)}}};j||(k=function(t){v(this,k,"Promise","_h"),h(t),r.call(this);try{t(f(C,this,1),f(N,this,1))}catch(t){N.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(43)(k.prototype,{then:function(t,n){var e=F(y(this,k));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=E?T.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&A(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=f(C,t,1),this.reject=f(N,t,1)},m.f=F=function(t){return t===k||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!j,{Promise:k}),e(38)(k,"Promise"),e(41)("Promise"),u=e(7).Promise,l(l.S+l.F*!j,"Promise",{reject:function(t){var n=F(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(a||!j),"Promise",{resolve:function(t){return x(a&&this===u?k:this,t)}}),l(l.S+l.F*!(j&&e(52)((function(t){k.all(t).catch(M)}))),"Promise",{all:function(t){var n=this,e=F(n),r=e.resolve,o=e.reject,i=S((function(){var e=[],i=0,u=1;d(t,!1,(function(t){var a=i++,c=!1;e.push(void 0),u++,n.resolve(t).then((function(t){c||(c=!0,e[a]=t,--u||r(e))}),o)})),--u||r(e)}));return i.e&&o(i.v),e.promise},race:function(t){var n=this,e=F(n),r=e.reject,o=S((function(){d(t,!1,(function(t){n.resolve(t).then(e.resolve,r)}))}));return o.e&&r(o.v),e.promise}})},function(t,n,e){"use strict";var r=e(18);function o(t){var n,e;this.promise=new t((function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r})),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new o(t)}},function(t,n,e){var r=e(3),o=e(4),i=e(111);t.exports=function(t,n){if(r(t),o(n)&&n.constructor===t)return n;var e=i.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(9).f,o=e(33),i=e(43),u=e(17),a=e(42),c=e(56),f=e(72),s=e(107),l=e(41),p=e(8),h=e(27).fastKey,v=e(37),d=p?"_s":"size",y=function(t,n){var e,r=h(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,f){var s=t((function(t,r){a(t,s,n,"_i"),t._t=n,t._i=o(null),t._f=void 0,t._l=void 0,t[d]=0,null!=r&&c(r,e,t[f],t)}));return i(s.prototype,{clear:function(){for(var t=v(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var e=v(this,n),r=y(e,t);if(r){var o=r.n,i=r.p;delete e._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),e._f==r&&(e._f=o),e._l==r&&(e._l=i),e[d]--}return!!r},forEach:function(t){v(this,n);for(var e,r=u(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!y(v(this,n),t)}}),p&&r(s.prototype,"size",{get:function(){return v(this,n)[d]}}),s},def:function(t,n,e){var r,o,i=y(t,n);return i?i.v=e:(t._l=i={i:o=h(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[d]++,"F"!==o&&(t._i[o]=i)),t},getEntry:y,setStrong:function(t,n,e){f(t,n,(function(t,e){this._t=v(t,n),this._k=e,this._l=void 0}),(function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?s(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,s(1))}),e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(43),o=e(27).getWeak,i=e(3),u=e(4),a=e(42),c=e(56),f=e(22),s=e(13),l=e(37),p=f(5),h=f(6),v=0,d=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,n){return p(t.a,(function(t){return t[0]===n}))};y.prototype={get:function(t){var n=g(this,t);if(n)return n[1]},has:function(t){return!!g(this,t)},set:function(t,n){var e=g(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=h(this.a,(function(n){return n[0]===t}));return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,i){var f=t((function(t,r){a(t,f,n,"_i"),t._t=n,t._i=v++,t._l=void 0,null!=r&&c(r,e,t[i],t)}));return r(f.prototype,{delete:function(t){if(!u(t))return!1;var e=o(t);return!0===e?d(l(this,n)).delete(t):e&&s(e,this._i)&&delete e[this._i]},has:function(t){if(!u(t))return!1;var e=o(t);return!0===e?d(l(this,n)).has(t):e&&s(e,this._i)}}),f},def:function(t,n,e){var r=o(i(n),!0);return!0===r?d(t).set(n,e):r[t._i]=e,t},ufstore:d}},function(t,n,e){var r=e(19),o=e(6);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=o(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(34),o=e(50),i=e(3),u=e(1).Reflect;t.exports=u&&u.ownKeys||function(t){var n=r.f(i(t)),e=o.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(6),o=e(68),i=e(24);t.exports=function(t,n,e,u){var a=String(i(t)),c=a.length,f=void 0===e?" ":String(e),s=r(n);if(s<=c||""==f)return a;var l=s-c,p=o.call(f,Math.ceil(l/f.length));return p.length>l&&(p=p.slice(0,l)),u?p+a:a+p}},function(t,n,e){var r=e(8),o=e(31),i=e(15),u=e(45).f;t.exports=function(t){return function(n){for(var e,a=i(n),c=o(a),f=c.length,s=0,l=[];f>s;)e=c[s++],r&&!u.call(a,e)||l.push(t?[e,a[e]]:a[e]);return l}}},function(t,n){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){e(122),t.exports=e(308)},function(t,n,e){"use strict";e(123);var r,o=(r=e(295))&&r.__esModule?r:{default:r};o.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),o.default._babelPolyfill=!0},function(t,n,e){"use strict";e(124),e(267),e(269),e(272),e(274),e(276),e(278),e(280),e(282),e(284),e(286),e(288),e(290),e(294)},function(t,n,e){e(125),e(128),e(129),e(130),e(131),e(132),e(133),e(134),e(135),e(136),e(137),e(138),e(139),e(140),e(141),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(206),e(207),e(209),e(210),e(211),e(212),e(213),e(214),e(215),e(217),e(218),e(219),e(220),e(221),e(222),e(223),e(224),e(225),e(226),e(227),e(228),e(229),e(80),e(230),e(108),e(231),e(109),e(232),e(233),e(234),e(235),e(110),e(238),e(239),e(240),e(241),e(242),e(243),e(244),e(245),e(246),e(247),e(248),e(249),e(250),e(251),e(252),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),t.exports=e(7)},function(t,n,e){"use strict";var r=e(1),o=e(13),i=e(8),u=e(0),a=e(11),c=e(27).KEY,f=e(2),s=e(48),l=e(38),p=e(29),h=e(5),v=e(61),d=e(89),y=e(127),g=e(51),b=e(3),m=e(4),S=e(10),w=e(15),x=e(26),P=e(28),T=e(33),_=e(92),O=e(20),k=e(50),E=e(9),M=e(31),F=O.f,j=E.f,R=_.f,A=r.Symbol,I=r.JSON,W=I&&I.stringify,L=h("_hidden"),N=h("toPrimitive"),C={}.propertyIsEnumerable,G=s("symbol-registry"),B=s("symbols"),D=s("op-symbols"),V=Object.prototype,z="function"==typeof A&&!!k.f,U=r.QObject,H=!U||!U.prototype||!U.prototype.findChild,Z=i&&f((function(){return 7!=T(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a}))?function(t,n,e){var r=F(V,n);r&&delete V[n],j(t,n,e),r&&t!==V&&j(V,n,r)}:j,Y=function(t){var n=B[t]=T(A.prototype);return n._k=t,n},J=z&&"symbol"==typeof A.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof A},q=function(t,n,e){return t===V&&q(D,n,e),b(t),n=x(n,!0),b(e),o(B,n)?(e.enumerable?(o(t,L)&&t[L][n]&&(t[L][n]=!1),e=T(e,{enumerable:P(0,!1)})):(o(t,L)||j(t,L,P(1,{})),t[L][n]=!0),Z(t,n,e)):j(t,n,e)},K=function(t,n){b(t);for(var e,r=y(n=w(n)),o=0,i=r.length;i>o;)q(t,e=r[o++],n[e]);return t},$=function(t){var n=C.call(this,t=x(t,!0));return!(this===V&&o(B,t)&&!o(D,t))&&(!(n||!o(this,t)||!o(B,t)||o(this,L)&&this[L][t])||n)},X=function(t,n){if(t=w(t),n=x(n,!0),t!==V||!o(B,n)||o(D,n)){var e=F(t,n);return!e||!o(B,n)||o(t,L)&&t[L][n]||(e.enumerable=!0),e}},Q=function(t){for(var n,e=R(w(t)),r=[],i=0;e.length>i;)o(B,n=e[i++])||n==L||n==c||r.push(n);return r},tt=function(t){for(var n,e=t===V,r=R(e?D:w(t)),i=[],u=0;r.length>u;)!o(B,n=r[u++])||e&&!o(V,n)||i.push(B[n]);return i};z||(a((A=function(){if(this instanceof A)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),n=function(e){this===V&&n.call(D,e),o(this,L)&&o(this[L],t)&&(this[L][t]=!1),Z(this,t,P(1,e))};return i&&H&&Z(V,t,{configurable:!0,set:n}),Y(t)}).prototype,"toString",(function(){return this._k})),O.f=X,E.f=q,e(34).f=_.f=Q,e(45).f=$,k.f=tt,i&&!e(30)&&a(V,"propertyIsEnumerable",$,!0),v.f=function(t){return Y(h(t))}),u(u.G+u.W+u.F*!z,{Symbol:A});for(var nt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),et=0;nt.length>et;)h(nt[et++]);for(var rt=M(h.store),ot=0;rt.length>ot;)d(rt[ot++]);u(u.S+u.F*!z,"Symbol",{for:function(t){return o(G,t+="")?G[t]:G[t]=A(t)},keyFor:function(t){if(!J(t))throw TypeError(t+" is not a symbol!");for(var n in G)if(G[n]===t)return n},useSetter:function(){H=!0},useSimple:function(){H=!1}}),u(u.S+u.F*!z,"Object",{create:function(t,n){return void 0===n?T(t):K(T(t),n)},defineProperty:q,defineProperties:K,getOwnPropertyDescriptor:X,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var it=f((function(){k.f(1)}));u(u.S+u.F*it,"Object",{getOwnPropertySymbols:function(t){return k.f(S(t))}}),I&&u(u.S+u.F*(!z||f((function(){var t=A();return"[null]"!=W([t])||"{}"!=W({a:t})||"{}"!=W(Object(t))}))),"JSON",{stringify:function(t){for(var n,e,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(e=n=r[1],(m(n)||void 0!==t)&&!J(t))return g(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!J(n))return n}),r[1]=n,W.apply(I,r)}}),A.prototype[N]||e(14)(A.prototype,N,A.prototype.valueOf),l(A,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){t.exports=e(48)("native-function-to-string",Function.toString)},function(t,n,e){var r=e(31),o=e(50),i=e(45);t.exports=function(t){var n=r(t),e=o.f;if(e)for(var u,a=e(t),c=i.f,f=0;a.length>f;)c.call(t,u=a[f++])&&n.push(u);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(33)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(8),"Object",{defineProperty:e(9).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(8),"Object",{defineProperties:e(91)})},function(t,n,e){var r=e(15),o=e(20).f;e(21)("getOwnPropertyDescriptor",(function(){return function(t,n){return o(r(t),n)}}))},function(t,n,e){var r=e(10),o=e(35);e(21)("getPrototypeOf",(function(){return function(t){return o(r(t))}}))},function(t,n,e){var r=e(10),o=e(31);e(21)("keys",(function(){return function(t){return o(r(t))}}))},function(t,n,e){e(21)("getOwnPropertyNames",(function(){return e(92).f}))},function(t,n,e){var r=e(4),o=e(27).onFreeze;e(21)("freeze",(function(t){return function(n){return t&&r(n)?t(o(n)):n}}))},function(t,n,e){var r=e(4),o=e(27).onFreeze;e(21)("seal",(function(t){return function(n){return t&&r(n)?t(o(n)):n}}))},function(t,n,e){var r=e(4),o=e(27).onFreeze;e(21)("preventExtensions",(function(t){return function(n){return t&&r(n)?t(o(n)):n}}))},function(t,n,e){var r=e(4);e(21)("isFrozen",(function(t){return function(n){return!r(n)||!!t&&t(n)}}))},function(t,n,e){var r=e(4);e(21)("isSealed",(function(t){return function(n){return!r(n)||!!t&&t(n)}}))},function(t,n,e){var r=e(4);e(21)("isExtensible",(function(t){return function(n){return!!r(n)&&(!t||t(n))}}))},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(93)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(94)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(65).set})},function(t,n,e){"use strict";var r=e(46),o={};o[e(5)("toStringTag")]="z",o+""!="[object z]"&&e(11)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(95)})},function(t,n,e){var r=e(9).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e(8)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(4),o=e(35),i=e(5)("hasInstance"),u=Function.prototype;i in u||e(9).f(u,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),o=e(97);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,n,e){var r=e(0),o=e(98);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,n,e){"use strict";var r=e(1),o=e(13),i=e(23),u=e(67),a=e(26),c=e(2),f=e(34).f,s=e(20).f,l=e(9).f,p=e(39).trim,h=r.Number,v=h,d=h.prototype,y="Number"==i(e(33)(d)),g="trim"in String.prototype,b=function(t){var n=a(t,!1);if("string"==typeof n&&n.length>2){var e,r,o,i=(n=g?n.trim():p(n,3)).charCodeAt(0);if(43===i||45===i){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===i){switch(n.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+n}for(var u,c=n.slice(2),f=0,s=c.length;f<s;f++)if((u=c.charCodeAt(f))<48||u>o)return NaN;return parseInt(c,r)}}return+n};if(!h(" 0o1")||!h("0b1")||h("+0x1")){h=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof h&&(y?c((function(){d.valueOf.call(e)})):"Number"!=i(e))?u(new v(b(n)),e,h):b(n)};for(var m,S=e(8)?f(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;S.length>w;w++)o(v,m=S[w])&&!o(h,m)&&l(h,m,s(v,m));h.prototype=d,d.constructor=h,e(11)(r,"Number",h)}},function(t,n,e){"use strict";var r=e(0),o=e(19),i=e(99),u=e(68),a=1..toFixed,c=Math.floor,f=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*f[e],f[e]=r%1e7,r=c(r/1e7)},p=function(t){for(var n=6,e=0;--n>=0;)e+=f[n],f[n]=c(e/t),e=e%t*1e7},h=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==f[t]){var e=String(f[t]);n=""===n?e:n+u.call("0",7-e.length)+e}return n},v=function(t,n,e){return 0===n?e:n%2==1?v(t,n-1,e*t):v(t*t,n/2,e)};r(r.P+r.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(2)((function(){a.call({})}))),"Number",{toFixed:function(t){var n,e,r,a,c=i(this,s),f=o(t),d="",y="0";if(f<0||f>20)throw RangeError(s);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(d="-",c=-c),c>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(c*v(2,69,1))-69)<0?c*v(2,-n,1):c/v(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=f;r>=7;)l(1e7,0),r-=7;for(l(v(10,r,1),0),r=n-1;r>=23;)p(1<<23),r-=23;p(1<<r),l(1,1),p(2),y=h()}else l(0,e),l(1<<-n,0),y=h()+u.call("0",f);return y=f>0?d+((a=y.length)<=f?"0."+u.call("0",f-a)+y:y.slice(0,a-f)+"."+y.slice(a-f)):d+y}})},function(t,n,e){"use strict";var r=e(0),o=e(2),i=e(99),u=1..toPrecision;r(r.P+r.F*(o((function(){return"1"!==u.call(1,void 0)}))||!o((function(){u.call({})}))),"Number",{toPrecision:function(t){var n=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),o=e(1).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(100)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),o=e(100),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),o=e(98);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,n,e){var r=e(0),o=e(97);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,n,e){var r=e(0),o=e(101),i=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,n,e){var r=e(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),o=e(69);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,n,e){var r=e(0),o=e(70);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(170)})},function(t,n,e){var r=e(69),o=Math.pow,i=o(2,-52),u=o(2,-23),a=o(2,127)*(2-u),c=o(2,-126);t.exports=Math.fround||function(t){var n,e,o=Math.abs(t),f=r(t);return o<c?f*(o/c/u+1/i-1/i)*c*u:(e=(n=(1+u/i)*o)-(n-o))>a||e!=e?f*(1/0):f*e}},function(t,n,e){var r=e(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,i=0,u=0,a=arguments.length,c=0;u<a;)c<(e=o(arguments[u++]))?(i=i*(r=c/e)*r+1,c=e):i+=e>0?(r=e/c)*r:e;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,n,e){var r=e(0),o=Math.imul;r(r.S+r.F*e(2)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r;return 0|o*i+((65535&e>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(101)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(69)})},function(t,n,e){var r=e(0),o=e(70),i=Math.exp;r(r.S+r.F*e(2)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),o=e(70),i=Math.exp;r(r.S,"Math",{tanh:function(t){var n=o(t=+t),e=o(-t);return n==1/0?1:e==1/0?-1:(n-e)/(i(t)+i(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),o=e(32),i=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,u=0;r>u;){if(n=+arguments[u++],o(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?i(n):i(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),o=e(15),i=e(6);r(r.S,"String",{raw:function(t){for(var n=o(t.raw),e=i(n.length),r=arguments.length,u=[],a=0;e>a;)u.push(String(n[a++])),a<r&&u.push(String(arguments[a]));return u.join("")}})},function(t,n,e){"use strict";e(39)("trim",(function(t){return function(){return t(this,3)}}))},function(t,n,e){"use strict";var r=e(71)(!0);e(72)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})}))},function(t,n,e){"use strict";var r=e(0),o=e(71)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,n,e){"use strict";var r=e(0),o=e(6),i=e(73),u="".endsWith;r(r.P+r.F*e(75)("endsWith"),"String",{endsWith:function(t){var n=i(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=o(n.length),a=void 0===e?r:Math.min(o(e),r),c=String(t);return u?u.call(n,c,a):n.slice(a-c.length,a)===c}})},function(t,n,e){"use strict";var r=e(0),o=e(73);r(r.P+r.F*e(75)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(68)})},function(t,n,e){"use strict";var r=e(0),o=e(6),i=e(73),u="".startsWith;r(r.P+r.F*e(75)("startsWith"),"String",{startsWith:function(t){var n=i(this,t,"startsWith"),e=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return u?u.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(12)("anchor",(function(t){return function(n){return t(this,"a","name",n)}}))},function(t,n,e){"use strict";e(12)("big",(function(t){return function(){return t(this,"big","","")}}))},function(t,n,e){"use strict";e(12)("blink",(function(t){return function(){return t(this,"blink","","")}}))},function(t,n,e){"use strict";e(12)("bold",(function(t){return function(){return t(this,"b","","")}}))},function(t,n,e){"use strict";e(12)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},function(t,n,e){"use strict";e(12)("fontcolor",(function(t){return function(n){return t(this,"font","color",n)}}))},function(t,n,e){"use strict";e(12)("fontsize",(function(t){return function(n){return t(this,"font","size",n)}}))},function(t,n,e){"use strict";e(12)("italics",(function(t){return function(){return t(this,"i","","")}}))},function(t,n,e){"use strict";e(12)("link",(function(t){return function(n){return t(this,"a","href",n)}}))},function(t,n,e){"use strict";e(12)("small",(function(t){return function(){return t(this,"small","","")}}))},function(t,n,e){"use strict";e(12)("strike",(function(t){return function(){return t(this,"strike","","")}}))},function(t,n,e){"use strict";e(12)("sub",(function(t){return function(){return t(this,"sub","","")}}))},function(t,n,e){"use strict";e(12)("sup",(function(t){return function(){return t(this,"sup","","")}}))},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),o=e(10),i=e(26);r(r.P+r.F*e(2)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var n=o(this),e=i(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),o=e(205);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,n,e){"use strict";var r=e(2),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-50000000000001))}))||!r((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(e>99?e:"0"+u(e))+"Z"}:i},function(t,n,e){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(11)(r,"toString",(function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"}))},function(t,n,e){var r=e(5)("toPrimitive"),o=Date.prototype;r in o||e(14)(o,r,e(208))},function(t,n,e){"use strict";var r=e(3),o=e(26);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(51)})},function(t,n,e){"use strict";var r=e(17),o=e(0),i=e(10),u=e(103),a=e(76),c=e(6),f=e(77),s=e(78);o(o.S+o.F*!e(52)((function(t){Array.from(t)})),"Array",{from:function(t){var n,e,o,l,p=i(t),h="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,y=void 0!==d,g=0,b=s(p);if(y&&(d=r(d,v>2?arguments[2]:void 0,2)),null==b||h==Array&&a(b))for(e=new h(n=c(p.length));n>g;g++)f(e,g,y?d(p[g],g):p[g]);else for(l=b.call(p),e=new h;!(o=l.next()).done;g++)f(e,g,y?u(l,d,[o.value,g],!0):o.value);return e.length=g,e}})},function(t,n,e){"use strict";var r=e(0),o=e(77);r(r.S+r.F*e(2)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)o(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),o=e(15),i=[].join;r(r.P+r.F*(e(44)!=Object||!e(16)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),o=e(64),i=e(23),u=e(32),a=e(6),c=[].slice;r(r.P+r.F*e(2)((function(){o&&c.call(o)})),"Array",{slice:function(t,n){var e=a(this.length),r=i(this);if(n=void 0===n?e:n,"Array"==r)return c.call(this,t,n);for(var o=u(t,e),f=u(n,e),s=a(f-o),l=new Array(s),p=0;p<s;p++)l[p]="String"==r?this.charAt(o+p):this[o+p];return l}})},function(t,n,e){"use strict";var r=e(0),o=e(18),i=e(10),u=e(2),a=[].sort,c=[1,2,3];r(r.P+r.F*(u((function(){c.sort(void 0)}))||!u((function(){c.sort(null)}))||!e(16)(a)),"Array",{sort:function(t){return void 0===t?a.call(i(this)):a.call(i(this),o(t))}})},function(t,n,e){"use strict";var r=e(0),o=e(22)(0),i=e(16)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,n,e){var r=e(4),o=e(51),i=e(5)("species");t.exports=function(t){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)||(n=void 0),r(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),o=e(22)(1);r(r.P+r.F*!e(16)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(22)(2);r(r.P+r.F*!e(16)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(22)(3);r(r.P+r.F*!e(16)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(22)(4);r(r.P+r.F*!e(16)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(105);r(r.P+r.F*!e(16)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),o=e(105);r(r.P+r.F*!e(16)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),o=e(49)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!e(16)(i)),"Array",{indexOf:function(t){return u?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(15),i=e(19),u=e(6),a=[].lastIndexOf,c=!!a&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!e(16)(a)),"Array",{lastIndexOf:function(t){if(c)return a.apply(this,arguments)||0;var n=o(this),e=u(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(106)}),e(36)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(79)}),e(36)("fill")},function(t,n,e){"use strict";var r=e(0),o=e(22)(5),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(36)("find")},function(t,n,e){"use strict";var r=e(0),o=e(22)(6),i="findIndex",u=!0;i in[]&&Array(1)[i]((function(){u=!1})),r(r.P+r.F*u,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(36)(i)},function(t,n,e){e(41)("Array")},function(t,n,e){var r=e(1),o=e(67),i=e(9).f,u=e(34).f,a=e(74),c=e(53),f=r.RegExp,s=f,l=f.prototype,p=/a/g,h=/a/g,v=new f(p)!==p;if(e(8)&&(!v||e(2)((function(){return h[e(5)("match")]=!1,f(p)!=p||f(h)==h||"/a/i"!=f(p,"i")})))){f=function(t,n){var e=this instanceof f,r=a(t),i=void 0===n;return!e&&r&&t.constructor===f&&i?t:o(v?new s(r&&!i?t.source:t,n):s((r=t instanceof f)?t.source:t,r&&i?c.call(t):n),e?this:l,f)};for(var d=function(t){t in f||i(f,t,{configurable:!0,get:function(){return s[t]},set:function(n){s[t]=n}})},y=u(s),g=0;y.length>g;)d(y[g++]);l.constructor=f,f.prototype=l,e(11)(r,"RegExp",f)}e(41)("RegExp")},function(t,n,e){"use strict";e(109);var r=e(3),o=e(53),i=e(8),u=/./.toString,a=function(t){e(11)(RegExp.prototype,"toString",t,!0)};e(2)((function(){return"/a/b"!=u.call({source:"a",flags:"b"})}))?a((function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)})):"toString"!=u.name&&a((function(){return u.call(this)}))},function(t,n,e){"use strict";var r=e(3),o=e(6),i=e(82),u=e(54);e(55)("match",1,(function(t,n,e,a){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=a(e,t,this);if(n.done)return n.value;var c=r(t),f=String(this);if(!c.global)return u(c,f);var s=c.unicode;c.lastIndex=0;for(var l,p=[],h=0;null!==(l=u(c,f));){var v=String(l[0]);p[h]=v,""===v&&(c.lastIndex=i(f,o(c.lastIndex),s)),h++}return 0===h?null:p}]}))},function(t,n,e){"use strict";var r=e(3),o=e(10),i=e(6),u=e(19),a=e(82),c=e(54),f=Math.max,s=Math.min,l=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,h=/\$([$&`']|\d\d?)/g;e(55)("replace",2,(function(t,n,e,v){return[function(r,o){var i=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,i,o):e.call(String(i),r,o)},function(t,n){var o=v(e,t,this,n);if(o.done)return o.value;var l=r(t),p=String(this),h="function"==typeof n;h||(n=String(n));var y=l.global;if(y){var g=l.unicode;l.lastIndex=0}for(var b=[];;){var m=c(l,p);if(null===m)break;if(b.push(m),!y)break;""===String(m[0])&&(l.lastIndex=a(p,i(l.lastIndex),g))}for(var S,w="",x=0,P=0;P<b.length;P++){m=b[P];for(var T=String(m[0]),_=f(s(u(m.index),p.length),0),O=[],k=1;k<m.length;k++)O.push(void 0===(S=m[k])?S:String(S));var E=m.groups;if(h){var M=[T].concat(O,_,p);void 0!==E&&M.push(E);var F=String(n.apply(void 0,M))}else F=d(T,p,_,O,E,n);_>=x&&(w+=p.slice(x,_)+F,x=_+T.length)}return w+p.slice(x)}];function d(t,n,r,i,u,a){var c=r+t.length,f=i.length,s=h;return void 0!==u&&(u=o(u),s=p),e.call(a,s,(function(e,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":a=u[o.slice(1,-1)];break;default:var s=+o;if(0===s)return e;if(s>f){var p=l(s/10);return 0===p?e:p<=f?void 0===i[p-1]?o.charAt(1):i[p-1]+o.charAt(1):e}a=i[s-1]}return void 0===a?"":a}))}}))},function(t,n,e){"use strict";var r=e(3),o=e(94),i=e(54);e(55)("search",1,(function(t,n,e,u){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=u(e,t,this);if(n.done)return n.value;var a=r(t),c=String(this),f=a.lastIndex;o(f,0)||(a.lastIndex=0);var s=i(a,c);return o(a.lastIndex,f)||(a.lastIndex=f),null===s?-1:s.index}]}))},function(t,n,e){"use strict";var r=e(74),o=e(3),i=e(47),u=e(82),a=e(6),c=e(54),f=e(81),s=e(2),l=Math.min,p=[].push,h="length",v=!s((function(){RegExp(4294967295,"y")}));e(55)("split",2,(function(t,n,e,s){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[h]||2!="ab".split(/(?:ab)*/)[h]||4!=".".split(/(.?)(.?)/)[h]||".".split(/()()/)[h]>1||"".split(/.?/)[h]?function(t,n){var o=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(o,t,n);for(var i,u,a,c=[],s=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,v=void 0===n?4294967295:n>>>0,d=new RegExp(t.source,s+"g");(i=f.call(d,o))&&!((u=d.lastIndex)>l&&(c.push(o.slice(l,i.index)),i[h]>1&&i.index<o[h]&&p.apply(c,i.slice(1)),a=i[0][h],l=u,c[h]>=v));)d.lastIndex===i.index&&d.lastIndex++;return l===o[h]?!a&&d.test("")||c.push(""):c.push(o.slice(l)),c[h]>v?c.slice(0,v):c}:"0".split(void 0,0)[h]?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var o=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,o,r):d.call(String(o),e,r)},function(t,n){var r=s(d,t,this,n,d!==e);if(r.done)return r.value;var f=o(t),p=String(this),h=i(f,RegExp),y=f.unicode,g=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(v?"y":"g"),b=new h(v?f:"^(?:"+f.source+")",g),m=void 0===n?4294967295:n>>>0;if(0===m)return[];if(0===p.length)return null===c(b,p)?[p]:[];for(var S=0,w=0,x=[];w<p.length;){b.lastIndex=v?w:0;var P,T=c(b,v?p:p.slice(w));if(null===T||(P=l(a(b.lastIndex+(v?0:w)),p.length))===S)w=u(p,w,y);else{if(x.push(p.slice(S,w)),x.length===m)return x;for(var _=1;_<=T.length-1;_++)if(x.push(T[_]),x.length===m)return x;w=S=P}}return x.push(p.slice(S)),x}]}))},function(t,n,e){var r=e(1),o=e(83).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,c="process"==e(23)(u);t.exports=function(){var t,n,e,f=function(){var r,o;for(c&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){u.nextTick(f)};else if(!i||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var s=a.resolve(void 0);e=function(){s.then(f)}}else e=function(){o.call(r,f)};else{var l=!0,p=document.createTextNode("");new i(f).observe(p,{characterData:!0}),e=function(){p.data=l=!l}}return function(r){var o={fn:r,next:void 0};n&&(n.next=o),t||(t=o,e()),n=o}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){"use strict";var r=e(113),o=e(37);t.exports=e(58)("Map",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var n=r.getEntry(o(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(o(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(113),o=e(37);t.exports=e(58)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,o=e(1),i=e(22)(0),u=e(11),a=e(27),c=e(93),f=e(114),s=e(4),l=e(37),p=e(37),h=!o.ActiveXObject&&"ActiveXObject"in o,v=a.getWeak,d=Object.isExtensible,y=f.ufstore,g=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},b={get:function(t){if(s(t)){var n=v(t);return!0===n?y(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return f.def(l(this,"WeakMap"),t,n)}},m=t.exports=e(58)("WeakMap",g,b,f,!0,!0);p&&h&&(c((r=f.getConstructor(g,"WeakMap")).prototype,b),a.NEED=!0,i(["delete","has","get","set"],(function(t){var n=m.prototype,e=n[t];u(n,t,(function(n,o){if(s(n)&&!d(n)){this._f||(this._f=new r);var i=this._f[t](n,o);return"set"==t?this:i}return e.call(this,n,o)}))})))},function(t,n,e){"use strict";var r=e(114),o=e(37);e(58)("WeakSet",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),o=e(59),i=e(84),u=e(3),a=e(32),c=e(6),f=e(4),s=e(1).ArrayBuffer,l=e(47),p=i.ArrayBuffer,h=i.DataView,v=o.ABV&&s.isView,d=p.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(s!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||f(t)&&y in t}}),r(r.P+r.U+r.F*e(2)((function(){return!new p(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(t,n){if(void 0!==d&&void 0===n)return d.call(u(this),t);for(var e=u(this).byteLength,r=a(t,e),o=a(void 0===n?e:n,e),i=new(l(this,p))(c(o-r)),f=new h(this),s=new h(i),v=0;r<o;)s.setUint8(v++,f.getUint8(r++));return i}}),e(41)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(59).ABV,{DataView:e(84).DataView})},function(t,n,e){e(25)("Int8",1,(function(t){return function(n,e,r){return t(this,n,e,r)}}))},function(t,n,e){e(25)("Uint8",1,(function(t){return function(n,e,r){return t(this,n,e,r)}}))},function(t,n,e){e(25)("Uint8",1,(function(t){return function(n,e,r){return t(this,n,e,r)}}),!0)},function(t,n,e){e(25)("Int16",2,(function(t){return function(n,e,r){return t(this,n,e,r)}}))},function(t,n,e){e(25)("Uint16",2,(function(t){return function(n,e,r){return t(this,n,e,r)}}))},function(t,n,e){e(25)("Int32",4,(function(t){return function(n,e,r){return t(this,n,e,r)}}))},function(t,n,e){e(25)("Uint32",4,(function(t){return function(n,e,r){return t(this,n,e,r)}}))},function(t,n,e){e(25)("Float32",4,(function(t){return function(n,e,r){return t(this,n,e,r)}}))},function(t,n,e){e(25)("Float64",8,(function(t){return function(n,e,r){return t(this,n,e,r)}}))},function(t,n,e){var r=e(0),o=e(18),i=e(3),u=(e(1).Reflect||{}).apply,a=Function.apply;r(r.S+r.F*!e(2)((function(){u((function(){}))})),"Reflect",{apply:function(t,n,e){var r=o(t),c=i(e);return u?u(r,n,c):a.call(r,n,c)}})},function(t,n,e){var r=e(0),o=e(33),i=e(18),u=e(3),a=e(4),c=e(2),f=e(95),s=(e(1).Reflect||{}).construct,l=c((function(){function t(){}return!(s((function(){}),[],t)instanceof t)})),p=!c((function(){s((function(){}))}));r(r.S+r.F*(l||p),"Reflect",{construct:function(t,n){i(t),u(n);var e=arguments.length<3?t:i(arguments[2]);if(p&&!l)return s(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(f.apply(t,r))}var c=e.prototype,h=o(a(c)?c:Object.prototype),v=Function.apply.call(t,h,n);return a(v)?v:h}})},function(t,n,e){var r=e(9),o=e(0),i=e(3),u=e(26);o(o.S+o.F*e(2)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,n,e){i(t),n=u(n,!0),i(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),o=e(20).f,i=e(3);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=o(i(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),o=e(3),i=function(t){this._t=o(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(102)(i,"Object",(function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}})),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,n,e){var r=e(20),o=e(35),i=e(13),u=e(0),a=e(4),c=e(3);u(u.S,"Reflect",{get:function t(n,e){var u,f,s=arguments.length<3?n:arguments[2];return c(n)===s?n[e]:(u=r.f(n,e))?i(u,"value")?u.value:void 0!==u.get?u.get.call(s):void 0:a(f=o(n))?t(f,e,s):void 0}})},function(t,n,e){var r=e(20),o=e(0),i=e(3);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(i(t),n)}})},function(t,n,e){var r=e(0),o=e(35),i=e(3);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),o=e(3),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(116)})},function(t,n,e){var r=e(0),o=e(3),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(9),o=e(20),i=e(35),u=e(13),a=e(0),c=e(28),f=e(3),s=e(4);a(a.S,"Reflect",{set:function t(n,e,a){var l,p,h=arguments.length<4?n:arguments[3],v=o.f(f(n),e);if(!v){if(s(p=i(n)))return t(p,e,a,h);v=c(0)}if(u(v,"value")){if(!1===v.writable||!s(h))return!1;if(l=o.f(h,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=a,r.f(h,e,l)}else r.f(h,e,c(0,a));return!0}return void 0!==v.set&&(v.set.call(h,a),!0)}})},function(t,n,e){var r=e(0),o=e(65);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){o.check(t,n);try{return o.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){e(268),t.exports=e(7).Array.includes},function(t,n,e){"use strict";var r=e(0),o=e(49)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(36)("includes")},function(t,n,e){e(270),t.exports=e(7).Array.flatMap},function(t,n,e){"use strict";var r=e(0),o=e(271),i=e(10),u=e(6),a=e(18),c=e(104);r(r.P,"Array",{flatMap:function(t){var n,e,r=i(this);return a(t),n=u(r.length),e=c(r,0),o(e,r,r,n,0,1,t,arguments[1]),e}}),e(36)("flatMap")},function(t,n,e){"use strict";var r=e(51),o=e(4),i=e(6),u=e(17),a=e(5)("isConcatSpreadable");t.exports=function t(n,e,c,f,s,l,p,h){for(var v,d,y=s,g=0,b=!!p&&u(p,h,3);g<f;){if(g in c){if(v=b?b(c[g],g,e):c[g],d=!1,o(v)&&(d=void 0!==(d=v[a])?!!d:r(v)),d&&l>0)y=t(n,e,v,i(v.length),y,l-1)-1;else{if(y>=9007199254740991)throw TypeError();n[y]=v}y++}g++}return y}},function(t,n,e){e(273),t.exports=e(7).String.padStart},function(t,n,e){"use strict";var r=e(0),o=e(117),i=e(57),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){e(275),t.exports=e(7).String.padEnd},function(t,n,e){"use strict";var r=e(0),o=e(117),i=e(57),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){e(277),t.exports=e(7).String.trimLeft},function(t,n,e){"use strict";e(39)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},function(t,n,e){e(279),t.exports=e(7).String.trimRight},function(t,n,e){"use strict";e(39)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},function(t,n,e){e(281),t.exports=e(61).f("asyncIterator")},function(t,n,e){e(89)("asyncIterator")},function(t,n,e){e(283),t.exports=e(7).Object.getOwnPropertyDescriptors},function(t,n,e){var r=e(0),o=e(116),i=e(15),u=e(20),a=e(77);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=i(t),c=u.f,f=o(r),s={},l=0;f.length>l;)void 0!==(e=c(r,n=f[l++]))&&a(s,n,e);return s}})},function(t,n,e){e(285),t.exports=e(7).Object.values},function(t,n,e){var r=e(0),o=e(118)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,n,e){e(287),t.exports=e(7).Object.entries},function(t,n,e){var r=e(0),o=e(118)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,n,e){"use strict";e(110),e(289),t.exports=e(7).Promise.finally},function(t,n,e){"use strict";var r=e(0),o=e(7),i=e(1),u=e(47),a=e(112);r(r.P+r.R,"Promise",{finally:function(t){var n=u(this,o.Promise||i.Promise),e="function"==typeof t;return this.then(e?function(e){return a(n,t()).then((function(){return e}))}:t,e?function(e){return a(n,t()).then((function(){throw e}))}:t)}})},function(t,n,e){e(291),e(292),e(293),t.exports=e(7)},function(t,n,e){var r=e(1),o=e(0),i=e(57),u=[].slice,a=/MSIE .\./.test(i),c=function(t){return function(n,e){var r=arguments.length>2,o=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,o)}:n,e)}};o(o.G+o.B+o.F*a,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,n,e){var r=e(0),o=e(83);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,n,e){for(var r=e(80),o=e(31),i=e(11),u=e(1),a=e(14),c=e(40),f=e(5),s=f("iterator"),l=f("toStringTag"),p=c.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=o(h),d=0;d<v.length;d++){var y,g=v[d],b=h[g],m=u[g],S=m&&m.prototype;if(S&&(S[s]||a(S,s,p),S[l]||a(S,l,g),c[g]=p,b))for(y in r)S[y]||i(S,y,r[y],!0)}},function(t,n,e){var r=function(t){"use strict";var n=Object.prototype,e=n.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",u=r.toStringTag||"@@toStringTag";function a(t,n,e,r){var o=n&&n.prototype instanceof s?n:s,i=Object.create(o.prototype),u=new x(r||[]);return i._invoke=function(t,n,e){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return T()}for(e.method=o,e.arg=i;;){var u=e.delegate;if(u){var a=m(u,e);if(a){if(a===f)continue;return a}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var s=c(t,n,e);if("normal"===s.type){if(r=e.done?"completed":"suspendedYield",s.arg===f)continue;return{value:s.arg,done:e.done}}"throw"===s.type&&(r="completed",e.method="throw",e.arg=s.arg)}}}(t,e,u),i}function c(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=a;var f={};function s(){}function l(){}function p(){}var h={};h[o]=function(){return this};var v=Object.getPrototypeOf,d=v&&v(v(P([])));d&&d!==n&&e.call(d,o)&&(h=d);var y=p.prototype=s.prototype=Object.create(h);function g(t){["next","throw","return"].forEach((function(n){t[n]=function(t){return this._invoke(n,t)}}))}function b(t,n){var r;this._invoke=function(o,i){function u(){return new n((function(r,u){!function r(o,i,u,a){var f=c(t[o],t,i);if("throw"!==f.type){var s=f.arg,l=s.value;return l&&"object"==typeof l&&e.call(l,"__await")?n.resolve(l.__await).then((function(t){r("next",t,u,a)}),(function(t){r("throw",t,u,a)})):n.resolve(l).then((function(t){s.value=t,u(s)}),(function(t){return r("throw",t,u,a)}))}a(f.arg)}(o,i,r,u)}))}return r=r?r.then(u,u):u()}}function m(t,n){var e=t.iterator[n.method];if(void 0===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,m(t,n),"throw"===n.method))return f;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var r=c(e,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,f;var o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function S(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function w(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function P(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(e.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:T}}function T(){return{value:void 0,done:!0}}return l.prototype=y.constructor=p,p.constructor=l,p[u]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===l||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(y),t},t.awrap=function(t){return{__await:t}},g(b.prototype),b.prototype[i]=function(){return this},t.AsyncIterator=b,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var u=new b(a(n,e,r,o),i);return t.isGeneratorFunction(e)?u:u.next().then((function(t){return t.done?t.value:u.next()}))},g(y),y[u]="Generator",y[o]=function(){return this},y.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!t)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(e,r){return u.type="throw",u.arg=t,n.next=e,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],u=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var a=e.call(i,"catchLoc"),c=e.call(i,"finallyLoc");if(a&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(a){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=n,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),f},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),w(e),f}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;w(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:P(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,n,e){e(296),t.exports=e(119).global},function(t,n,e){var r=e(297);r(r.G,{global:e(85)})},function(t,n,e){var r=e(85),o=e(119),i=e(298),u=e(300),a=e(307),c=function(t,n,e){var f,s,l,p=t&c.F,h=t&c.G,v=t&c.S,d=t&c.P,y=t&c.B,g=t&c.W,b=h?o:o[n]||(o[n]={}),m=b.prototype,S=h?r:v?r[n]:(r[n]||{}).prototype;for(f in h&&(e=n),e)(s=!p&&S&&void 0!==S[f])&&a(b,f)||(l=s?S[f]:e[f],b[f]=h&&"function"!=typeof S[f]?e[f]:y&&s?i(l,r):g&&S[f]==l?function(t){var n=function(n,e,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,e)}return new t(n,e,r)}return t.apply(this,arguments)};return n.prototype=t.prototype,n}(l):d&&"function"==typeof l?i(Function.call,l):l,d&&((b.virtual||(b.virtual={}))[f]=l,t&c.R&&m&&!m[f]&&u(m,f,l)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n,e){var r=e(299);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(301),o=e(306);t.exports=e(87)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(302),o=e(303),i=e(305),u=Object.defineProperty;n.f=e(87)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(86);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n,e){t.exports=!e(87)&&!e(120)((function(){return 7!=Object.defineProperty(e(304)("div"),"a",{get:function(){return 7}}).a}))},function(t,n,e){var r=e(86),o=e(85).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){var r=e(86);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){"use strict";e.r(n);var r={pause:!1},o=5,i=function(t){return Math.floor(1e3/t)},u={fpsRange:{minFps:1,maxFps:60},currentRate:i(o),increaseRate:function(){o+=1,this.currentRate=i(o)},decreaseRate:function(){o-=1,this.currentRate=i(o)},getCurrentFps:function(){return o}},a={keyboardKeys:{arrowLeft:"ArrowLeft",arrowRight:"ArrowRight",arrowDown:"ArrowDown",arrowUp:"ArrowUp",space:"Space",numpadSubtract:"NumpadSubtract",numpadAdd:"NumpadAdd",keyM:"KeyM"}},c=function(t){return document.querySelector(t)};function f(t,n){var e=document.createElement(t);return e.classList.add(n),e}var s=function(t){return t instanceof Element};function l(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var p=new(function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.container=c(".container"),this.gameContainer=c(".gameContainer")?c(".gameContainer"):f("div","gameContainer"),this.gameSpeedContainer=c(".gameSpeedContainer")?c(".gameSpeedContainer"):f("div","gameSpeedContainer"),this.decreaseTooltip=c(".decreaseTooltip")?c(".decreaseTooltip"):f("div","decreaseTooltip"),this.increaseTooltip=c(".decreaseTooltip")?c(".increaseTooltip"):f("div","increaseTooltip"),this.fpsContainer=c(".fpsContainer")?c(".fpsContainer"):f("div","fpsContainer"),this.canvas=c(".gameField")?c(".gameField"):f("canvas","gameField")}var n,e,r;return n=t,(e=[{key:"initialize",value:function(){this.setInnerText(this.decreaseTooltip,"press - for decreaseTooltip fps"),this.setInnerText(this.increaseTooltip,"press + for increaseTooltip fps")}},{key:"mount",value:function(){this.container.append(this.gameContainer),this.gameContainer.append(this.gameSpeedContainer,this.canvas),this.gameSpeedContainer.append(this.decreaseTooltip,this.fpsContainer,this.increaseTooltip)}},{key:"setInnerText",value:function(t,n){"string"==typeof t?this[t]&&(this[t].innerText=n):s(t)&&(t.innerText=n)}}])&&l(n.prototype,e),r&&l(n,r),t}()),h={audio:new Audio,audioMute:!1,play:function(t){this.audio.src=t,this.audioMute||this.audio.play()}};var v=function(t,n,e){var o=e.code,i=a.keyboardKeys,c=i.arrowLeft,f=i.arrowRight,s=i.arrowDown,l=i.arrowUp,v=i.space,d=i.numpadSubtract,y=i.numpadAdd,g=i.keyM,b=u.fpsRange,m=u.getCurrentFps,S=b.minFps,w=b.maxFps;switch(o){case c:e.preventDefault(),t.left=!0,t.right=!1,t.up=!1,t.down=!1;break;case f:e.preventDefault(),t.left=!1,t.right=!0,t.up=!1,t.down=!1;break;case l:e.preventDefault(),t.left=!1,t.right=!1,t.up=!0,t.down=!1;break;case s:e.preventDefault(),t.left=!1,t.right=!1,t.up=!1,t.down=!0;break;case v:r.pause?r.pause=!1:r.pause=!0;break;case y:m()!==w&&u.increaseRate(),p.setInnerText("fpsContainer","FPS - ".concat(u.getCurrentFps()));break;case d:m()!==S&&u.decreaseRate(),p.setInnerText("fpsContainer","FPS - ".concat(u.getCurrentFps()));break;case g:h.audioMute?h.audioMute=!1:h.audioMute=!0}};function d(t,n,e){t.data.set(e,4*n)}var y=function(t){try{var n=localStorage.getItem(t);return n?JSON.parse(n):[]}catch(t){return[]}};function g(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return e}(t,n)||function(t,n){if(!t)return;if("string"==typeof t)return b(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(e);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return b(t,n)}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function m(t){var n=g(t.split(","),3);return[n[0],n[1],n[2]]}function S(t,n){var e,r=function(t){var n=[];return t.data.forEach((function(e,r){r%4==0&&n.push(t.data.subarray(r,r+4))})),n}(n),o=y("colorsMap"),i=r.map((function(t){var n=function(t){var n=Math.round(t[0]/10*10),e=Math.round(t[1]/10*10),r=Math.round(t[2]/10*10);return"".concat(n,",").concat(e,",").concat(r)}(t);return o[n]}));(e={},i.map((function(t){return e[t]?(e[t].frequency+=1,e[t]):(e[t]={color:t,frequency:1},e[t])}))).forEach((function(e,r){if(void 0===e.color){var i=m(o[t]);d(n,r,i)}else d(n,r,m(o.black))}))}function w(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var x=function(){function t(n,e,r){if(function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),t.instance instanceof t)return t.instance;this.width=n,this.height=e,this.backgroundColor=r,this.elementSize=Math.floor(n/20),this.canvas=document.querySelector(".gameField"),this.context=this.canvas.getContext("2d"),t.instance=this}var n,e,r;return n=t,(e=[{key:"draw",value:function(){this.setWidth(),this.setHeight(),this.context.fillStyle=this.backgroundColor,this.context.fillRect(0,0,this.width,this.height)}},{key:"setWidth",value:function(){this.canvas.width=this.width}},{key:"setHeight",value:function(){this.canvas.height=this.height}},{key:"getContext",value:function(){return this.context}}])&&w(n.prototype,e),r&&w(n,r),t}();function P(t){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function T(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _(t,n){return!n||"object"!==P(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function O(t){var n="function"==typeof Map?new Map:void 0;return(O=function(t){if(null===t||(e=t,-1===Function.toString.call(e).indexOf("[native code]")))return t;var e;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,r)}function r(){return k(t,arguments,F(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),M(r,t)})(t)}function k(t,n,e){return(k=E()?Reflect.construct:function(t,n,e){var r=[null];r.push.apply(r,n);var o=new(Function.bind.apply(t,r));return e&&M(o,e.prototype),o}).apply(null,arguments)}function E(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function M(t,n){return(M=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function F(t){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var j=function(t){!function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&M(t,n)}(u,t);var n,e,r,o,i=(n=u,function(){var t,e=F(n);if(E()){var r=F(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return _(this,t)});function u(t,n,e,r){var o;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,u),(o=i.call(this)).name=t,o.position=n,o.size=e,o.src=r,o}return e=u,(r=[{key:"draw",value:function(){var t=(new x).getContext(),n=this.position,e=n.x,r=n.y;t.drawImage(this,e,r,this.size,this.size);var o=t.getImageData(e,r,this.size,this.size);S("red",o),t.putImageData(o,e,r)}},{key:"setRandomPosition",value:function(t){var n=t.x,e=t.y;this.position.x=n,this.position.y=e}},{key:"spawn",value:function(t){var n=Math.floor(Math.random()*t.length);this.setRandomPosition(t[n])}}])&&T(e.prototype,r),o&&T(e,o),u}(O(Image));function R(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return e}(t,n)||function(t,n){if(!t)return;if("string"==typeof t)return A(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(e);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return A(t,n)}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function I(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var W=function(){function t(n,e,r){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.size=e,this.direction={up:!1,down:!1,right:!0,left:!1},this.body=[{x:n.x,y:n.y}],this.snakeImage=r}var n,e,r;return n=t,(e=[{key:"createSnake",value:function(t){for(var n=this.body[0],e=n.x,r=n.y,o=0;o<t;o++)this.body[o]={x:e-o*this.size,y:r}}},{key:"draw",value:function(){var t=this,n=(new x).getContext(),e=this.snakeImage,r=e.bodyImage,o=e.headImages,i=e.tailImages,u=this.body.length-1;this.body.forEach((function(e,a){0===a?function(t,n,e,r){var o=(new x).getContext(),i=R(Object.values(t).filter(Boolean),1)[0],u=t.up,a=t.down,c=t.right,f=t.left,s=n.upSideHead,l=n.downSideHead,p=n.rightSideHead,h=n.leftSideHead;switch(i){case u:o.drawImage(s,r.x,r.y,e,e);break;case a:o.drawImage(l,r.x,r.y,e,e);break;case c:o.drawImage(p,r.x,r.y,e,e);break;case f:o.drawImage(h,r.x,r.y,e,e)}}(t.direction,o,t.size,e):a===u?function(t,n,e,r){var o=(new x).getContext(),i=t[t.length-1],u=t[t.length-2],a=n.rightSideTail,c=n.leftSideTail,f=n.upSideTail,s=n.downSideTail;u.y>i.y&&o.drawImage(f,r.x,r.y,e,e),u.y<i.y&&o.drawImage(s,r.x,r.y,e,e),u.x>i.x&&o.drawImage(a,r.x,r.y,e,e),u.x<i.x&&o.drawImage(c,r.x,r.y,e,e)}(t.body,i,t.size,e):n.drawImage(r,e.x,e.y,t.size,t.size)}))}},{key:"increaseLength",value:function(){this.body.push({x:this.body[this.body.length-1].x,y:this.body[this.body.length-1].y})}},{key:"decreaseLength",value:function(){1!==this.body.length&&this.body.pop()}},{key:"move",value:function(t){for(var n=this.body,e=this.direction,r=this.size,o=n[0],i=n.length-1;i>0;i--){var u=n[i];u.x=n[i-1].x,u.y=n[i-1].y}this.correctPosition(t),e.up&&(o.y-=r),e.down&&(o.y+=r),e.right&&(o.x+=r),e.left&&(o.x-=r)}},{key:"correctPosition",value:function(t){var n=this.body[0],e=this.direction,r=e.up,o=e.down,i=e.right,u=e.left;r&&n.y<=0&&(n.y=t),i&&n.x>=t-this.size&&(n.x=-this.size),o&&n.y>=t-this.size&&(n.y=-this.size),u&&n.x<=0&&(n.x=t)}}])&&I(n.prototype,e),r&&I(n,r),t}(),L={eatFoodSrc:{apple:"src/res/sounds/food/eat-sound.m4a"},actionsSrc:{snakeIncreased:"src/res/sounds/gift/snake-increased.m4a",snakeDecreased:"src/res/sounds/gift/snake-decreased.m4a"}};function N(t){return(N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function C(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function G(t,n){return!n||"object"!==N(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function B(t){var n="function"==typeof Map?new Map:void 0;return(B=function(t){if(null===t||(e=t,-1===Function.toString.call(e).indexOf("[native code]")))return t;var e;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,r)}function r(){return D(t,arguments,U(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),z(r,t)})(t)}function D(t,n,e){return(D=V()?Reflect.construct:function(t,n,e){var r=[null];r.push.apply(r,n);var o=new(Function.bind.apply(t,r));return e&&z(o,e.prototype),o}).apply(null,arguments)}function V(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function z(t,n){return(z=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function U(t){return(U=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var H=function(t){!function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&z(t,n)}(u,t);var n,e,r,o,i=(n=u,function(){var t,e=U(n);if(V()){var r=U(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return G(this,t)});function u(t,n,e,r){var o;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,u),(o=i.call(this)).name=t,o.position=n,o.size=e,o.src=r,o.actions=["snakeIncreased","snakeDecreased"],o}return e=u,(r=[{key:"makeRandomActionWith",value:function(t){var n,e=L.actionsSrc,r=(n=this.actions)[Math.floor(Math.random()*n.length)];switch(r){case"snakeIncreased":t.increaseLength();break;case"snakeDecreased":t.decreaseLength()}h.play(e[r])}},{key:"setRandomPosition",value:function(t){var n=t.x,e=t.y;this.position.x=n,this.position.y=e}},{key:"draw",value:function(){var t=(new x).getContext(),n=this.position,e=n.x,r=n.y;t.drawImage(this,e,r,this.size,this.size)}},{key:"spawn",value:function(t){var n=Math.floor(Math.random()*t.length);this.setRandomPosition(t[n])}}])&&C(e.prototype,r),o&&C(e,o),u}(B(Image));function Z(t){return(Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Y(t,n){return!n||"object"!==Z(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function J(t){var n="function"==typeof Map?new Map:void 0;return(J=function(t){if(null===t||(e=t,-1===Function.toString.call(e).indexOf("[native code]")))return t;var e;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,r)}function r(){return q(t,arguments,X(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),$(r,t)})(t)}function q(t,n,e){return(q=K()?Reflect.construct:function(t,n,e){var r=[null];r.push.apply(r,n);var o=new(Function.bind.apply(t,r));return e&&$(o,e.prototype),o}).apply(null,arguments)}function K(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function $(t,n){return($=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function X(t){return(X=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Q=function(t){!function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&$(t,n)}(r,t);var n,e=(n=r,function(){var t,e=X(n);if(K()){var r=X(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return Y(this,t)});function r(t,n,o){var i;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,r),(i=e.call(this,t,n)).src=o,i}return r}(J(Image)),tt={headImages:{upSideHead:new Q(25,25,"src/res/snake/snakeHead/snakeHeadUp.png"),downSideHead:new Q(25,25,"src/res/snake/snakeHead/snakeHeadDown.png"),rightSideHead:new Q(25,25,"src/res/snake/snakeHead/snakeHeadRight.png"),leftSideHead:new Q(25,25,"src/res/snake/snakeHead/snakeHeadLeft.png")},bodyImage:new Q(25,25,"src/res/snake/snakeBody.png"),tailImages:{upSideTail:new Q(25,25,"src/res/snake/snakeTail/snakeTailDown.png"),downSideTail:new Q(25,25,"src/res/snake/snakeTail/snakeTailUp.png"),rightSideTail:new Q(25,25,"src/res/snake/snakeTail/snakeTailRight.png"),leftSideTail:new Q(25,25,"src/res/snake/snakeTail/snakeTailLeft.png")}},nt=function(){var t=new j("apple",{x:250,y:275},25,"src/res/food/apple.jpg");return{snake:new W({x:75,y:75},25,tt),apple:t,gift:new H("gift",{x:200,y:200},25,"src/res/gift/gift.png")}};function et(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return e}(t,n)||function(t,n){if(!t)return;if("string"==typeof t)return rt(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(e);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return rt(t,n)}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rt(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function ot(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function it(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var ut={"76,76,76":"Saddle","27,27,27":"Tolopea","124,124,124":"TrendyGreen","106,106,106":"Spice","201,201,201":"Sundance","113,113,113":"YellowMetal","134,134,134":"RustyNail","212,212,212":"Straw","255,255,255":"YourPink","245,245,245":"SoftPeach","155,155,155":"Oregon","0,0,0":"Swamp","144,144,144":"Sycamore","175,175,175":"PigeonPost","219,219,219":"WhiskeySour","169,169,169":"TowerGrey","59,59,59":"Treehouse","135,135,135":"Sushi","163,163,163":"Pharlap","249,249,249":"SugarCane","123,123,123":"YukonGold","157,157,157":"Pistachio","112,112,112":"PersianPlum","224,224,224":"HarvestGold","223,223,223":"WillowBrook","79,79,79":"HoneyFlower","226,226,226":"Snuff","235,235,235":"Apricot","161,161,161":"WaterLeaf","237,237,237":"Zumthor","234,234,234":"WhiteRock","232,232,232":"Shilo","1,1,1":"RegalBlue","17,17,17":"Arapawa","67,67,67":"SpaceShuttle","148,148,148":"CopperRust","198,198,198":"Roti","46,46,46":"Scrub","19,19,19":"Parsley","250,250,250":"Turbo","50,50,50":"Stromboli","40,40,40":"Oil","238,238,238":"TwilightBlue","236,236,236":"WildRice","151,151,151":"Wisteria","10,10,10":"JapaneseLaurel","49,49,49":"PickledBluewood","136,136,136":"SuvaGrey","78,78,78":"Wedgewood","247,247,247":"Whisper","13,13,13":"Bush","2,2,2":"Zydeco","165,165,165":"Zorba","133,133,133":"HalfBaked","42,42,42":"TurtleGreen","218,218,218":"Zanah","222,222,222":"Wafer","166,166,166":"RoofTerracotta","68,68,68":"MoroccoBrown","41,41,41":"Zeus","130,130,130":"SandDune","125,125,125":"Pueblo","39,39,39":"Plantation","152,152,152":"VinRouge","61,61,61":"Goblin","254,254,254":"YellowSea","107,107,107":"TeakWoodFinish","252,252,252":"WhiteNectar","22,22,22":"TimberGreen","178,178,178":"Shiraz","55,55,55":"Tumbleweed","73,73,73":"VerdunGreen","193,193,193":"TiaMaria","202,202,202":"Turmeric","8,8,8":"Jaguar","11,11,11":"SanFelix","246,246,246":"SpringSun","37,37,37":"Shark","62,62,62":"Tobago","4,4,4":"Zuccini","14,14,14":"Firefly","103,103,103":"ViridianGreen","242,242,242":"MandysPink","77,77,77":"Woodland","38,38,38":"WoodBark","44,44,44":"Revolver","220,220,220":"Westar","34,34,34":"BlueBell","241,241,241":"Wewak","12,12,12":"Woodsmoke","56,56,56":"OxfordBlue","32,32,32":"JacksonsPurple","191,191,191":"Ziggurat","118,118,118":"Lima","210,210,210":"Gossip","116,116,116":"RollingStone","24,24,24":"ForestGreen","180,180,180":"WellRead","28,28,28":"RangoonGreen","229,229,229":"Zest","228,228,228":"Zombie","92,92,92":"Mulberry","199,199,199":"PineGlade","9,9,9":"SeaGreen","122,122,122":"Siren","174,174,174":"HippiePink","186,186,186":"Submarine","74,74,74":"Tundora","205,205,205":"Onahau","187,187,187":"Surf","93,93,93":"Verdigris","60,60,60":"Woodburn","177,177,177":"Vesuvius","171,171,171":"Sandrift","63,63,63":"TomThumb","89,89,89":"WineBerry","64,64,64":"ThatchGreen","231,231,231":"TonysPink","98,98,98":"WestCoast","168,168,168":"Tallow","72,72,72":"WoodyBrown","21,21,21":"Genoa","119,119,119":"Walnut","217,217,217":"Tana","101,101,101":"WillowGrove","243,243,243":"Wheatfield","88,88,88":"ScarpaFlow","176,176,176":"Tapestry","111,111,111":"Limeade","137,137,137":"SolidPink","213,213,213":"WinterHazel","162,162,162":"Rouge","6,6,6":"Tiber","140,140,140":"TrendyPink","248,248,248":"WhiteLinen","47,47,47":"Spectra","139,139,139":"WesternRed","230,230,230":"Trinidad","173,173,173":"Padua","82,82,82":"PersianRed","227,227,227":"Peppermint","184,184,184":"Sail","209,209,209":"Vanilla","30,30,30":"TePapaGreen","141,141,141":"Tosca","81,81,81":"TaxBreak","53,53,53":"Valentino","189,189,189":"Tuscany","23,23,23":"PineTree","131,131,131":"MonteCarlo","158,158,158":"Sage","206,206,206":"Yuma","51,51,51":"Thunder","253,253,253":"SweetPink","85,85,85":"Saratoga","127,127,127":"PeruTan","251,251,251":"SweetCorn","138,138,138":"TrueV","233,233,233":"Tangerine","172,172,172":"SpringRain","48,48,48":"Woodrush","159,159,159":"StarDust","126,126,126":"CopperCanyon","96,96,96":"Smoky","196,196,196":"OrangeRoughy","97,97,97":"Planter","194,194,194":"Twine","5,5,5":"Watercourse","160,160,160":"Tabasco","185,185,185":"WildWillow","182,182,182":"Thatch","70,70,70":"Loulou","115,115,115":"Xanadu","181,181,181":"TurkishRose","146,146,146":"Venus","80,80,80":"Mortar","110,110,110":"RedOxide","95,95,95":"Tradewind","65,65,65":"SmokeyAsh","57,57,57":"LimedSpruce","102,102,102":"SilverTree","164,164,164":"Wistful","117,117,117":"Russett","100,100,100":"Viking","142,142,142":"Rope","109,109,109":"PineCone","16,16,16":"Vulcan","200,200,200":"Lily","143,143,143":"VistaBlue","18,18,18":"Mosaic","108,108,108":"Eminence","129,129,129":"SpicyPink","225,225,225":"Tara","33,33,33":"Eternity","207,207,207":"Tasman","121,121,121":"Spray","240,240,240":"TitanWhite","179,179,179":"TaupeGrey","105,105,105":"TawnyPort","170,170,170":"SpunPearl","216,216,216":"Valencia","215,215,215":"Pavlova","203,203,203":"Viola","86,86,86":"FountainBlue","128,128,128":"Seagull","190,190,190":"PinkSwan","25,25,25":"PalmLeaf","84,84,84":"VidaLoca","239,239,239":"Porcelain","114,114,114":"VenetianRed","132,132,132":"GrannySmith","36,36,36":"Violet","29,29,29":"GreenPea","3,3,3":"Tangaroa","69,69,69":"SanMarino","195,195,195":"TropicalBlue","154,154,154":"Toast","52,52,52":"Tamarind","183,183,183":"Sahara","43,43,43":"Valhalla","94,94,94":"Kabul","83,83,83":"Voodoo","208,208,208":"RedStage","90,90,90":"WaikawaGrey","58,58,58":"William","66,66,66":"Panda","91,91,91":"Jambalaya","244,244,244":"Zircon","120,120,120":"Wasabi","31,31,31":"NightRider","54,54,54":"Waiouru","150,150,150":"SummerGreen","26,26,26":"LuckyPoint","153,153,153":"TotemPole","167,167,167":"MexicanRed","35,35,35":"Mallard","45,45,45":"StTropaz","192,192,192":"Thunderbird","214,214,214":"Tacha","149,149,149":"Strikemaster","75,75,75":"Nandor","20,20,20":"ToryBlue","197,197,197":"Tussock","104,104,104":"Zambezi","99,99,99":"Patina","188,188,188":"PowderBlue","211,211,211":"Swirl","87,87,87":"SpringGreen","156,156,156":"Stiletto","221,221,221":"WhiteIce","7,7,7":"Tarawera","204,204,204":"Thistle","15,15,15":"ToreaBay",Saddle:"76,76,76",Tolopea:"27,27,27",TrendyGreen:"124,124,124",Spice:"106,106,106",Sundance:"201,201,201",YellowMetal:"113,113,113",RustyNail:"134,134,134",Straw:"212,212,212",YourPink:"255,255,255",SoftPeach:"245,245,245",Oregon:"155,155,155",Swamp:"0,0,0",Sycamore:"144,144,144",PigeonPost:"175,175,175",WhiskeySour:"219,219,219",TowerGrey:"169,169,169",Treehouse:"59,59,59",Sushi:"135,135,135",Pharlap:"163,163,163",SugarCane:"249,249,249",YukonGold:"123,123,123",Pistachio:"157,157,157",PersianPlum:"112,112,112",HarvestGold:"224,224,224",WillowBrook:"223,223,223",HoneyFlower:"79,79,79",Snuff:"226,226,226",Apricot:"235,235,235",WaterLeaf:"161,161,161",Zumthor:"237,237,237",WhiteRock:"234,234,234",Shilo:"232,232,232",RegalBlue:"1,1,1",Arapawa:"17,17,17",SpaceShuttle:"67,67,67",CopperRust:"148,148,148",Roti:"198,198,198",Scrub:"46,46,46",Parsley:"19,19,19",Turbo:"250,250,250",Stromboli:"50,50,50",Oil:"40,40,40",TwilightBlue:"238,238,238",WildRice:"236,236,236",Wisteria:"151,151,151",JapaneseLaurel:"10,10,10",PickledBluewood:"49,49,49",SuvaGrey:"136,136,136",Wedgewood:"78,78,78",Whisper:"247,247,247",Bush:"13,13,13",Zydeco:"2,2,2",Zorba:"165,165,165",HalfBaked:"133,133,133",TurtleGreen:"42,42,42",Zanah:"218,218,218",Wafer:"222,222,222",RoofTerracotta:"166,166,166",MoroccoBrown:"68,68,68",Zeus:"41,41,41",SandDune:"130,130,130",Pueblo:"125,125,125",Plantation:"39,39,39",VinRouge:"152,152,152",Goblin:"61,61,61",YellowSea:"254,254,254",TeakWoodFinish:"107,107,107",WhiteNectar:"252,252,252",TimberGreen:"22,22,22",Shiraz:"178,178,178",Tumbleweed:"55,55,55",VerdunGreen:"73,73,73",TiaMaria:"193,193,193",Turmeric:"202,202,202",Jaguar:"8,8,8",SanFelix:"11,11,11",SpringSun:"246,246,246",Shark:"37,37,37",Tobago:"62,62,62",Zuccini:"4,4,4",Firefly:"14,14,14",ViridianGreen:"103,103,103",MandysPink:"242,242,242",Woodland:"77,77,77",WoodBark:"38,38,38",Revolver:"44,44,44",Westar:"220,220,220",BlueBell:"34,34,34",Wewak:"241,241,241",Woodsmoke:"12,12,12",OxfordBlue:"56,56,56",JacksonsPurple:"32,32,32",Ziggurat:"191,191,191",Lima:"118,118,118",Gossip:"210,210,210",RollingStone:"116,116,116",ForestGreen:"24,24,24",WellRead:"180,180,180",RangoonGreen:"28,28,28",Zest:"229,229,229",Zombie:"228,228,228",Mulberry:"92,92,92",PineGlade:"199,199,199",SeaGreen:"9,9,9",Siren:"122,122,122",HippiePink:"174,174,174",Submarine:"186,186,186",Tundora:"74,74,74",Onahau:"205,205,205",Surf:"187,187,187",Verdigris:"93,93,93",Woodburn:"60,60,60",Vesuvius:"177,177,177",Sandrift:"171,171,171",TomThumb:"63,63,63",WineBerry:"89,89,89",ThatchGreen:"64,64,64",TonysPink:"231,231,231",WestCoast:"98,98,98",Tallow:"168,168,168",WoodyBrown:"72,72,72",Genoa:"21,21,21",Walnut:"119,119,119",Tana:"217,217,217",WillowGrove:"101,101,101",Wheatfield:"243,243,243",ScarpaFlow:"88,88,88",Tapestry:"176,176,176",Limeade:"111,111,111",SolidPink:"137,137,137",WinterHazel:"213,213,213",Rouge:"162,162,162",Tiber:"6,6,6",TrendyPink:"140,140,140",WhiteLinen:"248,248,248",Spectra:"47,47,47",WesternRed:"139,139,139",Trinidad:"230,230,230",Padua:"173,173,173",PersianRed:"82,82,82",Peppermint:"227,227,227",Sail:"184,184,184",Vanilla:"209,209,209",TePapaGreen:"30,30,30",Tosca:"141,141,141",TaxBreak:"81,81,81",Valentino:"53,53,53",Tuscany:"189,189,189",PineTree:"23,23,23",MonteCarlo:"131,131,131",Sage:"158,158,158",Yuma:"206,206,206",Thunder:"51,51,51",SweetPink:"253,253,253",Saratoga:"85,85,85",PeruTan:"127,127,127",SweetCorn:"251,251,251",TrueV:"138,138,138",Tangerine:"233,233,233",SpringRain:"172,172,172",Woodrush:"48,48,48",StarDust:"159,159,159",CopperCanyon:"126,126,126",Smoky:"96,96,96",OrangeRoughy:"196,196,196",Planter:"97,97,97",Twine:"194,194,194",Watercourse:"5,5,5",Tabasco:"160,160,160",WildWillow:"185,185,185",Thatch:"182,182,182",Loulou:"70,70,70",Xanadu:"115,115,115",TurkishRose:"181,181,181",Venus:"146,146,146",Mortar:"80,80,80",RedOxide:"110,110,110",Tradewind:"95,95,95",SmokeyAsh:"65,65,65",LimedSpruce:"57,57,57",SilverTree:"102,102,102",Wistful:"164,164,164",Russett:"117,117,117",Viking:"100,100,100",Rope:"142,142,142",PineCone:"109,109,109",Vulcan:"16,16,16",Lily:"200,200,200",VistaBlue:"143,143,143",Mosaic:"18,18,18",Eminence:"108,108,108",SpicyPink:"129,129,129",Tara:"225,225,225",Eternity:"33,33,33",Tasman:"207,207,207",Spray:"121,121,121",TitanWhite:"240,240,240",TaupeGrey:"179,179,179",TawnyPort:"105,105,105",SpunPearl:"170,170,170",Valencia:"216,216,216",Pavlova:"215,215,215",Viola:"203,203,203",FountainBlue:"86,86,86",Seagull:"128,128,128",PinkSwan:"190,190,190",PalmLeaf:"25,25,25",VidaLoca:"84,84,84",Porcelain:"239,239,239",VenetianRed:"114,114,114",GrannySmith:"132,132,132",Violet:"36,36,36",GreenPea:"29,29,29",Tangaroa:"3,3,3",SanMarino:"69,69,69",TropicalBlue:"195,195,195",Toast:"154,154,154",Tamarind:"52,52,52",Sahara:"183,183,183",Valhalla:"43,43,43",Kabul:"94,94,94",Voodoo:"83,83,83",RedStage:"208,208,208",WaikawaGrey:"90,90,90",William:"58,58,58",Panda:"66,66,66",Jambalaya:"91,91,91",Zircon:"244,244,244",Wasabi:"120,120,120",NightRider:"31,31,31",Waiouru:"54,54,54",SummerGreen:"150,150,150",LuckyPoint:"26,26,26",TotemPole:"153,153,153",MexicanRed:"167,167,167",Mallard:"35,35,35",StTropaz:"45,45,45",Thunderbird:"192,192,192",Tacha:"214,214,214",Strikemaster:"149,149,149",Nandor:"75,75,75",ToryBlue:"20,20,20",Tussock:"197,197,197",Zambezi:"104,104,104",Patina:"99,99,99",PowderBlue:"188,188,188",Swirl:"211,211,211",SpringGreen:"87,87,87",Stiletto:"156,156,156",WhiteIce:"221,221,221",Tarawera:"7,7,7",Thistle:"204,204,204",ToreaBay:"15,15,15"},at=function(t){var n={};return t.colors.forEach((function(t){var e=t.rgb,r=e.r,o=e.g,i=e.b,u=t.name.toLowerCase();n[u]="".concat(r,",").concat(o,",").concat(i),n["".concat(r,",").concat(o,",").concat(i)]=u})),function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?ot(Object(e),!0).forEach((function(n){it(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):ot(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}({},n,{},ut)},ct=function(t,n){return localStorage.setItem(t,JSON.stringify(n))},ft=function(){y("allColors").length||fetch("https://api.color.pizza/v1/").then((function(t){return t.json()})).then((function(t){var n=at(t);return ct("allColors",t),ct("colorsMap",n),n}))};function st(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var lt=c(".playMenuButton"),pt=c(".optionsMenuButton"),ht=new(function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.buttons={newGame:lt,options:pt},this.container=c(".mainMenu")}var n,e,r;return n=t,(e=[{key:"buttonHandler",value:function(t,n){this.buttons[t].addEventListener("click",(function(){return n()}))}},{key:"hide",value:function(){this.container.style.display="none"}}])&&st(n.prototype,e),r&&st(n,r),t}());ht.buttonHandler("newGame",(function(){ht.hide(),p.mount(),p.initialize(),ft();var t=nt(),n=t.apple,e=t.snake,o=t.gift,i=new x(500,500,"black"),a=e.size,c=e.direction,f=e.body,s=i.width,l=i.elementSize;document.addEventListener("keydown",v.bind(void 0,c,a)),p.setInnerText("fpsContainer","FPS - ".concat(u.getCurrentFps())),e.createSnake(3),function a(){if(setTimeout((function(){return requestAnimationFrame(a)}),u.currentRate),!r.pause){var c=function(t,n){var e={};return t.forEach((function(t){var n=t.x,r=t.y,o="".concat(n,"/").concat(r);e[o]=r})),n.filter((function(t){var n=t.x,r=t.y,o="".concat(n,"/").concat(r);return!e[o]&&t}))}(function(t){return Object.values(t).map((function(t){return t instanceof W?t.body:t.position})).flat()}(t),function(t,n){var e=Math.floor(n/t);return Array.from(Array(e)).map((function(n,r){return Array.from(Array(e)).map((function(n,e){return{x:r*t,y:e*t}}))})).flat()}(l,s)),p=function(t){return Object.values(t).filter((function(t){return t instanceof W==!1}))}(t),v=function(t,n){var e={},r=Object.values(t).reduce((function(t,n){return"".concat(t,"/").concat(n)}));return e[r]=r,et(n.filter((function(t){var n=t.position,r=n.x,o=n.y,i="".concat(r,"/").concat(o);return e[i]})),1)[0]}(f[0],p);if(i.draw(),n.draw(),o.draw(),e.draw(),e.move(s),v){if(v instanceof j){var d=v.name,y=L.eatFoodSrc;e.increaseLength(),h.play(y[d])}v instanceof H&&o.makeRandomActionWith(e),v.spawn(c)}}}()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL25vQ29uZmxpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXM2L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy9wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3dlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL3NyYy9nYW1lL2dhbWVTdGF0ZS9nYW1lU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUvb3B0aW9ucy9yZWZyZXNoUmF0ZS9yZWZyZXNoUmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS9vcHRpb25zL2dhbWVDb250cm9sL2dhbWVDb250cm9sLmpzIiwid2VicGFjazovLy8uL3NyYy9ET00vdXRpbHMvZ2V0RWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRE9NL3V0aWxzL2NyZWF0ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RPTS91dGlscy9pc0RvbUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RPTS9HYW1lQ29udGFpbmVyL0dhbWVDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NvdW5kUGxheWVyL3NvdW5kUGxheWVyLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9nYW1lQ29udHJvbC9oYW5kbGVLZXlQdXNoLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9waXhlbElPL3BpeGVsTWFuaXB1bGF0aW9uL3NldFBpeGVsLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9sb2NhbFN0b3JhZ2UvZ2V0TG9jYWxTdG9yYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9maWxsQm9yZGVyQXBwbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3BpeGVsSU8vZ2V0Q29sb3JzT2ZQaXhlbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3BpeGVsSU8vcGl4ZWxNYW5pcHVsYXRpb24vZ2V0UGl4ZWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9pbml0aWFsU2V0dGluZ3MvQ2FudmFzLmpzIiwid2VicGFjazovLy8uL3NyYy9pbml0aWFsU2V0dGluZ3MvRm9vZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5pdGlhbFNldHRpbmdzL1NuYWtlLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9kcmF3SGVhZENvcnJlY3RTaWRlLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9kcmF3VGFpbENvcnJlY3RTaWRlLmpzIiwid2VicGFjazovLy8uL3NyYy9zb3VuZFBsYXllci9zb3VuZHNTcmMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luaXRpYWxTZXR0aW5ncy9HaWZ0LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9nZXRSYW5kb21BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL0ltYWdlV2l0aFNyYy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3NuYWtlSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2dldEdhbWVGaWVsZE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2dldENvbG9yc01hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbG9jYWxTdG9yYWdlL3NldExvY2FsU3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdXBsb2FkQWxsQ29sb3JzLmpzIiwid2VicGFjazovLy8uL3NyYy9ET00vTWFpbk1lbnUvTWFpbk1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9nZXRGcmVlUG9zaXRpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9nZXRHYW1lT2JqZWN0c1Bvc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZ2V0RmllbGRQb3NpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2dldEludGVyYWN0aXZlR2FtZU9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2dhbWVMb2dpYy9nZXRDb2xsaXNpb25PYmplY3QuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsInZlcnNpb24iLCJfX2UiLCJhIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJkZWZpbmVkIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiU3RyaW5nIiwidGhpcyIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiY3JlYXRlRGVzYyIsIklPYmplY3QiLCJtZXRob2QiLCJhcmciLCJhRnVuY3Rpb24iLCJmbiIsInRoYXQiLCJiIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJLRVkiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJ0b1N0cmluZyIsInNsaWNlIiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ2V0UHJvdG90eXBlT2YiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsImNvbnN0cnVjdG9yIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCJjb25jYXQiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsInZhbHVlT2YiLCJNRVRBIiwic2V0RGVzYyIsImlkIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsImJpdG1hcCIsInB4IiwicmFuZG9tIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsIm1heCIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJkb2N1bWVudCIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJPYmplY3RQcm90byIsIlVOU0NPUEFCTEVTIiwiX3QiLCJkZWYiLCJzdGF0Iiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwidHJpbSIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJjb2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJEIiwiY29weXJpZ2h0IiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImlzQXJyYXkiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJidWlsdGluRXhlYyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiaXMiLCJjcmVhdGVFbGVtZW50Iiwic2hhcmVkIiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiY291bnQiLCJJbmZpbml0eSIsInNpZ24iLCJ4IiwiJGV4cG0xIiwiZXhwbTEiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJpc1JlZ0V4cCIsInNlYXJjaFN0cmluZyIsIk1BVENIIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsImFyZ3MiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiQmFzZUJ1ZmZlciIsImFicyIsInBvdyIsImxvZyIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCJqIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwibmFtZXMiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJLIiwiayIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJ5IiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwicGFydEFyZ3MiLCJib3VuZCIsInVuIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCIkdHJpbSIsIndzIiwiaGV4IiwicmFkaXgiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJtc2ciLCJpc0Zpbml0ZSIsImxvZzFwIiwiZGVzY3JpcHRvciIsInJldCIsIm9yaWdpbmFsIiwibWVtbyIsImlzUmlnaHQiLCJ0byIsImluYyIsImZvcmNlZCIsImZsYWdzIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJ0YXNrIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJpc05vZGUiLCJlbXB0eSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwiVVNFX05BVElWRSIsInByb21pc2UiLCJyZXNvbHZlIiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJ0aGVuIiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsInJlamVjdCIsImRvbWFpbiIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJlbnRlciIsImV4aXQiLCJvblVuaGFuZGxlZCIsImNvbnNvbGUiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsImVycm9yIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwiZXJyIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiUHJvbWlzZSIsImNhcGFiaWxpdHkiLCIkJHJlamVjdCIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCJwcm9taXNlQ2FwYWJpbGl0eSIsIiRpdGVyRGVmaW5lIiwiU0laRSIsImdldEVudHJ5IiwiZW50cnkiLCJfZiIsIl9sIiwicHJldiIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsInVmc3RvcmUiLCJudW1iZXIiLCJSZWZsZWN0Iiwib3duS2V5cyIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJpc0VudHJpZXMiLCJvYmoiLCJfZ2xvYmFsIiwiX2JhYmVsUG9seWZpbGwiLCJ3YXJuIiwiJGZhaWxzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BTIiwiJEpTT04iLCJKU09OIiwiX3N0cmluZ2lmeSIsInN0cmluZ2lmeSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJzeW1ib2xzIiwiJGdldFByb3RvdHlwZU9mIiwiJGZyZWV6ZSIsIiRzZWFsIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRnJvemVuIiwiJGlzU2VhbGVkIiwiJGlzRXh0ZW5zaWJsZSIsIkZQcm90byIsIm5hbWVSRSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZmlyc3QiLCJjb2RlIiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiRVBTSUxPTiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIk51bWJlciIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJmcm91bmQiLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiJGFicyIsIiRzaWduIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJjb2xvciIsInNpemUiLCJ1cmwiLCJEYXRlIiwiZ2V0VGltZSIsInRvSlNPTiIsInRvSVNPU3RyaW5nIiwicHYiLCIkdG9JU09TdHJpbmciLCJseiIsIm51bSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIkRhdGVQcm90byIsImhpbnQiLCJjcmVhdGVQcm9wZXJ0eSIsInVwVG8iLCJjbG9uZWQiLCIkc29ydCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiJGZpbHRlciIsIiRzb21lIiwiJGV2ZXJ5IiwiJHJlZHVjZSIsIiRpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIiRmaW5kIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsImRlZmluZSIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyeCIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsImNoIiwiY2FwdHVyZSIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiJG1pbiIsIiRwdXNoIiwiTEVOR1RIIiwiU1VQUE9SVFNfWSIsIlNQTElUIiwiJHNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJoZWFkIiwibGFzdCIsImZsdXNoIiwicGFyZW50Iiwic3RhbmRhbG9uZSIsInRvZ2dsZSIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwic3Ryb25nIiwiYWRkIiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsIk5BVElWRV9XRUFLX01BUCIsIklTX0lFMTEiLCJBY3RpdmVYT2JqZWN0IiwiJFdlYWtNYXAiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsImluaXQiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiZ2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsInNldFByb3RvIiwiJGluY2x1ZGVzIiwiZmxhdE1hcCIsImZsYXR0ZW5JbnRvQXJyYXkiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJzb3VyY2VMZW4iLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsIm1hcEZuIiwicGFkU3RhcnQiLCIkcGFkIiwiV0VCS0lUX0JVRyIsInBhZEVuZCIsInRyaW1MZWZ0IiwidHJpbVJpZ2h0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCIkdmFsdWVzIiwib25GaW5hbGx5IiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsIiR0YXNrIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJFcnJvciIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJfX2F3YWl0IiwidW53cmFwcGVkIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIklTX1dSQVAiLCJ2aXJ0dWFsIiwiZ2FtZVN0YXRlIiwicGF1c2UiLCJjdXJyZW50RnBzIiwiZ2V0Q3VycmVudFJhdGUiLCJmcHMiLCJyZWZyZXNoUmF0ZSIsImZwc1JhbmdlIiwibWluRnBzIiwibWF4RnBzIiwiY3VycmVudFJhdGUiLCJpbmNyZWFzZVJhdGUiLCJkZWNyZWFzZVJhdGUiLCJnZXRDdXJyZW50RnBzIiwiZ2FtZUNvbnRyb2wiLCJrZXlib2FyZEtleXMiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwiYXJyb3dEb3duIiwiYXJyb3dVcCIsIm51bXBhZFN1YnRyYWN0IiwibnVtcGFkQWRkIiwia2V5TSIsImdldEVsZW1lbnQiLCJjbGFzc05hbWUiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwiaXNEb21FbGVtZW50IiwiRWxlbWVudCIsImdhbWVDb250YWluZXIiLCJjb250YWluZXIiLCJnYW1lU3BlZWRDb250YWluZXIiLCJkZWNyZWFzZVRvb2x0aXAiLCJpbmNyZWFzZVRvb2x0aXAiLCJmcHNDb250YWluZXIiLCJjYW52YXMiLCJzZXRJbm5lclRleHQiLCJhcHBlbmQiLCJpbm5lclRleHQiLCJzb3VuZFBsYXllciIsImF1ZGlvIiwiQXVkaW8iLCJhdWRpb011dGUiLCJwbGF5Iiwic291bmQiLCJoYW5kbGVLZXlQdXNoIiwiZGlyZWN0aW9uIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwicmlnaHQiLCJ1cCIsImRvd24iLCJzZXRQaXhlbCIsImltZ0RhdGEiLCJwaXhlbERhdGEiLCJnZXRMb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2UiLCJnZXRSR0JBcnIiLCJyZ2JTdHIiLCJmaWxsQm9yZGVyQXBwbGUiLCJjb2xvck5hbWUiLCJwaXhlbHMiLCJnZXRQaXhlbHMiLCJjb2xvcnNNYXAiLCJpbWdDb2xvcnMiLCJwaXhlbCIsInJnYiIsImciLCJnZXRSR0JLZXkiLCJmcmVxdWVuY3kiLCJpdGVtIiwicmdiQXJyIiwiQ2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJlbGVtZW50U2l6ZSIsImdldENvbnRleHQiLCJzZXRXaWR0aCIsInNldEhlaWdodCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiRm9vZCIsImRyYXdJbWFnZSIsImZvb2RJbWdEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwiZnJlZVBvc2l0aW9ucyIsInJhbmRvbUluZGV4Iiwic2V0UmFuZG9tUG9zaXRpb24iLCJJbWFnZSIsIlNuYWtlIiwiaW5pdGlhbFBvc2l0aW9uIiwic25ha2VJbWFnZSIsImJvZHkiLCJib2R5SW1hZ2UiLCJoZWFkSW1hZ2VzIiwidGFpbEltYWdlcyIsImJvZHlQYXJ0IiwiY3VycmVudERpcmVjdGlvbiIsIkJvb2xlYW4iLCJ1cFNpZGVIZWFkIiwiZG93blNpZGVIZWFkIiwicmlnaHRTaWRlSGVhZCIsImxlZnRTaWRlSGVhZCIsImRyYXdIZWFkQ29ycmVjdFNpZGUiLCJzbmFrZUJvZHkiLCJ0YWlsIiwiYmVmb3JlVGFpbCIsInJpZ2h0U2lkZVRhaWwiLCJsZWZ0U2lkZVRhaWwiLCJ1cFNpZGVUYWlsIiwiZG93blNpZGVUYWlsIiwiZHJhd1RhaWxDb3JyZWN0U2lkZSIsImNhbnZhc1dpZHRoIiwiY29ycmVjdFBvc2l0aW9uIiwic291bmRzU3JjIiwiZWF0Rm9vZFNyYyIsImFwcGxlIiwiYWN0aW9uc1NyYyIsInNuYWtlSW5jcmVhc2VkIiwic25ha2VEZWNyZWFzZWQiLCJHaWZ0IiwiYWN0aW9ucyIsInNuYWtlIiwic291bmRzUGxheWxpc3QiLCJyYW5kb21BY3Rpb24iLCJpbmNyZWFzZUxlbmd0aCIsImRlY3JlYXNlTGVuZ3RoIiwiSW1hZ2VXaXRoU3JjIiwiZ2V0R2FtZUZpZWxkT2JqZWN0cyIsImdpZnQiLCJhZGRpdGlvbmFsQ29sb3JzIiwiU2FkZGxlIiwiVG9sb3BlYSIsIlRyZW5keUdyZWVuIiwiU3BpY2UiLCJTdW5kYW5jZSIsIlllbGxvd01ldGFsIiwiUnVzdHlOYWlsIiwiU3RyYXciLCJZb3VyUGluayIsIlNvZnRQZWFjaCIsIk9yZWdvbiIsIlN3YW1wIiwiU3ljYW1vcmUiLCJQaWdlb25Qb3N0IiwiV2hpc2tleVNvdXIiLCJUb3dlckdyZXkiLCJUcmVlaG91c2UiLCJTdXNoaSIsIlBoYXJsYXAiLCJTdWdhckNhbmUiLCJZdWtvbkdvbGQiLCJQaXN0YWNoaW8iLCJQZXJzaWFuUGx1bSIsIkhhcnZlc3RHb2xkIiwiV2lsbG93QnJvb2siLCJIb25leUZsb3dlciIsIlNudWZmIiwiQXByaWNvdCIsIldhdGVyTGVhZiIsIlp1bXRob3IiLCJXaGl0ZVJvY2siLCJTaGlsbyIsIlJlZ2FsQmx1ZSIsIkFyYXBhd2EiLCJTcGFjZVNodXR0bGUiLCJDb3BwZXJSdXN0IiwiUm90aSIsIlNjcnViIiwiUGFyc2xleSIsIlR1cmJvIiwiU3Ryb21ib2xpIiwiT2lsIiwiVHdpbGlnaHRCbHVlIiwiV2lsZFJpY2UiLCJXaXN0ZXJpYSIsIkphcGFuZXNlTGF1cmVsIiwiUGlja2xlZEJsdWV3b29kIiwiU3V2YUdyZXkiLCJXZWRnZXdvb2QiLCJXaGlzcGVyIiwiQnVzaCIsIlp5ZGVjbyIsIlpvcmJhIiwiSGFsZkJha2VkIiwiVHVydGxlR3JlZW4iLCJaYW5haCIsIldhZmVyIiwiUm9vZlRlcnJhY290dGEiLCJNb3JvY2NvQnJvd24iLCJaZXVzIiwiU2FuZER1bmUiLCJQdWVibG8iLCJQbGFudGF0aW9uIiwiVmluUm91Z2UiLCJHb2JsaW4iLCJZZWxsb3dTZWEiLCJUZWFrV29vZEZpbmlzaCIsIldoaXRlTmVjdGFyIiwiVGltYmVyR3JlZW4iLCJTaGlyYXoiLCJUdW1ibGV3ZWVkIiwiVmVyZHVuR3JlZW4iLCJUaWFNYXJpYSIsIlR1cm1lcmljIiwiSmFndWFyIiwiU2FuRmVsaXgiLCJTcHJpbmdTdW4iLCJTaGFyayIsIlRvYmFnbyIsIlp1Y2NpbmkiLCJGaXJlZmx5IiwiVmlyaWRpYW5HcmVlbiIsIk1hbmR5c1BpbmsiLCJXb29kbGFuZCIsIldvb2RCYXJrIiwiUmV2b2x2ZXIiLCJXZXN0YXIiLCJCbHVlQmVsbCIsIldld2FrIiwiV29vZHNtb2tlIiwiT3hmb3JkQmx1ZSIsIkphY2tzb25zUHVycGxlIiwiWmlnZ3VyYXQiLCJMaW1hIiwiR29zc2lwIiwiUm9sbGluZ1N0b25lIiwiRm9yZXN0R3JlZW4iLCJXZWxsUmVhZCIsIlJhbmdvb25HcmVlbiIsIlplc3QiLCJab21iaWUiLCJNdWxiZXJyeSIsIlBpbmVHbGFkZSIsIlNlYUdyZWVuIiwiU2lyZW4iLCJIaXBwaWVQaW5rIiwiU3VibWFyaW5lIiwiVHVuZG9yYSIsIk9uYWhhdSIsIlN1cmYiLCJWZXJkaWdyaXMiLCJXb29kYnVybiIsIlZlc3V2aXVzIiwiU2FuZHJpZnQiLCJUb21UaHVtYiIsIldpbmVCZXJyeSIsIlRoYXRjaEdyZWVuIiwiVG9ueXNQaW5rIiwiV2VzdENvYXN0IiwiVGFsbG93IiwiV29vZHlCcm93biIsIkdlbm9hIiwiV2FsbnV0IiwiVGFuYSIsIldpbGxvd0dyb3ZlIiwiV2hlYXRmaWVsZCIsIlNjYXJwYUZsb3ciLCJUYXBlc3RyeSIsIkxpbWVhZGUiLCJTb2xpZFBpbmsiLCJXaW50ZXJIYXplbCIsIlJvdWdlIiwiVGliZXIiLCJUcmVuZHlQaW5rIiwiV2hpdGVMaW5lbiIsIlNwZWN0cmEiLCJXZXN0ZXJuUmVkIiwiVHJpbmlkYWQiLCJQYWR1YSIsIlBlcnNpYW5SZWQiLCJQZXBwZXJtaW50IiwiU2FpbCIsIlZhbmlsbGEiLCJUZVBhcGFHcmVlbiIsIlRvc2NhIiwiVGF4QnJlYWsiLCJWYWxlbnRpbm8iLCJUdXNjYW55IiwiUGluZVRyZWUiLCJNb250ZUNhcmxvIiwiU2FnZSIsIll1bWEiLCJUaHVuZGVyIiwiU3dlZXRQaW5rIiwiU2FyYXRvZ2EiLCJQZXJ1VGFuIiwiU3dlZXRDb3JuIiwiVHJ1ZVYiLCJUYW5nZXJpbmUiLCJTcHJpbmdSYWluIiwiV29vZHJ1c2giLCJTdGFyRHVzdCIsIkNvcHBlckNhbnlvbiIsIlNtb2t5IiwiT3JhbmdlUm91Z2h5IiwiUGxhbnRlciIsIlR3aW5lIiwiV2F0ZXJjb3Vyc2UiLCJUYWJhc2NvIiwiV2lsZFdpbGxvdyIsIlRoYXRjaCIsIkxvdWxvdSIsIlhhbmFkdSIsIlR1cmtpc2hSb3NlIiwiVmVudXMiLCJNb3J0YXIiLCJSZWRPeGlkZSIsIlRyYWRld2luZCIsIlNtb2tleUFzaCIsIkxpbWVkU3BydWNlIiwiU2lsdmVyVHJlZSIsIldpc3RmdWwiLCJSdXNzZXR0IiwiVmlraW5nIiwiUm9wZSIsIlBpbmVDb25lIiwiVnVsY2FuIiwiTGlseSIsIlZpc3RhQmx1ZSIsIk1vc2FpYyIsIkVtaW5lbmNlIiwiU3BpY3lQaW5rIiwiVGFyYSIsIkV0ZXJuaXR5IiwiVGFzbWFuIiwiU3ByYXkiLCJUaXRhbldoaXRlIiwiVGF1cGVHcmV5IiwiVGF3bnlQb3J0IiwiU3B1blBlYXJsIiwiVmFsZW5jaWEiLCJQYXZsb3ZhIiwiVmlvbGEiLCJGb3VudGFpbkJsdWUiLCJTZWFndWxsIiwiUGlua1N3YW4iLCJQYWxtTGVhZiIsIlZpZGFMb2NhIiwiUG9yY2VsYWluIiwiVmVuZXRpYW5SZWQiLCJHcmFubnlTbWl0aCIsIlZpb2xldCIsIkdyZWVuUGVhIiwiVGFuZ2Fyb2EiLCJTYW5NYXJpbm8iLCJUcm9waWNhbEJsdWUiLCJUb2FzdCIsIlRhbWFyaW5kIiwiU2FoYXJhIiwiVmFsaGFsbGEiLCJLYWJ1bCIsIlZvb2RvbyIsIlJlZFN0YWdlIiwiV2Fpa2F3YUdyZXkiLCJXaWxsaWFtIiwiUGFuZGEiLCJKYW1iYWxheWEiLCJaaXJjb24iLCJXYXNhYmkiLCJOaWdodFJpZGVyIiwiV2Fpb3VydSIsIlN1bW1lckdyZWVuIiwiTHVja3lQb2ludCIsIlRvdGVtUG9sZSIsIk1leGljYW5SZWQiLCJNYWxsYXJkIiwiU3RUcm9wYXoiLCJUaHVuZGVyYmlyZCIsIlRhY2hhIiwiU3RyaWtlbWFzdGVyIiwiTmFuZG9yIiwiVG9yeUJsdWUiLCJUdXNzb2NrIiwiWmFtYmV6aSIsIlBhdGluYSIsIlBvd2RlckJsdWUiLCJTd2lybCIsIlNwcmluZ0dyZWVuIiwiU3RpbGV0dG8iLCJXaGl0ZUljZSIsIlRhcmF3ZXJhIiwiVGhpc3RsZSIsIlRvcmVhQmF5IiwiZ2V0Q29sb3JzTWFwIiwiY29sb3JzIiwic2V0TG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInVwbG9hZEFsbENvbG9ycyIsImZldGNoIiwianNvbiIsIm5ld0dhbWUiLCJvcHRpb25zIiwibWFpbk1lbnUiLCJidXR0b25zIiwiYnV0dG9uIiwiYnV0dG9uSGFuZGxlciIsIm1vdW50IiwiaW5pdGlhbGl6ZSIsImdhbWVGaWVsZE9iamVjdHMiLCJjcmVhdGVTbmFrZSIsImdhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmaWVsZFBvc2l0aW9ucyIsImZpZWxkUG9zaXRpb24iLCJnZXRGcmVlUG9zaXRpb25zIiwiZ2FtZUZpZWxkT2JqZWN0IiwiZmxhdCIsImdldEdhbWVPYmplY3RzUG9zaXRpb25zIiwicm93cyIsInJvd0VsZW1lbnQiLCJyb3dJbmRleCIsImdldEZpZWxkUG9zaXRpb25zIiwiaW50ZXJhY3RpdmVHYW1lT2JqZWN0cyIsImdldEludGVyYWN0aXZlR2FtZU9iamVjdHMiLCJjb2xsaXNpb25PYmplY3QiLCJoZWFkUG9zaXRpb24iLCJoZWFkUG9zaXRpb25zS2V5IiwiYWNjdW11bGF0b3IiLCJjdXJyZW50UG9zaXRpb24iLCJpbnRlcmFjdGl2ZUdhbWVPYmplY3QiLCJnZXRDb2xsaXNpb25PYmplY3QiLCJkcmF3IiwibW92ZSIsIm1ha2VSYW5kb21BY3Rpb25XaXRoIiwic3Bhd24iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JB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QVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLElBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVB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LGNBQWUsU0FDZixXQUFZLGFBQ1osV0FBWSxjQUNaLGNBQWUsV0FDZixjQUFlLFdBQ2YsUUFBUyxTQUNULFdBQVksV0FDWixjQUFlLFlBQ2YsV0FBWSxRQUNaLFdBQVksU0FDWixRQUFTLFVBQ1QsV0FBWSxVQUNaLGNBQWUsZ0JBQ2YsY0FBZSxhQUNmLFdBQVksV0FDWixXQUFZLFdBQ1osV0FBWSxXQUNaLGNBQWUsU0FDZixXQUFZLFdBQ1osY0FBZSxRQUNmLFdBQVksWUFDWixXQUFZLGFBQ1osV0FBWSxpQkFDWixjQUFlLFdBQ2YsY0FBZSxPQUNmLGNBQWUsU0FDZixjQUFlLGVBQ2YsV0FBWSxjQUNaLGNBQWUsV0FDZixXQUFZLGVBQ1osY0FBZSxPQUNmLGNBQWUsU0FDZixXQUFZLFdBQ1osY0FBZSxZQUNmLFFBQVMsV0FDVCxjQUFlLFFBQ2YsY0FBZSxhQUNmLGNBQWUsWUFDZixXQUFZLFVBQ1osY0FBZSxTQUNmLGNBQWUsT0FDZixXQUFZLFlBQ1osV0FBWSxXQUNaLGNBQWUsV0FDZixjQUFlLFdBQ2YsV0FBWSxXQUNaLFdBQVksWUFDWixXQUFZLGNBQ1osY0FBZSxZQUNmLFdBQVksWUFDWixjQUFlLFNBQ2YsV0FBWSxhQUNaLFdBQVksUUFDWixjQUFlLFNBQ2YsY0FBZSxPQUNmLGNBQWUsY0FDZixjQUFlLGFBQ2YsV0FBWSxhQUNaLGNBQWUsV0FDZixjQUFlLFVBQ2YsY0FBZSxZQUNmLGNBQWUsY0FDZixjQUFlLFFBQ2YsUUFBUyxRQUNULGNBQWUsYUFDZixjQUFlLGFBQ2YsV0FBWSxVQUNaLGNBQWUsYUFDZixjQUFlLFdBQ2YsY0FBZSxRQUNmLFdBQVksYUFDWixjQUFlLGFBQ2YsY0FBZSxPQUNmLGNBQWUsVUFDZixXQUFZLGNBQ1osY0FBZSxRQUNmLFdBQVksV0FDWixXQUFZLFlBQ1osY0FBZSxVQUNmLFdBQVksV0FDWixjQUFlLGFBQ2YsY0FBZSxPQUNmLGNBQWUsT0FDZixXQUFZLFVBQ1osY0FBZSxZQUNmLFdBQVksV0FDWixjQUFlLFVBQ2YsY0FBZSxZQUNmLGNBQWUsUUFDZixjQUFlLFlBQ2YsY0FBZSxhQUNmLFdBQVksV0FDWixjQUFlLFdBQ2YsY0FBZSxlQUNmLFdBQVksUUFDWixjQUFlLGVBQ2YsV0FBWSxVQUNaLGNBQWUsUUFDZixRQUFTLGNBQ1QsY0FBZSxVQUNmLGNBQWUsYUFDZixjQUFlLFNBQ2YsV0FBWSxTQUNaLGNBQWUsU0FDZixjQUFlLGNBQ2YsY0FBZSxRQUNmLFdBQVksU0FDWixjQUFlLFdBQ2YsV0FBWSxZQUNaLFdBQVksWUFDWixXQUFZLGNBQ1osY0FBZSxhQUNmLGNBQWUsVUFDZixjQUFlLFVBQ2YsY0FBZSxTQUNmLGNBQWUsT0FDZixjQUFlLFdBQ2YsV0FBWSxTQUNaLGNBQWUsT0FDZixjQUFlLFlBQ2YsV0FBWSxTQUNaLGNBQWUsV0FDZixjQUFlLFlBQ2YsY0FBZSxPQUNmLFdBQVksV0FDWixjQUFlLFNBQ2YsY0FBZSxRQUNmLGNBQWUsYUFDZixjQUFlLFlBQ2YsY0FBZSxZQUNmLGNBQWUsWUFDZixjQUFlLFdBQ2YsY0FBZSxVQUNmLGNBQWUsUUFDZixXQUFZLGVBQ1osY0FBZSxVQUNmLGNBQWUsV0FDZixXQUFZLFdBQ1osV0FBWSxXQUNaLGNBQWUsWUFDZixjQUFlLGNBQ2YsY0FBZSxjQUNmLFdBQVksU0FDWixXQUFZLFdBQ1osUUFBUyxXQUNULFdBQVksWUFDWixjQUFlLGVBQ2YsY0FBZSxRQUNmLFdBQVksV0FDWixjQUFlLFNBQ2YsV0FBWSxXQUNaLFdBQVksUUFDWixXQUFZLFNBQ1osY0FBZSxXQUNmLFdBQVksY0FDWixXQUFZLFVBQ1osV0FBWSxRQUNaLFdBQVksWUFDWixjQUFlLFNBQ2YsY0FBZSxTQUNmLFdBQVksYUFDWixXQUFZLFVBQ1osY0FBZSxjQUNmLFdBQVksYUFDWixjQUFlLFlBQ2YsY0FBZSxhQUNmLFdBQVksVUFDWixXQUFZLFdBQ1osY0FBZSxjQUNmLGNBQWUsUUFDZixjQUFlLGVBQ2YsV0FBWSxTQUNaLFdBQVksV0FDWixjQUFlLFVBQ2YsY0FBZSxVQUNmLFdBQVksU0FDWixjQUFlLGFBQ2YsY0FBZSxRQUNmLFdBQVksY0FDWixjQUFlLFdB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Q1hDLFdBQVksY0FDWkMsU0FBVSxXQUNWQyxTQUFVLGNBQ1ZDLGFBQWMsY0FDZEMsTUFBTyxXQUNQQyxhQUFjLGNBQ2RDLFFBQVMsV0FDVEMsTUFBTyxjQUNQQyxZQUFhLFFBQ2JDLFFBQVMsY0FDVEMsV0FBWSxjQUNaQyxPQUFRLGNBQ1JDLE9BQVEsV0FDUkMsT0FBUSxjQUNSQyxZQUFhLGNBQ2JDLE1BQU8sY0FDUEMsT0FBUSxXQUNSQyxTQUFVLGNBQ1ZDLFVBQVcsV0FDWEMsVUFBVyxXQUNYQyxZQUFhLFdBQ2JDLFdBQVksY0FDWkMsUUFBUyxjQUNUQyxRQUFTLGNBQ1RDLE9BQVEsY0FDUkMsS0FBTSxjQUNOQyxTQUFVLGNBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxjQUNOQyxVQUFXLGNBQ1hDLE9BQVEsV0FDUkMsU0FBVSxjQUNWQyxVQUFXLGNBQ1hDLEtBQU0sY0FDTkMsU0FBVSxXQUNWQyxPQUFRLGNBQ1JDLE1BQU8sY0FDUEMsV0FBWSxjQUNaQyxVQUFXLGNBQ1hDLFVBQVcsY0FDWEMsVUFBVyxjQUNYQyxTQUFVLGNBQ1ZDLFFBQVMsY0FDVEMsTUFBTyxjQUNQQyxhQUFjLFdBQ2RDLFFBQVMsY0FDVEMsU0FBVSxjQUNWQyxTQUFVLFdBQ1ZDLFNBQVUsV0FDVkMsVUFBVyxjQUNYQyxZQUFhLGNBQ2JDLFlBQWEsY0FDYkMsT0FBUSxXQUNSQyxTQUFVLFdBQ1ZDLFNBQVUsUUFDVkMsVUFBVyxXQUNYQyxhQUFjLGNBQ2RDLE1BQU8sY0FDUEMsU0FBVSxXQUNWQyxPQUFRLGNBQ1JDLFNBQVUsV0FDVkMsTUFBTyxXQUNQQyxPQUFRLFdBQ1JDLFNBQVUsY0FDVkMsWUFBYSxXQUNiQyxRQUFTLFdBQ1RDLE1BQU8sV0FDUEMsVUFBVyxXQUNYQyxPQUFRLGNBQ1JDLE9BQVEsY0FDUkMsV0FBWSxXQUNaQyxRQUFTLFdBQ1RDLFlBQWEsY0FDYkMsV0FBWSxXQUNaQyxVQUFXLGNBQ1hDLFdBQVksY0FDWkMsUUFBUyxXQUNUQyxTQUFVLFdBQ1ZDLFlBQWEsY0FDYkMsTUFBTyxjQUNQQyxhQUFjLGNBQ2RDLE9BQVEs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QUMrQmlVLEdBT3pELEdBTEE5WCxFQUFPdVksT0FDUGxULEVBQU1rVCxPQUNOclMsRUFBS3FTLE9BQ0w1UyxFQUFNNFMsT0FDTjVTLEVBQU02UyxLQUFLaFcsR0FDUHdWLEVBQWlCLENBQ2pCLEdBQUlBLGFBQTJCL1UsRUFBTSxLQUN6Qm5yQyxFQUFTa2dELEVBQVRsZ0QsS0FDQXN0QyxFQUFlRCxFQUFmQyxXQUVSTyxFQUFNRyxpQkFDTjFGLEVBQVlJLEtBQUs0RSxFQUFXdHRDLElBRTVCa2dELGFBQTJCdlMsR0FDM0JTLEVBQUt1UyxxQkFBcUI5UyxHQUU5QnFTLEVBQWdCVSxNQUFNcFYsS0FRbEM0VCIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTIxKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKE8sIGtleSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi4xMScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4vbm9Db25mbGljdFwiKTtcblxudmFyIF9nbG9iYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmlmIChfZ2xvYmFsW1wiZGVmYXVsdFwiXS5fYmFiZWxQb2x5ZmlsbCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pIHtcbiAgY29uc29sZS53YXJuKFwiQGJhYmVsL3BvbHlmaWxsIGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZSBvbiB0aGlzIHBhZ2UuIFRoaXMgaXMgcHJvYmFibHkgbm90IGRlc2lyYWJsZS9pbnRlbmRlZCBcIiArIFwiYW5kIG1heSBoYXZlIGNvbnNlcXVlbmNlcyBpZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHBvbHlmaWxscyBhcmUgYXBwbGllZCBzZXF1ZW50aWFsbHkuIFwiICsgXCJJZiB5b3UgZG8gbmVlZCB0byBsb2FkIHRoZSBwb2x5ZmlsbCBtb3JlIHRoYW4gb25jZSwgdXNlIEBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0IFwiICsgXCJpbnN0ZWFkIHRvIGJ5cGFzcyB0aGUgd2FybmluZy5cIik7XG59XG5cbl9nbG9iYWxbXCJkZWZhdWx0XCJdLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTsiLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvZXM2XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vYXJyYXkvZmxhdC1tYXBcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy9wYWQtc3RhcnRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy9wYWQtZW5kXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3JcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZW50cmllc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy93ZWJcIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRHT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICEhJEdPUFMuZjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgJEdPUFMuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSAkZmFpbHMoZnVuY3Rpb24gKCkgeyAkR09QUy5mKDEpOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBGQUlMU19PTl9QUklNSVRJVkVTLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiAkR09QUy5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHNlYXJjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciAkU1BMSVQgPSAnc3BsaXQnO1xudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbnZhciBNQVhfVUlOVDMyID0gMHhmZmZmZmZmZjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiAkc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5pbmNsdWRlcztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZmxhdE1hcDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZFN0YXJ0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZEVuZDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1MZWZ0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbVJpZ2h0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnZhbHVlcztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5lbnRyaWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2VbJ2ZpbmFsbHknXTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuZ2xvYmFsO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJjb25zdCBnYW1lU3RhdGUgPSB7XHJcbiAgICBwYXVzZTogZmFsc2UsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBnYW1lU3RhdGU7XHJcbiIsImxldCBjdXJyZW50RnBzID0gNTtcclxuY29uc3QgbWlsbGlTZWNvbmQgPSAxMDAwO1xyXG5jb25zdCBnZXRDdXJyZW50UmF0ZSA9IChmcHMpID0+IE1hdGguZmxvb3IobWlsbGlTZWNvbmQgLyBmcHMpO1xyXG5cclxuY29uc3QgcmVmcmVzaFJhdGUgPSB7XHJcbiAgICBmcHNSYW5nZToge1xyXG4gICAgICAgIG1pbkZwczogMSxcclxuICAgICAgICBtYXhGcHM6IDYwLFxyXG4gICAgfSxcclxuICAgIGN1cnJlbnRSYXRlOiBnZXRDdXJyZW50UmF0ZShjdXJyZW50RnBzKSxcclxuICAgIGluY3JlYXNlUmF0ZSgpIHtcclxuICAgICAgICBjdXJyZW50RnBzICs9IDE7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UmF0ZSA9IGdldEN1cnJlbnRSYXRlKGN1cnJlbnRGcHMpO1xyXG4gICAgfSxcclxuICAgIGRlY3JlYXNlUmF0ZSgpIHtcclxuICAgICAgICBjdXJyZW50RnBzIC09IDE7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UmF0ZSA9IGdldEN1cnJlbnRSYXRlKGN1cnJlbnRGcHMpO1xyXG4gICAgfSxcclxuICAgIGdldEN1cnJlbnRGcHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRGcHM7XHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcmVmcmVzaFJhdGU7XHJcbiIsImNvbnN0IGdhbWVDb250cm9sID0ge1xyXG4gICAga2V5Ym9hcmRLZXlzOiB7XHJcbiAgICAgICAgYXJyb3dMZWZ0OiAnQXJyb3dMZWZ0JyxcclxuICAgICAgICBhcnJvd1JpZ2h0OiAnQXJyb3dSaWdodCcsXHJcbiAgICAgICAgYXJyb3dEb3duOiAnQXJyb3dEb3duJyxcclxuICAgICAgICBhcnJvd1VwOiAnQXJyb3dVcCcsXHJcbiAgICAgICAgc3BhY2U6ICdTcGFjZScsXHJcbiAgICAgICAgbnVtcGFkU3VidHJhY3Q6ICdOdW1wYWRTdWJ0cmFjdCcsXHJcbiAgICAgICAgbnVtcGFkQWRkOiAnTnVtcGFkQWRkJyxcclxuICAgICAgICBrZXlNOiAnS2V5TScsXHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2FtZUNvbnRyb2w7XHJcbiIsImNvbnN0IGdldEVsZW1lbnQgPSAoY2xhc3NOYW1lKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNsYXNzTmFtZSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBnZXRFbGVtZW50O1xyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZywgY2xhc3NOYW1lKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xyXG5cclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG5cclxuICAgIHJldHVybiBlbGVtZW50O1xyXG59XHJcbiIsImNvbnN0IGlzRG9tRWxlbWVudCA9IChvYmopID0+IG9iaiBpbnN0YW5jZW9mIEVsZW1lbnQ7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpc0RvbUVsZW1lbnQ7XHJcbiIsImltcG9ydCBnZXRFbGVtZW50IGZyb20gJy4uL3V0aWxzL2dldEVsZW1lbnQnO1xyXG5pbXBvcnQgY3JlYXRlRWxlbWVudCBmcm9tICcuLi91dGlscy9jcmVhdGVFbGVtZW50JztcclxuaW1wb3J0IGlzRG9tRWxlbWVudCBmcm9tICcuLi91dGlscy9pc0RvbUVsZW1lbnQnO1xyXG5cclxuY2xhc3MgR2FtZUNvbnRhaW5lciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGdldEVsZW1lbnQoJy5jb250YWluZXInKTtcclxuICAgICAgICB0aGlzLmdhbWVDb250YWluZXIgPSBnZXRFbGVtZW50KCcuZ2FtZUNvbnRhaW5lcicpXHJcbiAgICAgICAgICAgID8gZ2V0RWxlbWVudCgnLmdhbWVDb250YWluZXInKVxyXG4gICAgICAgICAgICA6IGNyZWF0ZUVsZW1lbnQoJ2RpdicsICdnYW1lQ29udGFpbmVyJyk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3BlZWRDb250YWluZXIgPSBnZXRFbGVtZW50KCcuZ2FtZVNwZWVkQ29udGFpbmVyJylcclxuICAgICAgICAgICAgPyBnZXRFbGVtZW50KCcuZ2FtZVNwZWVkQ29udGFpbmVyJylcclxuICAgICAgICAgICAgOiBjcmVhdGVFbGVtZW50KCdkaXYnLCAnZ2FtZVNwZWVkQ29udGFpbmVyJyk7XHJcbiAgICAgICAgdGhpcy5kZWNyZWFzZVRvb2x0aXAgPSBnZXRFbGVtZW50KCcuZGVjcmVhc2VUb29sdGlwJylcclxuICAgICAgICAgICAgPyBnZXRFbGVtZW50KCcuZGVjcmVhc2VUb29sdGlwJylcclxuICAgICAgICAgICAgOiBjcmVhdGVFbGVtZW50KCdkaXYnLCAnZGVjcmVhc2VUb29sdGlwJyk7XHJcbiAgICAgICAgdGhpcy5pbmNyZWFzZVRvb2x0aXAgPSBnZXRFbGVtZW50KCcuZGVjcmVhc2VUb29sdGlwJylcclxuICAgICAgICAgICAgPyBnZXRFbGVtZW50KCcuaW5jcmVhc2VUb29sdGlwJylcclxuICAgICAgICAgICAgOiBjcmVhdGVFbGVtZW50KCdkaXYnLCAnaW5jcmVhc2VUb29sdGlwJyk7XHJcbiAgICAgICAgdGhpcy5mcHNDb250YWluZXIgPSBnZXRFbGVtZW50KCcuZnBzQ29udGFpbmVyJylcclxuICAgICAgICAgICAgPyBnZXRFbGVtZW50KCcuZnBzQ29udGFpbmVyJylcclxuICAgICAgICAgICAgOiBjcmVhdGVFbGVtZW50KCdkaXYnLCAnZnBzQ29udGFpbmVyJyk7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBnZXRFbGVtZW50KCcuZ2FtZUZpZWxkJykgPyBnZXRFbGVtZW50KCcuZ2FtZUZpZWxkJykgOiBjcmVhdGVFbGVtZW50KCdjYW52YXMnLCAnZ2FtZUZpZWxkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICB0aGlzLnNldElubmVyVGV4dCh0aGlzLmRlY3JlYXNlVG9vbHRpcCwgJ3ByZXNzIC0gZm9yIGRlY3JlYXNlVG9vbHRpcCBmcHMnKTtcclxuICAgICAgICB0aGlzLnNldElubmVyVGV4dCh0aGlzLmluY3JlYXNlVG9vbHRpcCwgJ3ByZXNzICsgZm9yIGluY3JlYXNlVG9vbHRpcCBmcHMnKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VudCgpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQodGhpcy5nYW1lQ29udGFpbmVyKTtcclxuICAgICAgICB0aGlzLmdhbWVDb250YWluZXIuYXBwZW5kKHRoaXMuZ2FtZVNwZWVkQ29udGFpbmVyLCB0aGlzLmNhbnZhcyk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3BlZWRDb250YWluZXIuYXBwZW5kKHRoaXMuZGVjcmVhc2VUb29sdGlwLCB0aGlzLmZwc0NvbnRhaW5lciwgdGhpcy5pbmNyZWFzZVRvb2x0aXApO1xyXG4gICAgfVxyXG5cclxuICAgIHNldElubmVyVGV4dChlbGVtZW50LCBpbm5lclRleHQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzW2VsZW1lbnRdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzW2VsZW1lbnRdLmlubmVyVGV4dCA9IGlubmVyVGV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNEb21FbGVtZW50KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJUZXh0ID0gaW5uZXJUZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgZ2FtZUNvbnRhaW5lciA9IG5ldyBHYW1lQ29udGFpbmVyKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBnYW1lQ29udGFpbmVyO1xyXG4iLCJjb25zdCBzb3VuZFBsYXllciA9IHtcclxuICAgIGF1ZGlvOiBuZXcgQXVkaW8oKSxcclxuICAgIGF1ZGlvTXV0ZTogZmFsc2UsXHJcbiAgICBwbGF5KHNvdW5kKSB7XHJcbiAgICAgICAgdGhpcy5hdWRpby5zcmMgPSBzb3VuZDtcclxuICAgICAgICBpZiAoIXRoaXMuYXVkaW9NdXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW8ucGxheSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzb3VuZFBsYXllcjtcclxuIiwiaW1wb3J0IGdhbWVTdGF0ZSBmcm9tICcuLi8uLi9nYW1lL2dhbWVTdGF0ZS9nYW1lU3RhdGUnO1xyXG5pbXBvcnQgcmVmcmVzaFJhdGUgZnJvbSAnLi4vLi4vZ2FtZS9vcHRpb25zL3JlZnJlc2hSYXRlL3JlZnJlc2hSYXRlJztcclxuaW1wb3J0IGdhbWVDb250cm9sIGZyb20gJy4uLy4uL2dhbWUvb3B0aW9ucy9nYW1lQ29udHJvbC9nYW1lQ29udHJvbCc7XHJcbmltcG9ydCBnYW1lQ29udGFpbmVyIGZyb20gJy4uLy4uL0RPTS9HYW1lQ29udGFpbmVyL0dhbWVDb250YWluZXInO1xyXG5pbXBvcnQgc291bmRQbGF5ZXIgZnJvbSAnLi4vLi4vc291bmRQbGF5ZXIvc291bmRQbGF5ZXInO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlS2V5UHVzaChkaXJlY3Rpb24sIHNpemUsIGV2ZW50KSB7XHJcbiAgICBjb25zdCBrZXlDb2RlID0gZXZlbnQuY29kZTtcclxuICAgIGNvbnN0IHsga2V5Ym9hcmRLZXlzIH0gPSBnYW1lQ29udHJvbDtcclxuICAgIGNvbnN0IHsgYXJyb3dMZWZ0LCBhcnJvd1JpZ2h0LCBhcnJvd0Rvd24sIGFycm93VXAsIHNwYWNlLCBudW1wYWRTdWJ0cmFjdCwgbnVtcGFkQWRkLCBrZXlNIH0gPSBrZXlib2FyZEtleXM7XHJcbiAgICBjb25zdCB7IGZwc1JhbmdlLCBnZXRDdXJyZW50RnBzIH0gPSByZWZyZXNoUmF0ZTtcclxuICAgIGNvbnN0IHsgbWluRnBzLCBtYXhGcHMgfSA9IGZwc1JhbmdlO1xyXG5cclxuICAgIHN3aXRjaCAoa2V5Q29kZSkge1xyXG4gICAgICAgIGNhc2UgYXJyb3dMZWZ0OiB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBkaXJlY3Rpb24ubGVmdCA9IHRydWU7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbi5yaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24udXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgZGlyZWN0aW9uLmRvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgYXJyb3dSaWdodDoge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgZGlyZWN0aW9uLmxlZnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZGlyZWN0aW9uLnJpZ2h0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgZGlyZWN0aW9uLnVwID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbi5kb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIGFycm93VXA6IHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbi5sZWZ0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbi5yaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24udXAgPSB0cnVlO1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24uZG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBhcnJvd0Rvd246IHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbi5sZWZ0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbi5yaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24udXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgZGlyZWN0aW9uLmRvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBzcGFjZToge1xyXG4gICAgICAgICAgICBnYW1lU3RhdGUucGF1c2UgPyAoZ2FtZVN0YXRlLnBhdXNlID0gZmFsc2UpIDogKGdhbWVTdGF0ZS5wYXVzZSA9IHRydWUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBudW1wYWRBZGQ6IHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEZwcyA9IGdldEN1cnJlbnRGcHMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50RnBzICE9PSBtYXhGcHMpIHtcclxuICAgICAgICAgICAgICAgIHJlZnJlc2hSYXRlLmluY3JlYXNlUmF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdhbWVDb250YWluZXIuc2V0SW5uZXJUZXh0KCdmcHNDb250YWluZXInLCBgRlBTIC0gJHtyZWZyZXNoUmF0ZS5nZXRDdXJyZW50RnBzKCl9YCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIG51bXBhZFN1YnRyYWN0OiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGcHMgPSBnZXRDdXJyZW50RnBzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY3VycmVudEZwcyAhPT0gbWluRnBzKSB7XHJcbiAgICAgICAgICAgICAgICByZWZyZXNoUmF0ZS5kZWNyZWFzZVJhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2FtZUNvbnRhaW5lci5zZXRJbm5lclRleHQoJ2Zwc0NvbnRhaW5lcicsIGBGUFMgLSAke3JlZnJlc2hSYXRlLmdldEN1cnJlbnRGcHMoKX1gKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2Uga2V5TToge1xyXG4gICAgICAgICAgICBzb3VuZFBsYXllci5hdWRpb011dGUgPyAoc291bmRQbGF5ZXIuYXVkaW9NdXRlID0gZmFsc2UpIDogKHNvdW5kUGxheWVyLmF1ZGlvTXV0ZSA9IHRydWUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGhhbmRsZUtleVB1c2g7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFBpeGVsKGltZ0RhdGEsIGluZGV4LCBwaXhlbERhdGEpIHtcclxuICAgIGltZ0RhdGEuZGF0YS5zZXQocGl4ZWxEYXRhLCBpbmRleCAqIDQpO1xyXG59XHJcbiIsImNvbnN0IGdldExvY2FsU3RvcmFnZSA9IChrZXkpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcblxyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdldExvY2FsU3RvcmFnZTtcclxuIiwiaW1wb3J0IGdldFBpeGVscyBmcm9tICcuL3BpeGVsSU8vcGl4ZWxNYW5pcHVsYXRpb24vZ2V0UGl4ZWxzLmpzJztcclxuaW1wb3J0IHNldFBpeGVsIGZyb20gJy4vcGl4ZWxJTy9waXhlbE1hbmlwdWxhdGlvbi9zZXRQaXhlbC5qcyc7XHJcbmltcG9ydCBnZXRDb2xvcnNPZlBpeGVscyBmcm9tICcuL3BpeGVsSU8vZ2V0Q29sb3JzT2ZQaXhlbHMuanMnO1xyXG5pbXBvcnQgZ2V0TG9jYWxTdG9yYWdlIGZyb20gJy4vbG9jYWxTdG9yYWdlL2dldExvY2FsU3RvcmFnZS5qcyc7XHJcblxyXG5mdW5jdGlvbiBnZXRSR0JLZXkocGl4ZWwpIHtcclxuICAgIGNvbnN0IHIgPSBNYXRoLnJvdW5kKChwaXhlbFswXSAvIDEwKSAqIDEwKTtcclxuICAgIGNvbnN0IGcgPSBNYXRoLnJvdW5kKChwaXhlbFsxXSAvIDEwKSAqIDEwKTtcclxuICAgIGNvbnN0IGIgPSBNYXRoLnJvdW5kKChwaXhlbFsyXSAvIDEwKSAqIDEwKTtcclxuXHJcbiAgICByZXR1cm4gYCR7cn0sJHtnfSwke2J9YDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UkdCQXJyKHJnYlN0cikge1xyXG4gICAgY29uc3QgW3IsIGcsIGJdID0gcmdiU3RyLnNwbGl0KCcsJyk7XHJcblxyXG4gICAgcmV0dXJuIFtyLCBnLCBiXTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmlsbEJvcmRlckFwcGxlKGNvbG9yTmFtZSwgaW1nRGF0YSkge1xyXG4gICAgY29uc3QgcGl4ZWxzID0gZ2V0UGl4ZWxzKGltZ0RhdGEpO1xyXG4gICAgY29uc3QgY29sb3JzTWFwID0gZ2V0TG9jYWxTdG9yYWdlKCdjb2xvcnNNYXAnKTtcclxuICAgIGNvbnN0IGltZ0NvbG9ycyA9IHBpeGVscy5tYXAoKHBpeGVsKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmdiID0gZ2V0UkdCS2V5KHBpeGVsKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbG9yc01hcFtyZ2JdO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgY29sb3JzT2ZQaXhlbHMgPSBnZXRDb2xvcnNPZlBpeGVscyhpbWdDb2xvcnMpO1xyXG5cclxuICAgIGNvbG9yc09mUGl4ZWxzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgaWYgKGl0ZW0uY29sb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCByZ2JBcnIgPSBnZXRSR0JBcnIoY29sb3JzTWFwW2NvbG9yTmFtZV0pO1xyXG5cclxuICAgICAgICAgICAgc2V0UGl4ZWwoaW1nRGF0YSwgaW5kZXgsIHJnYkFycik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2V0UGl4ZWwoaW1nRGF0YSwgaW5kZXgsIGdldFJHQkFycihjb2xvcnNNYXBbJ2JsYWNrJ10pKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb2xvcnNPZlBpeGVscyhsaXN0KSB7XHJcbiAgICBjb25zdCBtYXAgPSB7fTtcclxuXHJcbiAgICByZXR1cm4gbGlzdC5tYXAoKGNvbG9yKSA9PiB7XHJcbiAgICAgICAgaWYgKG1hcFtjb2xvcl0pIHtcclxuICAgICAgICAgICAgbWFwW2NvbG9yXS5mcmVxdWVuY3kgKz0gMTtcclxuICAgICAgICAgICAgcmV0dXJuIG1hcFtjb2xvcl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1hcFtjb2xvcl0gPSB7IGNvbG9yLCBmcmVxdWVuY3k6IDEgfTtcclxuICAgICAgICByZXR1cm4gbWFwW2NvbG9yXTtcclxuICAgIH0pO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBpeGVscyhpbWdEYXRhKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuXHJcbiAgICBpbWdEYXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICBpZiAoaW5kZXggJSA0ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGltZ0RhdGEuZGF0YS5zdWJhcnJheShpbmRleCwgaW5kZXggKyA0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4iLCJjbGFzcyBDYW52YXMge1xyXG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgYmFja2dyb3VuZENvbG9yKSB7XHJcbiAgICAgICAgaWYgKENhbnZhcy5pbnN0YW5jZSBpbnN0YW5jZW9mIENhbnZhcykge1xyXG4gICAgICAgICAgICByZXR1cm4gQ2FudmFzLmluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBiYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50U2l6ZSA9IE1hdGguZmxvb3Iod2lkdGggLyAyMCk7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZUZpZWxkJyk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICBDYW52YXMuaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRXaWR0aCgpO1xyXG4gICAgICAgIHRoaXMuc2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0V2lkdGgoKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLndpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEhlaWdodCgpIHtcclxuICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb250ZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhbnZhcztcclxuIiwiaW1wb3J0IGZpbGxCb3JkZXJBcHBsZSBmcm9tICcuLi91dGlscy9maWxsQm9yZGVyQXBwbGUnO1xyXG5pbXBvcnQgQ2FudmFzIGZyb20gJy4vQ2FudmFzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb2QgZXh0ZW5kcyBJbWFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBwb3NpdGlvbiwgc2l6ZSwgc3JjKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMuc3JjID0gc3JjO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gbmV3IENhbnZhcygpO1xyXG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCk7XHJcbiAgICAgICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzLnBvc2l0aW9uO1xyXG5cclxuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMsIHgsIHksIHRoaXMuc2l6ZSwgdGhpcy5zaXplKTtcclxuICAgICAgICBjb25zdCBmb29kSW1nRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoeCwgeSwgdGhpcy5zaXplLCB0aGlzLnNpemUpO1xyXG5cclxuICAgICAgICBmaWxsQm9yZGVyQXBwbGUoJ3JlZCcsIGZvb2RJbWdEYXRhKTtcclxuICAgICAgICBjdHgucHV0SW1hZ2VEYXRhKGZvb2RJbWdEYXRhLCB4LCB5KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRSYW5kb21Qb3NpdGlvbih7IHgsIHkgfSkge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCA9IHg7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0geTtcclxuICAgIH1cclxuXHJcbiAgICBzcGF3bihmcmVlUG9zaXRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBmcmVlUG9zaXRpb25zLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0UmFuZG9tUG9zaXRpb24oZnJlZVBvc2l0aW9uc1tyYW5kb21JbmRleF0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBkcmF3SGVhZENvcnJlY3RTaWRlIGZyb20gJy4uL3V0aWxzL2RyYXdIZWFkQ29ycmVjdFNpZGUnO1xyXG5pbXBvcnQgZHJhd1RhaWxDb3JyZWN0U2lkZSBmcm9tICcuLi91dGlscy9kcmF3VGFpbENvcnJlY3RTaWRlJztcclxuaW1wb3J0IENhbnZhcyBmcm9tICcuL0NhbnZhcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbmFrZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihpbml0aWFsUG9zaXRpb24sIHNpemUsIHNuYWtlSW1hZ2UpIHtcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0ge1xyXG4gICAgICAgICAgICB1cDogZmFsc2UsXHJcbiAgICAgICAgICAgIGRvd246IGZhbHNlLFxyXG4gICAgICAgICAgICByaWdodDogdHJ1ZSxcclxuICAgICAgICAgICAgbGVmdDogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmJvZHkgPSBbeyB4OiBpbml0aWFsUG9zaXRpb24ueCwgeTogaW5pdGlhbFBvc2l0aW9uLnkgfV07XHJcbiAgICAgICAgdGhpcy5zbmFrZUltYWdlID0gc25ha2VJbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTbmFrZShsZW5ndGgpIHtcclxuICAgICAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXMuYm9keVswXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmJvZHlbaV0gPSB7IHg6IHggLSBpICogdGhpcy5zaXplLCB5IH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gbmV3IENhbnZhcygpO1xyXG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCk7XHJcbiAgICAgICAgY29uc3QgeyBib2R5SW1hZ2UsIGhlYWRJbWFnZXMsIHRhaWxJbWFnZXMgfSA9IHRoaXMuc25ha2VJbWFnZTtcclxuICAgICAgICBjb25zdCBsYXN0SW5kZXggPSB0aGlzLmJvZHkubGVuZ3RoIC0gMTtcclxuXHJcbiAgICAgICAgdGhpcy5ib2R5LmZvckVhY2goKGJvZHlQYXJ0LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGRyYXdIZWFkQ29ycmVjdFNpZGUodGhpcy5kaXJlY3Rpb24sIGhlYWRJbWFnZXMsIHRoaXMuc2l6ZSwgYm9keVBhcnQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBsYXN0SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGRyYXdUYWlsQ29ycmVjdFNpZGUodGhpcy5ib2R5LCB0YWlsSW1hZ2VzLCB0aGlzLnNpemUsIGJvZHlQYXJ0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoYm9keUltYWdlLCBib2R5UGFydC54LCBib2R5UGFydC55LCB0aGlzLnNpemUsIHRoaXMuc2l6ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpbmNyZWFzZUxlbmd0aCgpIHtcclxuICAgICAgICB0aGlzLmJvZHkucHVzaCh7XHJcbiAgICAgICAgICAgIHg6IHRoaXMuYm9keVt0aGlzLmJvZHkubGVuZ3RoIC0gMV0ueCxcclxuICAgICAgICAgICAgeTogdGhpcy5ib2R5W3RoaXMuYm9keS5sZW5ndGggLSAxXS55LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY3JlYXNlTGVuZ3RoKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmJvZHkubGVuZ3RoICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYm9keS5wb3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbW92ZShjYW52YXNXaWR0aCkge1xyXG4gICAgICAgIGNvbnN0IHsgYm9keSwgZGlyZWN0aW9uLCBzaXplIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGhlYWQgPSBib2R5WzBdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gYm9keS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvZHlQYXJ0ID0gYm9keVtpXTtcclxuXHJcbiAgICAgICAgICAgIGJvZHlQYXJ0LnggPSBib2R5W2kgLSAxXS54O1xyXG4gICAgICAgICAgICBib2R5UGFydC55ID0gYm9keVtpIC0gMV0ueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb3JyZWN0UG9zaXRpb24oY2FudmFzV2lkdGgpO1xyXG4gICAgICAgIGlmIChkaXJlY3Rpb24udXApIHtcclxuICAgICAgICAgICAgaGVhZC55IC09IHNpemU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGlyZWN0aW9uLmRvd24pIHtcclxuICAgICAgICAgICAgaGVhZC55ICs9IHNpemU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXJlY3Rpb24ucmlnaHQpIHtcclxuICAgICAgICAgICAgaGVhZC54ICs9IHNpemU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXJlY3Rpb24ubGVmdCkge1xyXG4gICAgICAgICAgICBoZWFkLnggLT0gc2l6ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29ycmVjdFBvc2l0aW9uKGNhbnZhc1dpZHRoKSB7XHJcbiAgICAgICAgY29uc3QgaGVhZCA9IHRoaXMuYm9keVswXTtcclxuICAgICAgICBjb25zdCB7IHVwLCBkb3duLCByaWdodCwgbGVmdCB9ID0gdGhpcy5kaXJlY3Rpb247XHJcblxyXG4gICAgICAgIGlmICh1cCAmJiBoZWFkLnkgPD0gMCkge1xyXG4gICAgICAgICAgICBoZWFkLnkgPSBjYW52YXNXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJpZ2h0ICYmIGhlYWQueCA+PSBjYW52YXNXaWR0aCAtIHRoaXMuc2l6ZSkge1xyXG4gICAgICAgICAgICBoZWFkLnggPSAtdGhpcy5zaXplO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZG93biAmJiBoZWFkLnkgPj0gY2FudmFzV2lkdGggLSB0aGlzLnNpemUpIHtcclxuICAgICAgICAgICAgaGVhZC55ID0gLXRoaXMuc2l6ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxlZnQgJiYgaGVhZC54IDw9IDApIHtcclxuICAgICAgICAgICAgaGVhZC54ID0gY2FudmFzV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBDYW52YXMgZnJvbSAnLi4vaW5pdGlhbFNldHRpbmdzL0NhbnZhcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkcmF3SGVhZENvcnJlY3RTaWRlKGRpcmVjdGlvbiwgaGVhZEltYWdlcywgc2l6ZSwgYm9keVBhcnQpIHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKTtcclxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCk7XHJcbiAgICBjb25zdCBbY3VycmVudERpcmVjdGlvbl0gPSBPYmplY3QudmFsdWVzKGRpcmVjdGlvbikuZmlsdGVyKEJvb2xlYW4pO1xyXG4gICAgY29uc3QgeyB1cCwgZG93biwgcmlnaHQsIGxlZnQgfSA9IGRpcmVjdGlvbjtcclxuICAgIGNvbnN0IHsgdXBTaWRlSGVhZCwgZG93blNpZGVIZWFkLCByaWdodFNpZGVIZWFkLCBsZWZ0U2lkZUhlYWQgfSA9IGhlYWRJbWFnZXM7XHJcblxyXG4gICAgc3dpdGNoIChjdXJyZW50RGlyZWN0aW9uKSB7XHJcbiAgICAgICAgY2FzZSB1cDpcclxuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZSh1cFNpZGVIZWFkLCBib2R5UGFydC54LCBib2R5UGFydC55LCBzaXplLCBzaXplKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBkb3duOlxyXG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKGRvd25TaWRlSGVhZCwgYm9keVBhcnQueCwgYm9keVBhcnQueSwgc2l6ZSwgc2l6ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgcmlnaHQ6XHJcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UocmlnaHRTaWRlSGVhZCwgYm9keVBhcnQueCwgYm9keVBhcnQueSwgc2l6ZSwgc2l6ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgbGVmdDpcclxuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShsZWZ0U2lkZUhlYWQsIGJvZHlQYXJ0LngsIGJvZHlQYXJ0LnksIHNpemUsIHNpemUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgQ2FudmFzIGZyb20gJy4uL2luaXRpYWxTZXR0aW5ncy9DYW52YXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZHJhd1RhaWxDb3JyZWN0U2lkZShzbmFrZUJvZHksIHRhaWxJbWFnZXMsIHNpemUsIGJvZHlQYXJ0KSB7XHJcbiAgICBjb25zdCBjYW52YXMgPSBuZXcgQ2FudmFzKCk7XHJcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgpO1xyXG4gICAgY29uc3QgdGFpbCA9IHNuYWtlQm9keVtzbmFrZUJvZHkubGVuZ3RoIC0gMV07XHJcbiAgICBjb25zdCBiZWZvcmVUYWlsID0gc25ha2VCb2R5W3NuYWtlQm9keS5sZW5ndGggLSAyXTtcclxuICAgIGNvbnN0IHsgcmlnaHRTaWRlVGFpbCwgbGVmdFNpZGVUYWlsLCB1cFNpZGVUYWlsLCBkb3duU2lkZVRhaWwgfSA9IHRhaWxJbWFnZXM7XHJcblxyXG4gICAgaWYgKGJlZm9yZVRhaWwueSA+IHRhaWwueSkge1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodXBTaWRlVGFpbCwgYm9keVBhcnQueCwgYm9keVBhcnQueSwgc2l6ZSwgc2l6ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoYmVmb3JlVGFpbC55IDwgdGFpbC55KSB7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShkb3duU2lkZVRhaWwsIGJvZHlQYXJ0LngsIGJvZHlQYXJ0LnksIHNpemUsIHNpemUpO1xyXG4gICAgfVxyXG4gICAgaWYgKGJlZm9yZVRhaWwueCA+IHRhaWwueCkge1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UocmlnaHRTaWRlVGFpbCwgYm9keVBhcnQueCwgYm9keVBhcnQueSwgc2l6ZSwgc2l6ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoYmVmb3JlVGFpbC54IDwgdGFpbC54KSB7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShsZWZ0U2lkZVRhaWwsIGJvZHlQYXJ0LngsIGJvZHlQYXJ0LnksIHNpemUsIHNpemUpO1xyXG4gICAgfVxyXG59XHJcbiIsImNvbnN0IHNvdW5kc1NyYyA9IHtcclxuICAgIGVhdEZvb2RTcmM6IHtcclxuICAgICAgICBhcHBsZTogJ3NyYy9yZXMvc291bmRzL2Zvb2QvZWF0LXNvdW5kLm00YScsXHJcbiAgICB9LFxyXG4gICAgYWN0aW9uc1NyYzoge1xyXG4gICAgICAgIHNuYWtlSW5jcmVhc2VkOiAnc3JjL3Jlcy9zb3VuZHMvZ2lmdC9zbmFrZS1pbmNyZWFzZWQubTRhJyxcclxuICAgICAgICBzbmFrZURlY3JlYXNlZDogJ3NyYy9yZXMvc291bmRzL2dpZnQvc25ha2UtZGVjcmVhc2VkLm00YScsXHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc291bmRzU3JjO1xyXG4iLCJpbXBvcnQgc291bmRQbGF5ZXIgZnJvbSAnLi4vc291bmRQbGF5ZXIvc291bmRQbGF5ZXInO1xyXG5pbXBvcnQgc291bmRzUGxheWxpc3QgZnJvbSAnLi4vc291bmRQbGF5ZXIvc291bmRzU3JjJztcclxuaW1wb3J0IGdldFJhbmRvbUFjdGlvbiBmcm9tICcuLi91dGlscy9nZXRSYW5kb21BY3Rpb24nO1xyXG5pbXBvcnQgQ2FudmFzIGZyb20gJy4vQ2FudmFzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdpZnQgZXh0ZW5kcyBJbWFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBwb3NpdGlvbiwgc2l6ZSwgc3JjKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMuc3JjID0gc3JjO1xyXG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IFsnc25ha2VJbmNyZWFzZWQnLCAnc25ha2VEZWNyZWFzZWQnXTtcclxuICAgIH1cclxuXHJcbiAgICBtYWtlUmFuZG9tQWN0aW9uV2l0aChzbmFrZSkge1xyXG4gICAgICAgIGNvbnN0IHsgYWN0aW9uc1NyYyB9ID0gc291bmRzUGxheWxpc3Q7XHJcbiAgICAgICAgY29uc3QgcmFuZG9tQWN0aW9uID0gZ2V0UmFuZG9tQWN0aW9uKHRoaXMuYWN0aW9ucyk7XHJcblxyXG4gICAgICAgIHN3aXRjaCAocmFuZG9tQWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3NuYWtlSW5jcmVhc2VkJzpcclxuICAgICAgICAgICAgICAgIHNuYWtlLmluY3JlYXNlTGVuZ3RoKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc25ha2VEZWNyZWFzZWQnOlxyXG4gICAgICAgICAgICAgICAgc25ha2UuZGVjcmVhc2VMZW5ndGgoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNvdW5kUGxheWVyLnBsYXkoYWN0aW9uc1NyY1tyYW5kb21BY3Rpb25dKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRSYW5kb21Qb3NpdGlvbih7IHgsIHkgfSkge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCA9IHg7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0geTtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKTtcclxuICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5wb3NpdGlvbjtcclxuXHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLCB4LCB5LCB0aGlzLnNpemUsIHRoaXMuc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Bhd24oZnJlZVBvc2l0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZnJlZVBvc2l0aW9ucy5sZW5ndGgpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFJhbmRvbVBvc2l0aW9uKGZyZWVQb3NpdGlvbnNbcmFuZG9tSW5kZXhdKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSYW5kb21BY3Rpb24oYWN0aW9ucykge1xyXG4gICAgY29uc3QgcmFuZG9tQWN0aW9uSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhY3Rpb25zLmxlbmd0aCk7XHJcblxyXG4gICAgcmV0dXJuIGFjdGlvbnNbcmFuZG9tQWN0aW9uSW5kZXhdO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlV2l0aFNyYyBleHRlbmRzIEltYWdlIHtcclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIHNyYykge1xyXG4gICAgICAgIHN1cGVyKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuc3JjID0gc3JjO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBJbWFnZVdpdGhTcmMgZnJvbSAnLi4vdXRpbHMvSW1hZ2VXaXRoU3JjJztcclxuXHJcbmNvbnN0IHNuYWtlSW1hZ2UgPSB7XHJcbiAgICBoZWFkSW1hZ2VzOiB7XHJcbiAgICAgICAgdXBTaWRlSGVhZDogbmV3IEltYWdlV2l0aFNyYygyNSwgMjUsICdzcmMvcmVzL3NuYWtlL3NuYWtlSGVhZC9zbmFrZUhlYWRVcC5wbmcnKSxcclxuICAgICAgICBkb3duU2lkZUhlYWQ6IG5ldyBJbWFnZVdpdGhTcmMoMjUsIDI1LCAnc3JjL3Jlcy9zbmFrZS9zbmFrZUhlYWQvc25ha2VIZWFkRG93bi5wbmcnKSxcclxuICAgICAgICByaWdodFNpZGVIZWFkOiBuZXcgSW1hZ2VXaXRoU3JjKDI1LCAyNSwgJ3NyYy9yZXMvc25ha2Uvc25ha2VIZWFkL3NuYWtlSGVhZFJpZ2h0LnBuZycpLFxyXG4gICAgICAgIGxlZnRTaWRlSGVhZDogbmV3IEltYWdlV2l0aFNyYygyNSwgMjUsICdzcmMvcmVzL3NuYWtlL3NuYWtlSGVhZC9zbmFrZUhlYWRMZWZ0LnBuZycpLFxyXG4gICAgfSxcclxuICAgIGJvZHlJbWFnZTogbmV3IEltYWdlV2l0aFNyYygyNSwgMjUsICdzcmMvcmVzL3NuYWtlL3NuYWtlQm9keS5wbmcnKSxcclxuICAgIHRhaWxJbWFnZXM6IHtcclxuICAgICAgICB1cFNpZGVUYWlsOiBuZXcgSW1hZ2VXaXRoU3JjKDI1LCAyNSwgJ3NyYy9yZXMvc25ha2Uvc25ha2VUYWlsL3NuYWtlVGFpbERvd24ucG5nJyksXHJcbiAgICAgICAgZG93blNpZGVUYWlsOiBuZXcgSW1hZ2VXaXRoU3JjKDI1LCAyNSwgJ3NyYy9yZXMvc25ha2Uvc25ha2VUYWlsL3NuYWtlVGFpbFVwLnBuZycpLFxyXG4gICAgICAgIHJpZ2h0U2lkZVRhaWw6IG5ldyBJbWFnZVdpdGhTcmMoMjUsIDI1LCAnc3JjL3Jlcy9zbmFrZS9zbmFrZVRhaWwvc25ha2VUYWlsUmlnaHQucG5nJyksXHJcbiAgICAgICAgbGVmdFNpZGVUYWlsOiBuZXcgSW1hZ2VXaXRoU3JjKDI1LCAyNSwgJ3NyYy9yZXMvc25ha2Uvc25ha2VUYWlsL3NuYWtlVGFpbExlZnQucG5nJyksXHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc25ha2VJbWFnZTtcclxuIiwiaW1wb3J0IEZvb2QgZnJvbSAnLi4vaW5pdGlhbFNldHRpbmdzL0Zvb2QnO1xyXG5pbXBvcnQgU25ha2UgZnJvbSAnLi4vaW5pdGlhbFNldHRpbmdzL1NuYWtlJztcclxuaW1wb3J0IEdpZnQgZnJvbSAnLi4vaW5pdGlhbFNldHRpbmdzL0dpZnQnO1xyXG5pbXBvcnQgc25ha2VJbWFnZSBmcm9tICcuLi9pbWFnZXMvc25ha2VJbWFnZSc7XHJcblxyXG5jb25zdCBnZXRHYW1lRmllbGRPYmplY3RzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgYXBwbGUgPSBuZXcgRm9vZCgnYXBwbGUnLCB7IHg6IDI1MCwgeTogMjc1IH0sIDI1LCAnc3JjL3Jlcy9mb29kL2FwcGxlLmpwZycpO1xyXG4gICAgY29uc3Qgc25ha2UgPSBuZXcgU25ha2UoeyB4OiA3NSwgeTogNzUgfSwgMjUsIHNuYWtlSW1hZ2UpO1xyXG4gICAgY29uc3QgZ2lmdCA9IG5ldyBHaWZ0KCdnaWZ0JywgeyB4OiAyMDAsIHk6IDIwMCB9LCAyNSwgJ3NyYy9yZXMvZ2lmdC9naWZ0LnBuZycpO1xyXG5cclxuICAgIHJldHVybiB7IHNuYWtlLCBhcHBsZSwgZ2lmdCB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2V0R2FtZUZpZWxkT2JqZWN0cztcclxuIiwiY29uc3QgYWRkaXRpb25hbENvbG9ycyA9IHtcclxuICAgICc3Niw3Niw3Nic6ICdTYWRkbGUnLFxyXG4gICAgJzI3LDI3LDI3JzogJ1RvbG9wZWEnLFxyXG4gICAgJzEyNCwxMjQsMTI0JzogJ1RyZW5keUdyZWVuJyxcclxuICAgICcxMDYsMTA2LDEwNic6ICdTcGljZScsXHJcbiAgICAnMjAxLDIwMSwyMDEnOiAnU3VuZGFuY2UnLFxyXG4gICAgJzExMywxMTMsMTEzJzogJ1llbGxvd01ldGFsJyxcclxuICAgICcxMzQsMTM0LDEzNCc6ICdSdXN0eU5haWwnLFxyXG4gICAgJzIxMiwyMTIsMjEyJzogJ1N0cmF3JyxcclxuICAgICcyNTUsMjU1LDI1NSc6ICdZb3VyUGluaycsXHJcbiAgICAnMjQ1LDI0NSwyNDUnOiAnU29mdFBlYWNoJyxcclxuICAgICcxNTUsMTU1LDE1NSc6ICdPcmVnb24nLFxyXG4gICAgJzAsMCwwJzogJ1N3YW1wJyxcclxuICAgICcxNDQsMTQ0LDE0NCc6ICdTeWNhbW9yZScsXHJcbiAgICAnMTc1LDE3NSwxNzUnOiAnUGlnZW9uUG9zdCcsXHJcbiAgICAnMjE5LDIxOSwyMTknOiAnV2hpc2tleVNvdXInLFxyXG4gICAgJzE2OSwxNjksMTY5JzogJ1Rvd2VyR3JleScsXHJcbiAgICAnNTksNTksNTknOiAnVHJlZWhvdXNlJyxcclxuICAgICcxMzUsMTM1LDEzNSc6ICdTdXNoaScsXHJcbiAgICAnMTYzLDE2MywxNjMnOiAnUGhhcmxhcCcsXHJcbiAgICAnMjQ5LDI0OSwyNDknOiAnU3VnYXJDYW5lJyxcclxuICAgICcxMjMsMTIzLDEyMyc6ICdZdWtvbkdvbGQnLFxyXG4gICAgJzE1NywxNTcsMTU3JzogJ1Bpc3RhY2hpbycsXHJcbiAgICAnMTEyLDExMiwxMTInOiAnUGVyc2lhblBsdW0nLFxyXG4gICAgJzIyNCwyMjQsMjI0JzogJ0hhcnZlc3RHb2xkJyxcclxuICAgICcyMjMsMjIzLDIyMyc6ICdXaWxsb3dCcm9vaycsXHJcbiAgICAnNzksNzksNzknOiAnSG9uZXlGbG93ZXInLFxyXG4gICAgJzIyNiwyMjYsMjI2JzogJ1NudWZmJyxcclxuICAgICcyMzUsMjM1LDIzNSc6ICdBcHJpY290JyxcclxuICAgICcxNjEsMTYxLDE2MSc6ICdXYXRlckxlYWYnLFxyXG4gICAgJzIzNywyMzcsMjM3JzogJ1p1bXRob3InLFxyXG4gICAgJzIzNCwyMzQsMjM0JzogJ1doaXRlUm9jaycsXHJcbiAgICAnMjMyLDIzMiwyMzInOiAnU2hpbG8nLFxyXG4gICAgJzEsMSwxJzogJ1JlZ2FsQmx1ZScsXHJcbiAgICAnMTcsMTcsMTcnOiAnQXJhcGF3YScsXHJcbiAgICAnNjcsNjcsNjcnOiAnU3BhY2VTaHV0dGxlJyxcclxuICAgICcxNDgsMTQ4LDE0OCc6ICdDb3BwZXJSdXN0JyxcclxuICAgICcxOTgsMTk4LDE5OCc6ICdSb3RpJyxcclxuICAgICc0Niw0Niw0Nic6ICdTY3J1YicsXHJcbiAgICAnMTksMTksMTknOiAnUGFyc2xleScsXHJcbiAgICAnMjUwLDI1MCwyNTAnOiAnVHVyYm8nLFxyXG4gICAgJzUwLDUwLDUwJzogJ1N0cm9tYm9saScsXHJcbiAgICAnNDAsNDAsNDAnOiAnT2lsJyxcclxuICAgICcyMzgsMjM4LDIzOCc6ICdUd2lsaWdodEJsdWUnLFxyXG4gICAgJzIzNiwyMzYsMjM2JzogJ1dpbGRSaWNlJyxcclxuICAgICcxNTEsMTUxLDE1MSc6ICdXaXN0ZXJpYScsXHJcbiAgICAnMTAsMTAsMTAnOiAnSmFwYW5lc2VMYXVyZWwnLFxyXG4gICAgJzQ5LDQ5LDQ5JzogJ1BpY2tsZWRCbHVld29vZCcsXHJcbiAgICAnMTM2LDEzNiwxMzYnOiAnU3V2YUdyZXknLFxyXG4gICAgJzc4LDc4LDc4JzogJ1dlZGdld29vZCcsXHJcbiAgICAnMjQ3LDI0NywyNDcnOiAnV2hpc3BlcicsXHJcbiAgICAnMTMsMTMsMTMnOiAnQnVzaCcsXHJcbiAgICAnMiwyLDInOiAnWnlkZWNvJyxcclxuICAgICcxNjUsMTY1LDE2NSc6ICdab3JiYScsXHJcbiAgICAnMTMzLDEzMywxMzMnOiAnSGFsZkJha2VkJyxcclxuICAgICc0Miw0Miw0Mic6ICdUdXJ0bGVHcmVlbicsXHJcbiAgICAnMjE4LDIxOCwyMTgnOiAnWmFuYWgnLFxyXG4gICAgJzIyMiwyMjIsMjIyJzogJ1dhZmVyJyxcclxuICAgICcxNjYsMTY2LDE2Nic6ICdSb29mVGVycmFjb3R0YScsXHJcbiAgICAnNjgsNjgsNjgnOiAnTW9yb2Njb0Jyb3duJyxcclxuICAgICc0MSw0MSw0MSc6ICdaZXVzJyxcclxuICAgICcxMzAsMTMwLDEzMCc6ICdTYW5kRHVuZScsXHJcbiAgICAnMTI1LDEyNSwxMjUnOiAnUHVlYmxvJyxcclxuICAgICczOSwzOSwzOSc6ICdQbGFudGF0aW9uJyxcclxuICAgICcxNTIsMTUyLDE1Mic6ICdWaW5Sb3VnZScsXHJcbiAgICAnNjEsNjEsNjEnOiAnR29ibGluJyxcclxuICAgICcyNTQsMjU0LDI1NCc6ICdZZWxsb3dTZWEnLFxyXG4gICAgJzEwNywxMDcsMTA3JzogJ1RlYWtXb29kRmluaXNoJyxcclxuICAgICcyNTIsMjUyLDI1Mic6ICdXaGl0ZU5lY3RhcicsXHJcbiAgICAnMjIsMjIsMjInOiAnVGltYmVyR3JlZW4nLFxyXG4gICAgJzE3OCwxNzgsMTc4JzogJ1NoaXJheicsXHJcbiAgICAnNTUsNTUsNTUnOiAnVHVtYmxld2VlZCcsXHJcbiAgICAnNzMsNzMsNzMnOiAnVmVyZHVuR3JlZW4nLFxyXG4gICAgJzE5MywxOTMsMTkzJzogJ1RpYU1hcmlhJyxcclxuICAgICcyMDIsMjAyLDIwMic6ICdUdXJtZXJpYycsXHJcbiAgICAnOCw4LDgnOiAnSmFndWFyJyxcclxuICAgICcxMSwxMSwxMSc6ICdTYW5GZWxpeCcsXHJcbiAgICAnMjQ2LDI0NiwyNDYnOiAnU3ByaW5nU3VuJyxcclxuICAgICczNywzNywzNyc6ICdTaGFyaycsXHJcbiAgICAnNjIsNjIsNjInOiAnVG9iYWdvJyxcclxuICAgICc0LDQsNCc6ICdadWNjaW5pJyxcclxuICAgICcxNCwxNCwxNCc6ICdGaXJlZmx5JyxcclxuICAgICcxMDMsMTAzLDEwMyc6ICdWaXJpZGlhbkdyZWVuJyxcclxuICAgICcyNDIsMjQyLDI0Mic6ICdNYW5keXNQaW5rJyxcclxuICAgICc3Nyw3Nyw3Nyc6ICdXb29kbGFuZCcsXHJcbiAgICAnMzgsMzgsMzgnOiAnV29vZEJhcmsnLFxyXG4gICAgJzQ0LDQ0LDQ0JzogJ1Jldm9sdmVyJyxcclxuICAgICcyMjAsMjIwLDIyMCc6ICdXZXN0YXInLFxyXG4gICAgJzM0LDM0LDM0JzogJ0JsdWVCZWxsJyxcclxuICAgICcyNDEsMjQxLDI0MSc6ICdXZXdhaycsXHJcbiAgICAnMTIsMTIsMTInOiAnV29vZHNtb2tlJyxcclxuICAgICc1Niw1Niw1Nic6ICdPeGZvcmRCbHVlJyxcclxuICAgICczMiwzMiwzMic6ICdKYWNrc29uc1B1cnBsZScsXHJcbiAgICAnMTkxLDE5MSwxOTEnOiAnWmlnZ3VyYXQnLFxyXG4gICAgJzExOCwxMTgsMTE4JzogJ0xpbWEnLFxyXG4gICAgJzIxMCwyMTAsMjEwJzogJ0dvc3NpcCcsXHJcbiAgICAnMTE2LDExNiwxMTYnOiAnUm9sbGluZ1N0b25lJyxcclxuICAgICcyNCwyNCwyNCc6ICdGb3Jlc3RHcmVlbicsXHJcbiAgICAnMTgwLDE4MCwxODAnOiAnV2VsbFJlYWQnLFxyXG4gICAgJzI4LDI4LDI4JzogJ1Jhbmdvb25HcmVlbicsXHJcbiAgICAnMjI5LDIyOSwyMjknOiAnWmVzdCcsXHJcbiAgICAnMjI4LDIyOCwyMjgnOiAnWm9tYmllJyxcclxuICAgICc5Miw5Miw5Mic6ICdNdWxiZXJyeScsXHJcbiAgICAnMTk5LDE5OSwxOTknOiAnUGluZUdsYWRlJyxcclxuICAgICc5LDksOSc6ICdTZWFHcmVlbicsXHJcbiAgICAnMTIyLDEyMiwxMjInOiAnU2lyZW4nLFxyXG4gICAgJzE3NCwxNzQsMTc0JzogJ0hpcHBpZVBpbmsnLFxyXG4gICAgJzE4NiwxODYsMTg2JzogJ1N1Ym1hcmluZScsXHJcbiAgICAnNzQsNzQsNzQnOiAnVHVuZG9yYScsXHJcbiAgICAnMjA1LDIwNSwyMDUnOiAnT25haGF1JyxcclxuICAgICcxODcsMTg3LDE4Nyc6ICdTdXJmJyxcclxuICAgICc5Myw5Myw5Myc6ICdWZXJkaWdyaXMnLFxyXG4gICAgJzYwLDYwLDYwJzogJ1dvb2RidXJuJyxcclxuICAgICcxNzcsMTc3LDE3Nyc6ICdWZXN1dml1cycsXHJcbiAgICAnMTcxLDE3MSwxNzEnOiAnU2FuZHJpZnQnLFxyXG4gICAgJzYzLDYzLDYzJzogJ1RvbVRodW1iJyxcclxuICAgICc4OSw4OSw4OSc6ICdXaW5lQmVycnknLFxyXG4gICAgJzY0LDY0LDY0JzogJ1RoYXRjaEdyZWVuJyxcclxuICAgICcyMzEsMjMxLDIzMSc6ICdUb255c1BpbmsnLFxyXG4gICAgJzk4LDk4LDk4JzogJ1dlc3RDb2FzdCcsXHJcbiAgICAnMTY4LDE2OCwxNjgnOiAnVGFsbG93JyxcclxuICAgICc3Miw3Miw3Mic6ICdXb29keUJyb3duJyxcclxuICAgICcyMSwyMSwyMSc6ICdHZW5vYScsXHJcbiAgICAnMTE5LDExOSwxMTknOiAnV2FsbnV0JyxcclxuICAgICcyMTcsMjE3LDIxNyc6ICdUYW5hJyxcclxuICAgICcxMDEsMTAxLDEwMSc6ICdXaWxsb3dHcm92ZScsXHJcbiAgICAnMjQzLDI0MywyNDMnOiAnV2hlYXRmaWVsZCcsXHJcbiAgICAnODgsODgsODgnOiAnU2NhcnBhRmxvdycsXHJcbiAgICAnMTc2LDE3NiwxNzYnOiAnVGFwZXN0cnknLFxyXG4gICAgJzExMSwxMTEsMTExJzogJ0xpbWVhZGUnLFxyXG4gICAgJzEzNywxMzcsMTM3JzogJ1NvbGlkUGluaycsXHJcbiAgICAnMjEzLDIxMywyMTMnOiAnV2ludGVySGF6ZWwnLFxyXG4gICAgJzE2MiwxNjIsMTYyJzogJ1JvdWdlJyxcclxuICAgICc2LDYsNic6ICdUaWJlcicsXHJcbiAgICAnMTQwLDE0MCwxNDAnOiAnVHJlbmR5UGluaycsXHJcbiAgICAnMjQ4LDI0OCwyNDgnOiAnV2hpdGVMaW5lbicsXHJcbiAgICAnNDcsNDcsNDcnOiAnU3BlY3RyYScsXHJcbiAgICAnMTM5LDEzOSwxMzknOiAnV2VzdGVyblJlZCcsXHJcbiAgICAnMjMwLDIzMCwyMzAnOiAnVHJpbmlkYWQnLFxyXG4gICAgJzE3MywxNzMsMTczJzogJ1BhZHVhJyxcclxuICAgICc4Miw4Miw4Mic6ICdQZXJzaWFuUmVkJyxcclxuICAgICcyMjcsMjI3LDIyNyc6ICdQZXBwZXJtaW50JyxcclxuICAgICcxODQsMTg0LDE4NCc6ICdTYWlsJyxcclxuICAgICcyMDksMjA5LDIwOSc6ICdWYW5pbGxhJyxcclxuICAgICczMCwzMCwzMCc6ICdUZVBhcGFHcmVlbicsXHJcbiAgICAnMTQxLDE0MSwxNDEnOiAnVG9zY2EnLFxyXG4gICAgJzgxLDgxLDgxJzogJ1RheEJyZWFrJyxcclxuICAgICc1Myw1Myw1Myc6ICdWYWxlbnRpbm8nLFxyXG4gICAgJzE4OSwxODksMTg5JzogJ1R1c2NhbnknLFxyXG4gICAgJzIzLDIzLDIzJzogJ1BpbmVUcmVlJyxcclxuICAgICcxMzEsMTMxLDEzMSc6ICdNb250ZUNhcmxvJyxcclxuICAgICcxNTgsMTU4LDE1OCc6ICdTYWdlJyxcclxuICAgICcyMDYsMjA2LDIwNic6ICdZdW1hJyxcclxuICAgICc1MSw1MSw1MSc6ICdUaHVuZGVyJyxcclxuICAgICcyNTMsMjUzLDI1Myc6ICdTd2VldFBpbmsnLFxyXG4gICAgJzg1LDg1LDg1JzogJ1NhcmF0b2dhJyxcclxuICAgICcxMjcsMTI3LDEyNyc6ICdQZXJ1VGFuJyxcclxuICAgICcyNTEsMjUxLDI1MSc6ICdTd2VldENvcm4nLFxyXG4gICAgJzEzOCwxMzgsMTM4JzogJ1RydWVWJyxcclxuICAgICcyMzMsMjMzLDIzMyc6ICdUYW5nZXJpbmUnLFxyXG4gICAgJzE3MiwxNzIsMTcyJzogJ1NwcmluZ1JhaW4nLFxyXG4gICAgJzQ4LDQ4LDQ4JzogJ1dvb2RydXNoJyxcclxuICAgICcxNTksMTU5LDE1OSc6ICdTdGFyRHVzdCcsXHJcbiAgICAnMTI2LDEyNiwxMjYnOiAnQ29wcGVyQ2FueW9uJyxcclxuICAgICc5Niw5Niw5Nic6ICdTbW9reScsXHJcbiAgICAnMTk2LDE5NiwxOTYnOiAnT3JhbmdlUm91Z2h5JyxcclxuICAgICc5Nyw5Nyw5Nyc6ICdQbGFudGVyJyxcclxuICAgICcxOTQsMTk0LDE5NCc6ICdUd2luZScsXHJcbiAgICAnNSw1LDUnOiAnV2F0ZXJjb3Vyc2UnLFxyXG4gICAgJzE2MCwxNjAsMTYwJzogJ1RhYmFzY28nLFxyXG4gICAgJzE4NSwxODUsMTg1JzogJ1dpbGRXaWxsb3cnLFxyXG4gICAgJzE4MiwxODIsMTgyJzogJ1RoYXRjaCcsXHJcbiAgICAnNzAsNzAsNzAnOiAnTG91bG91JyxcclxuICAgICcxMTUsMTE1LDExNSc6ICdYYW5hZHUnLFxyXG4gICAgJzE4MSwxODEsMTgxJzogJ1R1cmtpc2hSb3NlJyxcclxuICAgICcxNDYsMTQ2LDE0Nic6ICdWZW51cycsXHJcbiAgICAnODAsODAsODAnOiAnTW9ydGFyJyxcclxuICAgICcxMTAsMTEwLDExMCc6ICdSZWRPeGlkZScsXHJcbiAgICAnOTUsOTUsOTUnOiAnVHJhZGV3aW5kJyxcclxuICAgICc2NSw2NSw2NSc6ICdTbW9rZXlBc2gnLFxyXG4gICAgJzU3LDU3LDU3JzogJ0xpbWVkU3BydWNlJyxcclxuICAgICcxMDIsMTAyLDEwMic6ICdTaWx2ZXJUcmVlJyxcclxuICAgICcxNjQsMTY0LDE2NCc6ICdXaXN0ZnVsJyxcclxuICAgICcxMTcsMTE3LDExNyc6ICdSdXNzZXR0JyxcclxuICAgICcxMDAsMTAwLDEwMCc6ICdWaWtpbmcnLFxyXG4gICAgJzE0MiwxNDIsMTQyJzogJ1JvcGUnLFxyXG4gICAgJzEwOSwxMDksMTA5JzogJ1BpbmVDb25lJyxcclxuICAgICcxNiwxNiwxNic6ICdWdWxjYW4nLFxyXG4gICAgJzIwMCwyMDAsMjAwJzogJ0xpbHknLFxyXG4gICAgJzE0MywxNDMsMTQzJzogJ1Zpc3RhQmx1ZScsXHJcbiAgICAnMTgsMTgsMTgnOiAnTW9zYWljJyxcclxuICAgICcxMDgsMTA4LDEwOCc6ICdFbWluZW5jZScsXHJcbiAgICAnMTI5LDEyOSwxMjknOiAnU3BpY3lQaW5rJyxcclxuICAgICcyMjUsMjI1LDIyNSc6ICdUYXJhJyxcclxuICAgICczMywzMywzMyc6ICdFdGVybml0eScsXHJcbiAgICAnMjA3LDIwNywyMDcnOiAnVGFzbWFuJyxcclxuICAgICcxMjEsMTIxLDEyMSc6ICdTcHJheScsXHJcbiAgICAnMjQwLDI0MCwyNDAnOiAnVGl0YW5XaGl0ZScsXHJcbiAgICAnMTc5LDE3OSwxNzknOiAnVGF1cGVHcmV5JyxcclxuICAgICcxMDUsMTA1LDEwNSc6ICdUYXdueVBvcnQnLFxyXG4gICAgJzE3MCwxNzAsMTcwJzogJ1NwdW5QZWFybCcsXHJcbiAgICAnMjE2LDIxNiwyMTYnOiAnVmFsZW5jaWEnLFxyXG4gICAgJzIxNSwyMTUsMjE1JzogJ1BhdmxvdmEnLFxyXG4gICAgJzIwMywyMDMsMjAzJzogJ1Zpb2xhJyxcclxuICAgICc4Niw4Niw4Nic6ICdGb3VudGFpbkJsdWUnLFxyXG4gICAgJzEyOCwxMjgsMTI4JzogJ1NlYWd1bGwnLFxyXG4gICAgJzE5MCwxOTAsMTkwJzogJ1BpbmtTd2FuJyxcclxuICAgICcyNSwyNSwyNSc6ICdQYWxtTGVhZicsXHJcbiAgICAnODQsODQsODQnOiAnVmlkYUxvY2EnLFxyXG4gICAgJzIzOSwyMzksMjM5JzogJ1BvcmNlbGFpbicsXHJcbiAgICAnMTE0LDExNCwxMTQnOiAnVmVuZXRpYW5SZWQnLFxyXG4gICAgJzEzMiwxMzIsMTMyJzogJ0dyYW5ueVNtaXRoJyxcclxuICAgICczNiwzNiwzNic6ICdWaW9sZXQnLFxyXG4gICAgJzI5LDI5LDI5JzogJ0dyZWVuUGVhJyxcclxuICAgICczLDMsMyc6ICdUYW5nYXJvYScsXHJcbiAgICAnNjksNjksNjknOiAnU2FuTWFyaW5vJyxcclxuICAgICcxOTUsMTk1LDE5NSc6ICdUcm9waWNhbEJsdWUnLFxyXG4gICAgJzE1NCwxNTQsMTU0JzogJ1RvYXN0JyxcclxuICAgICc1Miw1Miw1Mic6ICdUYW1hcmluZCcsXHJcbiAgICAnMTgzLDE4MywxODMnOiAnU2FoYXJhJyxcclxuICAgICc0Myw0Myw0Myc6ICdWYWxoYWxsYScsXHJcbiAgICAnOTQsOTQsOTQnOiAnS2FidWwnLFxyXG4gICAgJzgzLDgzLDgzJzogJ1Zvb2RvbycsXHJcbiAgICAnMjA4LDIwOCwyMDgnOiAnUmVkU3RhZ2UnLFxyXG4gICAgJzkwLDkwLDkwJzogJ1dhaWthd2FHcmV5JyxcclxuICAgICc1OCw1OCw1OCc6ICdXaWxsaWFtJyxcclxuICAgICc2Niw2Niw2Nic6ICdQYW5kYScsXHJcbiAgICAnOTEsOTEsOTEnOiAnSmFtYmFsYXlhJyxcclxuICAgICcyNDQsMjQ0LDI0NCc6ICdaaXJjb24nLFxyXG4gICAgJzEyMCwxMjAsMTIwJzogJ1dhc2FiaScsXHJcbiAgICAnMzEsMzEsMzEnOiAnTmlnaHRSaWRlcicsXHJcbiAgICAnNTQsNTQsNTQnOiAnV2Fpb3VydScsXHJcbiAgICAnMTUwLDE1MCwxNTAnOiAnU3VtbWVyR3JlZW4nLFxyXG4gICAgJzI2LDI2LDI2JzogJ0x1Y2t5UG9pbnQnLFxyXG4gICAgJzE1MywxNTMsMTUzJzogJ1RvdGVtUG9sZScsXHJcbiAgICAnMTY3LDE2NywxNjcnOiAnTWV4aWNhblJlZCcsXHJcbiAgICAnMzUsMzUsMzUnOiAnTWFsbGFyZCcsXHJcbiAgICAnNDUsNDUsNDUnOiAnU3RUcm9wYXonLFxyXG4gICAgJzE5MiwxOTIsMTkyJzogJ1RodW5kZXJiaXJkJyxcclxuICAgICcyMTQsMjE0LDIxNCc6ICdUYWNoYScsXHJcbiAgICAnMTQ5LDE0OSwxNDknOiAnU3RyaWtlbWFzdGVyJyxcclxuICAgICc3NSw3NSw3NSc6ICdOYW5kb3InLFxyXG4gICAgJzIwLDIwLDIwJzogJ1RvcnlCbHVlJyxcclxuICAgICcxOTcsMTk3LDE5Nyc6ICdUdXNzb2NrJyxcclxuICAgICcxMDQsMTA0LDEwNCc6ICdaYW1iZXppJyxcclxuICAgICc5OSw5OSw5OSc6ICdQYXRpbmEnLFxyXG4gICAgJzE4OCwxODgsMTg4JzogJ1Bvd2RlckJsdWUnLFxyXG4gICAgJzIxMSwyMTEsMjExJzogJ1N3aXJsJyxcclxuICAgICc4Nyw4Nyw4Nyc6ICdTcHJpbmdHcmVlbicsXHJcbiAgICAnMTU2LDE1NiwxNTYnOiAnU3RpbGV0dG8nLFxyXG4gICAgJzIyMSwyMjEsMjIxJzogJ1doaXRlSWNlJyxcclxuICAgICc3LDcsNyc6ICdUYXJhd2VyYScsXHJcbiAgICAnMjA0LDIwNCwyMDQnOiAnVGhpc3RsZScsXHJcbiAgICAnMTUsMTUsMTUnOiAnVG9yZWFCYXknLFxyXG4gICAgU2FkZGxlOiAnNzYsNzYsNzYnLFxyXG4gICAgVG9sb3BlYTogJzI3LDI3LDI3JyxcclxuICAgIFRyZW5keUdyZWVuOiAnMTI0LDEyNCwxMjQnLFxyXG4gICAgU3BpY2U6ICcxMDYsMTA2LDEwNicsXHJcbiAgICBTdW5kYW5jZTogJzIwMSwyMDEsMjAxJyxcclxuICAgIFllbGxvd01ldGFsOiAnMTEzLDExMywxMTMnLFxyXG4gICAgUnVzdHlOYWlsOiAnMTM0LDEzNCwxMzQnLFxyXG4gICAgU3RyYXc6ICcyMTIsMjEyLDIxMicsXHJcbiAgICBZb3VyUGluazogJzI1NSwyNTUsMjU1JyxcclxuICAgIFNvZnRQZWFjaDogJzI0NSwyNDUsMjQ1JyxcclxuICAgIE9yZWdvbjogJzE1NSwxNTUsMTU1JyxcclxuICAgIFN3YW1wOiAnMCwwLDAnLFxyXG4gICAgU3ljYW1vcmU6ICcxNDQsMTQ0LDE0NCcsXHJcbiAgICBQaWdlb25Qb3N0OiAnMTc1LDE3NSwxNzUnLFxyXG4gICAgV2hpc2tleVNvdXI6ICcyMTksMjE5LDIxOScsXHJcbiAgICBUb3dlckdyZXk6ICcxNjksMTY5LDE2OScsXHJcbiAgICBUcmVlaG91c2U6ICc1OSw1OSw1OScsXHJcbiAgICBTdXNoaTogJzEzNSwxMzUsMTM1JyxcclxuICAgIFBoYXJsYXA6ICcxNjMsMTYzLDE2MycsXHJcbiAgICBTdWdhckNhbmU6ICcyNDksMjQ5LDI0OScsXHJcbiAgICBZdWtvbkdvbGQ6ICcxMjMsMTIzLDEyMycsXHJcbiAgICBQaXN0YWNoaW86ICcxNTcsMTU3LDE1NycsXHJcbiAgICBQZXJzaWFuUGx1bTogJzExMiwxMTIsMTEyJyxcclxuICAgIEhhcnZlc3RHb2xkOiAnMjI0LDIyNCwyMjQnLFxyXG4gICAgV2lsbG93QnJvb2s6ICcyMjMsMjIzLDIyMycsXHJcbiAgICBIb25leUZsb3dlcjogJzc5LDc5LDc5JyxcclxuICAgIFNudWZmOiAnMjI2LDIyNiwyMjYnLFxyXG4gICAgQXByaWNvdDogJzIzNSwyMzUsMjM1JyxcclxuICAgIFdhdGVyTGVhZjogJzE2MSwxNjEsMTYxJyxcclxuICAgIFp1bXRob3I6ICcyMzcsMjM3LDIzNycsXHJcbiAgICBXaGl0ZVJvY2s6ICcyMzQsMjM0LDIzNCcsXHJcbiAgICBTaGlsbzogJzIzMiwyMzIsMjMyJyxcclxuICAgIFJlZ2FsQmx1ZTogJzEsMSwxJyxcclxuICAgIEFyYXBhd2E6ICcxNywxNywxNycsXHJcbiAgICBTcGFjZVNodXR0bGU6ICc2Nyw2Nyw2NycsXHJcbiAgICBDb3BwZXJSdXN0OiAnMTQ4LDE0OCwxNDgnLFxyXG4gICAgUm90aTogJzE5OCwxOTgsMTk4JyxcclxuICAgIFNjcnViOiAnNDYsNDYsNDYnLFxyXG4gICAgUGFyc2xleTogJzE5LDE5LDE5JyxcclxuICAgIFR1cmJvOiAnMjUwLDI1MCwyNTAnLFxyXG4gICAgU3Ryb21ib2xpOiAnNTAsNTAsNTAnLFxyXG4gICAgT2lsOiAnNDAsNDAsNDAnLFxyXG4gICAgVHdpbGlnaHRCbHVlOiAnMjM4LDIzOCwyMzgnLFxyXG4gICAgV2lsZFJpY2U6ICcyMzYsMjM2LDIzNicsXHJcbiAgICBXaXN0ZXJpYTogJzE1MSwxNTEsMTUxJyxcclxuICAgIEphcGFuZXNlTGF1cmVsOiAnMTAsMTAsMTAnLFxyXG4gICAgUGlja2xlZEJsdWV3b29kOiAnNDksNDksNDknLFxyXG4gICAgU3V2YUdyZXk6ICcxMzYsMTM2LDEzNicsXHJcbiAgICBXZWRnZXdvb2Q6ICc3OCw3OCw3OCcsXHJcbiAgICBXaGlzcGVyOiAnMjQ3LDI0NywyNDcnLFxyXG4gICAgQnVzaDogJzEzLDEzLDEzJyxcclxuICAgIFp5ZGVjbzogJzIsMiwyJyxcclxuICAgIFpvcmJhOiAnMTY1LDE2NSwxNjUnLFxyXG4gICAgSGFsZkJha2VkOiAnMTMzLDEzMywxMzMnLFxyXG4gICAgVHVydGxlR3JlZW46ICc0Miw0Miw0MicsXHJcbiAgICBaYW5haDogJzIxOCwyMTgsMjE4JyxcclxuICAgIFdhZmVyOiAnMjIyLDIyMiwyMjInLFxyXG4gICAgUm9vZlRlcnJhY290dGE6ICcxNjYsMTY2LDE2NicsXHJcbiAgICBNb3JvY2NvQnJvd246ICc2OCw2OCw2OCcsXHJcbiAgICBaZXVzOiAnNDEsNDEsNDEnLFxyXG4gICAgU2FuZER1bmU6ICcxMzAsMTMwLDEzMCcsXHJcbiAgICBQdWVibG86ICcxMjUsMTI1LDEyNScsXHJcbiAgICBQbGFudGF0aW9uOiAnMzksMzksMzknLFxyXG4gICAgVmluUm91Z2U6ICcxNTIsMTUyLDE1MicsXHJcbiAgICBHb2JsaW46ICc2MSw2MSw2MScsXHJcbiAgICBZZWxsb3dTZWE6ICcyNTQsMjU0LDI1NCcsXHJcbiAgICBUZWFrV29vZEZpbmlzaDogJzEwNywxMDcsMTA3JyxcclxuICAgIFdoaXRlTmVjdGFyOiAnMjUyLDI1MiwyNTInLFxyXG4gICAgVGltYmVyR3JlZW46ICcyMiwyMiwyMicsXHJcbiAgICBTaGlyYXo6ICcxNzgsMTc4LDE3OCcsXHJcbiAgICBUdW1ibGV3ZWVkOiAnNTUsNTUsNTUnLFxyXG4gICAgVmVyZHVuR3JlZW46ICc3Myw3Myw3MycsXHJcbiAgICBUaWFNYXJpYTogJzE5MywxOTMsMTkzJyxcclxuICAgIFR1cm1lcmljOiAnMjAyLDIwMiwyMDInLFxyXG4gICAgSmFndWFyOiAnOCw4LDgnLFxyXG4gICAgU2FuRmVsaXg6ICcxMSwxMSwxMScsXHJcbiAgICBTcHJpbmdTdW46ICcyNDYsMjQ2LDI0NicsXHJcbiAgICBTaGFyazogJzM3LDM3LDM3JyxcclxuICAgIFRvYmFnbzogJzYyLDYyLDYyJyxcclxuICAgIFp1Y2Npbmk6ICc0LDQsNCcsXHJcbiAgICBGaXJlZmx5OiAnMTQsMTQsMTQnLFxyXG4gICAgVmlyaWRpYW5HcmVlbjogJzEwMywxMDMsMTAzJyxcclxuICAgIE1hbmR5c1Bpbms6ICcyNDIsMjQyLDI0MicsXHJcbiAgICBXb29kbGFuZDogJzc3LDc3LDc3JyxcclxuICAgIFdvb2RCYXJrOiAnMzgsMzgsMzgnLFxyXG4gICAgUmV2b2x2ZXI6ICc0NCw0NCw0NCcsXHJcbiAgICBXZXN0YXI6ICcyMjAsMjIwLDIyMCcsXHJcbiAgICBCbHVlQmVsbDogJzM0LDM0LDM0JyxcclxuICAgIFdld2FrOiAnMjQxLDI0MSwyNDEnLFxyXG4gICAgV29vZHNtb2tlOiAnMTIsMTIsMTInLFxyXG4gICAgT3hmb3JkQmx1ZTogJzU2LDU2LDU2JyxcclxuICAgIEphY2tzb25zUHVycGxlOiAnMzIsMzIsMzInLFxyXG4gICAgWmlnZ3VyYXQ6ICcxOTEsMTkxLDE5MScsXHJcbiAgICBMaW1hOiAnMTE4LDExOCwxMTgnLFxyXG4gICAgR29zc2lwOiAnMjEwLDIxMCwyMTAnLFxyXG4gICAgUm9sbGluZ1N0b25lOiAnMTE2LDExNiwxMTYnLFxyXG4gICAgRm9yZXN0R3JlZW46ICcyNCwyNCwyNCcsXHJcbiAgICBXZWxsUmVhZDogJzE4MCwxODAsMTgwJyxcclxuICAgIFJhbmdvb25HcmVlbjogJzI4LDI4LDI4JyxcclxuICAgIFplc3Q6ICcyMjksMjI5LDIyOScsXHJcbiAgICBab21iaWU6ICcyMjgsMjI4LDIyOCcsXHJcbiAgICBNdWxiZXJyeTogJzkyLDkyLDkyJyxcclxuICAgIFBpbmVHbGFkZTogJzE5OSwxOTksMTk5JyxcclxuICAgIFNlYUdyZWVuOiAnOSw5LDknLFxyXG4gICAgU2lyZW46ICcxMjIsMTIyLDEyMicsXHJcbiAgICBIaXBwaWVQaW5rOiAnMTc0LDE3NCwxNzQnLFxyXG4gICAgU3VibWFyaW5lOiAnMTg2LDE4NiwxODYnLFxyXG4gICAgVHVuZG9yYTogJzc0LDc0LDc0JyxcclxuICAgIE9uYWhhdTogJzIwNSwyMDUsMjA1JyxcclxuICAgIFN1cmY6ICcxODcsMTg3LDE4NycsXHJcbiAgICBWZXJkaWdyaXM6ICc5Myw5Myw5MycsXHJcbiAgICBXb29kYnVybjogJzYwLDYwLDYwJyxcclxuICAgIFZlc3V2aXVzOiAnMTc3LDE3NywxNzcnLFxyXG4gICAgU2FuZHJpZnQ6ICcxNzEsMTcxLDE3MScsXHJcbiAgICBUb21UaHVtYjogJzYzLDYzLDYzJyxcclxuICAgIFdpbmVCZXJyeTogJzg5LDg5LDg5JyxcclxuICAgIFRoYXRjaEdyZWVuOiAnNjQsNjQsNjQnLFxyXG4gICAgVG9ueXNQaW5rOiAnMjMxLDIzMSwyMzEnLFxyXG4gICAgV2VzdENvYXN0OiAnOTgsOTgsOTgnLFxyXG4gICAgVGFsbG93OiAnMTY4LDE2OCwxNjgnLFxyXG4gICAgV29vZHlCcm93bjogJzcyLDcyLDcyJyxcclxuICAgIEdlbm9hOiAnMjEsMjEsMjEnLFxyXG4gICAgV2FsbnV0OiAnMTE5LDExOSwxMTknLFxyXG4gICAgVGFuYTogJzIxNywyMTcsMjE3JyxcclxuICAgIFdpbGxvd0dyb3ZlOiAnMTAxLDEwMSwxMDEnLFxyXG4gICAgV2hlYXRmaWVsZDogJzI0MywyNDMsMjQzJyxcclxuICAgIFNjYXJwYUZsb3c6ICc4OCw4OCw4OCcsXHJcbiAgICBUYXBlc3RyeTogJzE3NiwxNzYsMTc2JyxcclxuICAgIExpbWVhZGU6ICcxMTEsMTExLDExMScsXHJcbiAgICBTb2xpZFBpbms6ICcxMzcsMTM3LDEzNycsXHJcbiAgICBXaW50ZXJIYXplbDogJzIxMywyMTMsMjEzJyxcclxuICAgIFJvdWdlOiAnMTYyLDE2MiwxNjInLFxyXG4gICAgVGliZXI6ICc2LDYsNicsXHJcbiAgICBUcmVuZHlQaW5rOiAnMTQwLDE0MCwxNDAnLFxyXG4gICAgV2hpdGVMaW5lbjogJzI0OCwyNDgsMjQ4JyxcclxuICAgIFNwZWN0cmE6ICc0Nyw0Nyw0NycsXHJcbiAgICBXZXN0ZXJuUmVkOiAnMTM5LDEzOSwxMzknLFxyXG4gICAgVHJpbmlkYWQ6ICcyMzAsMjMwLDIzMCcsXHJcbiAgICBQYWR1YTogJzE3MywxNzMsMTczJyxcclxuICAgIFBlcnNpYW5SZWQ6ICc4Miw4Miw4MicsXHJcbiAgICBQZXBwZXJtaW50OiAnMjI3LDIyNywyMjcnLFxyXG4gICAgU2FpbDogJzE4NCwxODQsMTg0JyxcclxuICAgIFZhbmlsbGE6ICcyMDksMjA5LDIwOScsXHJcbiAgICBUZVBhcGFHcmVlbjogJzMwLDMwLDMwJyxcclxuICAgIFRvc2NhOiAnMTQxLDE0MSwxNDEnLFxyXG4gICAgVGF4QnJlYWs6ICc4MSw4MSw4MScsXHJcbiAgICBWYWxlbnRpbm86ICc1Myw1Myw1MycsXHJcbiAgICBUdXNjYW55OiAnMTg5LDE4OSwxODknLFxyXG4gICAgUGluZVRyZWU6ICcyMywyMywyMycsXHJcbiAgICBNb250ZUNhcmxvOiAnMTMxLDEzMSwxMzEnLFxyXG4gICAgU2FnZTogJzE1OCwxNTgsMTU4JyxcclxuICAgIFl1bWE6ICcyMDYsMjA2LDIwNicsXHJcbiAgICBUaHVuZGVyOiAnNTEsNTEsNTEnLFxyXG4gICAgU3dlZXRQaW5rOiAnMjUzLDI1MywyNTMnLFxyXG4gICAgU2FyYXRvZ2E6ICc4NSw4NSw4NScsXHJcbiAgICBQZXJ1VGFuOiAnMTI3LDEyNywxMjcnLFxyXG4gICAgU3dlZXRDb3JuOiAnMjUxLDI1MSwyNTEnLFxyXG4gICAgVHJ1ZVY6ICcxMzgsMTM4LDEzOCcsXHJcbiAgICBUYW5nZXJpbmU6ICcyMzMsMjMzLDIzMycsXHJcbiAgICBTcHJpbmdSYWluOiAnMTcyLDE3MiwxNzInLFxyXG4gICAgV29vZHJ1c2g6ICc0OCw0OCw0OCcsXHJcbiAgICBTdGFyRHVzdDogJzE1OSwxNTksMTU5JyxcclxuICAgIENvcHBlckNhbnlvbjogJzEyNiwxMjYsMTI2JyxcclxuICAgIFNtb2t5OiAnOTYsOTYsOTYnLFxyXG4gICAgT3JhbmdlUm91Z2h5OiAnMTk2LDE5NiwxOTYnLFxyXG4gICAgUGxhbnRlcjogJzk3LDk3LDk3JyxcclxuICAgIFR3aW5lOiAnMTk0LDE5NCwxOTQnLFxyXG4gICAgV2F0ZXJjb3Vyc2U6ICc1LDUsNScsXHJcbiAgICBUYWJhc2NvOiAnMTYwLDE2MCwxNjAnLFxyXG4gICAgV2lsZFdpbGxvdzogJzE4NSwxODUsMTg1JyxcclxuICAgIFRoYXRjaDogJzE4MiwxODIsMTgyJyxcclxuICAgIExvdWxvdTogJzcwLDcwLDcwJyxcclxuICAgIFhhbmFkdTogJzExNSwxMTUsMTE1JyxcclxuICAgIFR1cmtpc2hSb3NlOiAnMTgxLDE4MSwxODEnLFxyXG4gICAgVmVudXM6ICcxNDYsMTQ2LDE0NicsXHJcbiAgICBNb3J0YXI6ICc4MCw4MCw4MCcsXHJcbiAgICBSZWRPeGlkZTogJzExMCwxMTAsMTEwJyxcclxuICAgIFRyYWRld2luZDogJzk1LDk1LDk1JyxcclxuICAgIFNtb2tleUFzaDogJzY1LDY1LDY1JyxcclxuICAgIExpbWVkU3BydWNlOiAnNTcsNTcsNTcnLFxyXG4gICAgU2lsdmVyVHJlZTogJzEwMiwxMDIsMTAyJyxcclxuICAgIFdpc3RmdWw6ICcxNjQsMTY0LDE2NCcsXHJcbiAgICBSdXNzZXR0OiAnMTE3LDExNywxMTcnLFxyXG4gICAgVmlraW5nOiAnMTAwLDEwMCwxMDAnLFxyXG4gICAgUm9wZTogJzE0MiwxNDIsMTQyJyxcclxuICAgIFBpbmVDb25lOiAnMTA5LDEwOSwxMDknLFxyXG4gICAgVnVsY2FuOiAnMTYsMTYsMTYnLFxyXG4gICAgTGlseTogJzIwMCwyMDAsMjAwJyxcclxuICAgIFZpc3RhQmx1ZTogJzE0MywxNDMsMTQzJyxcclxuICAgIE1vc2FpYzogJzE4LDE4LDE4JyxcclxuICAgIEVtaW5lbmNlOiAnMTA4LDEwOCwxMDgnLFxyXG4gICAgU3BpY3lQaW5rOiAnMTI5LDEyOSwxMjknLFxyXG4gICAgVGFyYTogJzIyNSwyMjUsMjI1JyxcclxuICAgIEV0ZXJuaXR5OiAnMzMsMzMsMzMnLFxyXG4gICAgVGFzbWFuOiAnMjA3LDIwNywyMDcnLFxyXG4gICAgU3ByYXk6ICcxMjEsMTIxLDEyMScsXHJcbiAgICBUaXRhbldoaXRlOiAnMjQwLDI0MCwyNDAnLFxyXG4gICAgVGF1cGVHcmV5OiAnMTc5LDE3OSwxNzknLFxyXG4gICAgVGF3bnlQb3J0OiAnMTA1LDEwNSwxMDUnLFxyXG4gICAgU3B1blBlYXJsOiAnMTcwLDE3MCwxNzAnLFxyXG4gICAgVmFsZW5jaWE6ICcyMTYsMjE2LDIxNicsXHJcbiAgICBQYXZsb3ZhOiAnMjE1LDIxNSwyMTUnLFxyXG4gICAgVmlvbGE6ICcyMDMsMjAzLDIwMycsXHJcbiAgICBGb3VudGFpbkJsdWU6ICc4Niw4Niw4NicsXHJcbiAgICBTZWFndWxsOiAnMTI4LDEyOCwxMjgnLFxyXG4gICAgUGlua1N3YW46ICcxOTAsMTkwLDE5MCcsXHJcbiAgICBQYWxtTGVhZjogJzI1LDI1LDI1JyxcclxuICAgIFZpZGFMb2NhOiAnODQsODQsODQnLFxyXG4gICAgUG9yY2VsYWluOiAnMjM5LDIzOSwyMzknLFxyXG4gICAgVmVuZXRpYW5SZWQ6ICcxMTQsMTE0LDExNCcsXHJcbiAgICBHcmFubnlTbWl0aDogJzEzMiwxMzIsMTMyJyxcclxuICAgIFZpb2xldDogJzM2LDM2LDM2JyxcclxuICAgIEdyZWVuUGVhOiAnMjksMjksMjknLFxyXG4gICAgVGFuZ2Fyb2E6ICczLDMsMycsXHJcbiAgICBTYW5NYXJpbm86ICc2OSw2OSw2OScsXHJcbiAgICBUcm9waWNhbEJsdWU6ICcxOTUsMTk1LDE5NScsXHJcbiAgICBUb2FzdDogJzE1NCwxNTQsMTU0JyxcclxuICAgIFRhbWFyaW5kOiAnNTIsNTIsNTInLFxyXG4gICAgU2FoYXJhOiAnMTgzLDE4MywxODMnLFxyXG4gICAgVmFsaGFsbGE6ICc0Myw0Myw0MycsXHJcbiAgICBLYWJ1bDogJzk0LDk0LDk0JyxcclxuICAgIFZvb2RvbzogJzgzLDgzLDgzJyxcclxuICAgIFJlZFN0YWdlOiAnMjA4LDIwOCwyMDgnLFxyXG4gICAgV2Fpa2F3YUdyZXk6ICc5MCw5MCw5MCcsXHJcbiAgICBXaWxsaWFtOiAnNTgsNTgsNTgnLFxyXG4gICAgUGFuZGE6ICc2Niw2Niw2NicsXHJcbiAgICBKYW1iYWxheWE6ICc5MSw5MSw5MScsXHJcbiAgICBaaXJjb246ICcyNDQsMjQ0LDI0NCcsXHJcbiAgICBXYXNhYmk6ICcxMjAsMTIwLDEyMCcsXHJcbiAgICBOaWdodFJpZGVyOiAnMzEsMzEsMzEnLFxyXG4gICAgV2Fpb3VydTogJzU0LDU0LDU0JyxcclxuICAgIFN1bW1lckdyZWVuOiAnMTUwLDE1MCwxNTAnLFxyXG4gICAgTHVja3lQb2ludDogJzI2LDI2LDI2JyxcclxuICAgIFRvdGVtUG9sZTogJzE1MywxNTMsMTUzJyxcclxuICAgIE1leGljYW5SZWQ6ICcxNjcsMTY3LDE2NycsXHJcbiAgICBNYWxsYXJkOiAnMzUsMzUsMzUnLFxyXG4gICAgU3RUcm9wYXo6ICc0NSw0NSw0NScsXHJcbiAgICBUaHVuZGVyYmlyZDogJzE5MiwxOTIsMTkyJyxcclxuICAgIFRhY2hhOiAnMjE0LDIxNCwyMTQnLFxyXG4gICAgU3RyaWtlbWFzdGVyOiAnMTQ5LDE0OSwxNDknLFxyXG4gICAgTmFuZG9yOiAnNzUsNzUsNzUnLFxyXG4gICAgVG9yeUJsdWU6ICcyMCwyMCwyMCcsXHJcbiAgICBUdXNzb2NrOiAnMTk3LDE5NywxOTcnLFxyXG4gICAgWmFtYmV6aTogJzEwNCwxMDQsMTA0JyxcclxuICAgIFBhdGluYTogJzk5LDk5LDk5JyxcclxuICAgIFBvd2RlckJsdWU6ICcxODgsMTg4LDE4OCcsXHJcbiAgICBTd2lybDogJzIxMSwyMTEsMjExJyxcclxuICAgIFNwcmluZ0dyZWVuOiAnODcsODcsODcnLFxyXG4gICAgU3RpbGV0dG86ICcxNTYsMTU2LDE1NicsXHJcbiAgICBXaGl0ZUljZTogJzIyMSwyMjEsMjIxJyxcclxuICAgIFRhcmF3ZXJhOiAnNyw3LDcnLFxyXG4gICAgVGhpc3RsZTogJzIwNCwyMDQsMjA0JyxcclxuICAgIFRvcmVhQmF5OiAnMTUsMTUsMTUnLFxyXG59O1xyXG5cclxuY29uc3QgZ2V0Q29sb3JzTWFwID0gKGNvbG9ycykgPT4ge1xyXG4gICAgY29uc3QgY29sb3JzTWFwID0ge307XHJcblxyXG4gICAgY29sb3JzLmNvbG9ycy5mb3JFYWNoKChjb2xvcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgciwgZywgYiB9ID0gY29sb3IucmdiO1xyXG4gICAgICAgIGNvbnN0IGNvbG9yTmFtZSA9IGNvbG9yLm5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgY29sb3JzTWFwW2NvbG9yTmFtZV0gPSBgJHtyfSwke2d9LCR7Yn1gO1xyXG4gICAgICAgIGNvbG9yc01hcFtgJHtyfSwke2d9LCR7Yn1gXSA9IGNvbG9yTmFtZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7IC4uLmNvbG9yc01hcCwgLi4uYWRkaXRpb25hbENvbG9ycyB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2V0Q29sb3JzTWFwO1xyXG4iLCJjb25zdCBzZXRMb2NhbFN0b3JhZ2UgPSAoa2V5LCB2YWx1ZSkgPT4gbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2V0TG9jYWxTdG9yYWdlO1xyXG4iLCJpbXBvcnQgZ2V0TG9jYWxTdG9yYWdlIGZyb20gJy4vbG9jYWxTdG9yYWdlL2dldExvY2FsU3RvcmFnZSc7XHJcbmltcG9ydCBnZXRDb2xvcnNNYXAgZnJvbSAnLi9nZXRDb2xvcnNNYXAnO1xyXG5pbXBvcnQgc2V0TG9jYWxTdG9yYWdlIGZyb20gJy4vbG9jYWxTdG9yYWdlL3NldExvY2FsU3RvcmFnZSc7XHJcblxyXG5jb25zdCB1cGxvYWRBbGxDb2xvcnMgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBhbGxDb2xvcnMgPSBnZXRMb2NhbFN0b3JhZ2UoJ2FsbENvbG9ycycpO1xyXG5cclxuICAgIGlmICghYWxsQ29sb3JzLmxlbmd0aCkge1xyXG4gICAgICAgIGZldGNoKCdodHRwczovL2FwaS5jb2xvci5waXp6YS92MS8nKVxyXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbigoY29sb3JzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvcnNNYXAgPSBnZXRDb2xvcnNNYXAoY29sb3JzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRMb2NhbFN0b3JhZ2UoJ2FsbENvbG9ycycsIGNvbG9ycyk7XHJcbiAgICAgICAgICAgICAgICBzZXRMb2NhbFN0b3JhZ2UoJ2NvbG9yc01hcCcsIGNvbG9yc01hcCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JzTWFwO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVwbG9hZEFsbENvbG9ycztcclxuIiwiaW1wb3J0IGdldEVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0RWxlbWVudCc7XHJcblxyXG5jb25zdCBuZXdHYW1lID0gZ2V0RWxlbWVudCgnLnBsYXlNZW51QnV0dG9uJyk7XHJcbmNvbnN0IG9wdGlvbnMgPSBnZXRFbGVtZW50KCcub3B0aW9uc01lbnVCdXR0b24nKTtcclxuXHJcbmNsYXNzIE1haW5NZW51IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYnV0dG9ucyA9IHtcclxuICAgICAgICAgICAgbmV3R2FtZSxcclxuICAgICAgICAgICAgb3B0aW9ucyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZ2V0RWxlbWVudCgnLm1haW5NZW51Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgYnV0dG9uSGFuZGxlcihidXR0b24sIGZuKSB7XHJcbiAgICAgICAgdGhpcy5idXR0b25zW2J1dHRvbl0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBmbigpKTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlKCkge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IG1haW5NZW51ID0gbmV3IE1haW5NZW51KCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtYWluTWVudTtcclxuIiwiaW1wb3J0IGhhbmRsZUtleVB1c2ggZnJvbSAnLi91dGlscy9nYW1lQ29udHJvbC9oYW5kbGVLZXlQdXNoJztcclxuaW1wb3J0IGdldEdhbWVGaWVsZE9iamVjdHMgZnJvbSAnLi91dGlscy9nZXRHYW1lRmllbGRPYmplY3RzJztcclxuaW1wb3J0IGdldENvbGxpc2lvbk9iamVjdCBmcm9tICcuL3V0aWxzL2dhbWVMb2dpYy9nZXRDb2xsaXNpb25PYmplY3QnO1xyXG5pbXBvcnQgdXBsb2FkQWxsQ29sb3JzIGZyb20gJy4vdXRpbHMvdXBsb2FkQWxsQ29sb3JzJztcclxuaW1wb3J0IGdldEdhbWVPYmplY3RzUG9zaXRpb25zIGZyb20gJy4vdXRpbHMvZ2V0R2FtZU9iamVjdHNQb3NpdGlvbnMnO1xyXG5pbXBvcnQgZ2V0RmllbGRQb3NpdGlvbnMgZnJvbSAnLi91dGlscy9nZXRGaWVsZFBvc2l0aW9ucyc7XHJcbmltcG9ydCBnZXRGcmVlUG9zaXRpb25zIGZyb20gJy4vdXRpbHMvZ2V0RnJlZVBvc2l0aW9ucyc7XHJcbmltcG9ydCBHaWZ0IGZyb20gJy4vaW5pdGlhbFNldHRpbmdzL0dpZnQnO1xyXG5pbXBvcnQgZ2V0SW50ZXJhY3RpdmVHYW1lT2JqZWN0cyBmcm9tICcuL3V0aWxzL2dldEludGVyYWN0aXZlR2FtZU9iamVjdHMnO1xyXG5pbXBvcnQgRm9vZCBmcm9tICcuL2luaXRpYWxTZXR0aW5ncy9Gb29kJztcclxuaW1wb3J0IHNvdW5kc1NyYyBmcm9tICcuL3NvdW5kUGxheWVyL3NvdW5kc1NyYyc7XHJcbmltcG9ydCBnYW1lU3RhdGUgZnJvbSAnLi9nYW1lL2dhbWVTdGF0ZS9nYW1lU3RhdGUnO1xyXG5pbXBvcnQgcmVmcmVzaFJhdGUgZnJvbSAnLi9nYW1lL29wdGlvbnMvcmVmcmVzaFJhdGUvcmVmcmVzaFJhdGUnO1xyXG5pbXBvcnQgbWFpbk1lbnUgZnJvbSAnLi9ET00vTWFpbk1lbnUvTWFpbk1lbnUnO1xyXG5pbXBvcnQgZ2FtZUNvbnRhaW5lciBmcm9tICcuL0RPTS9HYW1lQ29udGFpbmVyL0dhbWVDb250YWluZXInO1xyXG5pbXBvcnQgQ2FudmFzIGZyb20gJy4vaW5pdGlhbFNldHRpbmdzL0NhbnZhcyc7XHJcbmltcG9ydCBzb3VuZFBsYXllciBmcm9tICcuL3NvdW5kUGxheWVyL3NvdW5kUGxheWVyJztcclxuXHJcbm1haW5NZW51LmJ1dHRvbkhhbmRsZXIoJ25ld0dhbWUnLCAoKSA9PiB7XHJcbiAgICBtYWluTWVudS5oaWRlKCk7XHJcbiAgICBnYW1lQ29udGFpbmVyLm1vdW50KCk7XHJcbiAgICBnYW1lQ29udGFpbmVyLmluaXRpYWxpemUoKTtcclxuICAgIHVwbG9hZEFsbENvbG9ycygpO1xyXG4gICAgY29uc3QgZ2FtZUZpZWxkT2JqZWN0cyA9IGdldEdhbWVGaWVsZE9iamVjdHMoKTtcclxuICAgIGNvbnN0IHsgYXBwbGUsIHNuYWtlLCBnaWZ0IH0gPSBnYW1lRmllbGRPYmplY3RzO1xyXG4gICAgY29uc3QgY2FudmFzID0gbmV3IENhbnZhcyg1MDAsIDUwMCwgJ2JsYWNrJyk7XHJcbiAgICBjb25zdCB7IHNpemUsIGRpcmVjdGlvbiwgYm9keSB9ID0gc25ha2U7XHJcbiAgICBjb25zdCB7IHdpZHRoLCBlbGVtZW50U2l6ZSB9ID0gY2FudmFzO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdhbWUoKSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZ2FtZSksIHJlZnJlc2hSYXRlLmN1cnJlbnRSYXRlKTtcclxuXHJcbiAgICAgICAgaWYgKCFnYW1lU3RhdGUucGF1c2UpIHtcclxuICAgICAgICAgICAgY29uc3QgZ2FtZU9iamVjdHNQb3NpdGlvbnMgPSBnZXRHYW1lT2JqZWN0c1Bvc2l0aW9ucyhnYW1lRmllbGRPYmplY3RzKTtcclxuICAgICAgICAgICAgY29uc3QgZmllbGRQb3NpdGlvbnMgPSBnZXRGaWVsZFBvc2l0aW9ucyhlbGVtZW50U2l6ZSwgd2lkdGgpO1xyXG4gICAgICAgICAgICBjb25zdCBmcmVlUG9zaXRpb25zID0gZ2V0RnJlZVBvc2l0aW9ucyhnYW1lT2JqZWN0c1Bvc2l0aW9ucywgZmllbGRQb3NpdGlvbnMpO1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcmFjdGl2ZUdhbWVPYmplY3RzID0gZ2V0SW50ZXJhY3RpdmVHYW1lT2JqZWN0cyhnYW1lRmllbGRPYmplY3RzKTtcclxuICAgICAgICAgICAgY29uc3QgaGVhZFBvc2l0aW9uID0gYm9keVswXTtcclxuICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uT2JqZWN0ID0gZ2V0Q29sbGlzaW9uT2JqZWN0KGhlYWRQb3NpdGlvbiwgaW50ZXJhY3RpdmVHYW1lT2JqZWN0cyk7XHJcblxyXG4gICAgICAgICAgICBjYW52YXMuZHJhdygpO1xyXG4gICAgICAgICAgICBhcHBsZS5kcmF3KCk7XHJcbiAgICAgICAgICAgIGdpZnQuZHJhdygpO1xyXG4gICAgICAgICAgICBzbmFrZS5kcmF3KCk7XHJcbiAgICAgICAgICAgIHNuYWtlLm1vdmUod2lkdGgpO1xyXG4gICAgICAgICAgICBpZiAoY29sbGlzaW9uT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uT2JqZWN0IGluc3RhbmNlb2YgRm9vZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gY29sbGlzaW9uT2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZWF0Rm9vZFNyYyB9ID0gc291bmRzU3JjO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbmFrZS5pbmNyZWFzZUxlbmd0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdW5kUGxheWVyLnBsYXkoZWF0Rm9vZFNyY1tuYW1lXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uT2JqZWN0IGluc3RhbmNlb2YgR2lmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdpZnQubWFrZVJhbmRvbUFjdGlvbldpdGgoc25ha2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uT2JqZWN0LnNwYXduKGZyZWVQb3NpdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlQdXNoLmJpbmQodGhpcywgZGlyZWN0aW9uLCBzaXplKSk7XHJcbiAgICBnYW1lQ29udGFpbmVyLnNldElubmVyVGV4dCgnZnBzQ29udGFpbmVyJywgYEZQUyAtICR7cmVmcmVzaFJhdGUuZ2V0Q3VycmVudEZwcygpfWApO1xyXG4gICAgc25ha2UuY3JlYXRlU25ha2UoMyk7XHJcbiAgICBnYW1lKCk7XHJcbn0pO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVlUG9zaXRpb25zKGdhbWVGaWVsZE9iamVjdHMsIGZpZWxkUG9zaXRpb25zKSB7XHJcbiAgICBjb25zdCBtYXAgPSB7fTtcclxuXHJcbiAgICBnYW1lRmllbGRPYmplY3RzLmZvckVhY2goKHsgeCwgeSB9KSA9PiB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7eH0vJHt5fWA7XHJcblxyXG4gICAgICAgIG1hcFtrZXldID0geTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBmaWVsZFBvc2l0aW9ucy5maWx0ZXIoKGZpZWxkUG9zaXRpb24pID0+IHtcclxuICAgICAgICBjb25zdCB7IHgsIHkgfSA9IGZpZWxkUG9zaXRpb247XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7eH0vJHt5fWA7XHJcblxyXG4gICAgICAgIHJldHVybiBtYXBba2V5XSA/IGZhbHNlIDogZmllbGRQb3NpdGlvbjtcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBTbmFrZSBmcm9tICcuLi9pbml0aWFsU2V0dGluZ3MvU25ha2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0R2FtZU9iamVjdHNQb3NpdGlvbnMoZ2FtZUZpZWxkT2JqZWN0cykge1xyXG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoZ2FtZUZpZWxkT2JqZWN0cylcclxuICAgICAgICAubWFwKChnYW1lRmllbGRPYmplY3QpID0+IChnYW1lRmllbGRPYmplY3QgaW5zdGFuY2VvZiBTbmFrZSA/IGdhbWVGaWVsZE9iamVjdC5ib2R5IDogZ2FtZUZpZWxkT2JqZWN0LnBvc2l0aW9uKSlcclxuICAgICAgICAuZmxhdCgpO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEZpZWxkUG9zaXRpb25zKGVsZW1lbnRTaXplLCBjYW52YXNXaWR0aCkge1xyXG4gICAgY29uc3Qgcm93cyA9IE1hdGguZmxvb3IoY2FudmFzV2lkdGggLyBlbGVtZW50U2l6ZSk7XHJcblxyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oQXJyYXkocm93cykpXHJcbiAgICAgICAgLm1hcCgoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oQXJyYXkocm93cykpLm1hcCgocm93RWxlbWVudCwgcm93SW5kZXgpID0+ICh7XHJcbiAgICAgICAgICAgICAgICB4OiBpbmRleCAqIGVsZW1lbnRTaXplLFxyXG4gICAgICAgICAgICAgICAgeTogcm93SW5kZXggKiBlbGVtZW50U2l6ZSxcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmZsYXQoKTtcclxufVxyXG4iLCJpbXBvcnQgU25ha2UgZnJvbSAnLi4vaW5pdGlhbFNldHRpbmdzL1NuYWtlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEludGVyYWN0aXZlR2FtZU9iamVjdHMoZ2FtZUZpZWxkT2JqZWN0cykge1xyXG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoZ2FtZUZpZWxkT2JqZWN0cykuZmlsdGVyKChnYW1lRmllbGRPYmplY3QpID0+IGdhbWVGaWVsZE9iamVjdCBpbnN0YW5jZW9mIFNuYWtlID09PSBmYWxzZSk7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29sbGlzaW9uT2JqZWN0KGhlYWRQb3NpdGlvbiwgaW50ZXJhY3RpdmVHYW1lT2JqZWN0cykge1xyXG4gICAgY29uc3QgbWFwID0ge307XHJcblxyXG4gICAgY29uc3QgaGVhZFBvc2l0aW9uc0tleSA9IE9iamVjdC52YWx1ZXMoaGVhZFBvc2l0aW9uKS5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50UG9zaXRpb24pID0+IHtcclxuICAgICAgICByZXR1cm4gYCR7YWNjdW11bGF0b3J9LyR7Y3VycmVudFBvc2l0aW9ufWA7XHJcbiAgICB9KTtcclxuXHJcbiAgICBtYXBbaGVhZFBvc2l0aW9uc0tleV0gPSBoZWFkUG9zaXRpb25zS2V5O1xyXG5cclxuICAgIGNvbnN0IFtjb2xsaXNpb25PYmplY3RdID0gaW50ZXJhY3RpdmVHYW1lT2JqZWN0cy5maWx0ZXIoKGludGVyYWN0aXZlR2FtZU9iamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gaW50ZXJhY3RpdmVHYW1lT2JqZWN0LnBvc2l0aW9uO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGAke3h9LyR7eX1gO1xyXG5cclxuICAgICAgICByZXR1cm4gbWFwW2tleV07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gY29sbGlzaW9uT2JqZWN0O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=